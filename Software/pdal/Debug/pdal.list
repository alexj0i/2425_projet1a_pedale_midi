
pdal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f8  080065f8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080065f8  080065f8  000075f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006600  08006600  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006600  08006600  00007600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006604  08006604  00007604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006608  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  08006670  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006670  00008330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189d4  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003346  00000000  00000000  00020a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00023db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107a  00000000  00000000  00025310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e55  00000000  00000000  0002638a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aca  00000000  00000000  000481df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd224  00000000  00000000  00061ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000620c  00000000  00000000  0013ef10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006550 	.word	0x08006550

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006550 	.word	0x08006550

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	@ 0x30
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2220      	movs	r2, #32
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fa3d 	bl	8005a48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800060a:	2201      	movs	r2, #1
 800060c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	4817      	ldr	r0, [pc, #92]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800063a:	f001 f81d 	bl	8001678 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000644:	f000 fa21 	bl	8000a8a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800064c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000654:	f002 f922 	bl	800289c <HAL_ADCEx_MultiModeConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800065e:	f000 fa14 	bl	8000a8a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_ADC1_Init+0xec>)
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2306      	movs	r3, #6
 8000668:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066e:	237f      	movs	r3, #127	@ 0x7f
 8000670:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2304      	movs	r3, #4
 8000674:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000680:	f001 fb54 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800068a:	f000 f9fe 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3730      	adds	r7, #48	@ 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000084 	.word	0x20000084
 800069c:	04300002 	.word	0x04300002

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09a      	sub	sp, #104	@ 0x68
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2244      	movs	r2, #68	@ 0x44
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 f9c1 	bl	8005a48 <memset>
  if(adcHandle->Instance==ADC1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006ce:	d134      	bne.n	800073a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fa23 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006ec:	f000 f9cd 	bl	8000a8a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 80006f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 8000716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000720:	2301      	movs	r3, #1
 8000722:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000724:	2303      	movs	r3, #3
 8000726:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000736:	f002 fa65 	bl	8002c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3768      	adds	r7, #104	@ 0x68
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b48      	ldr	r3, [pc, #288]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a47      	ldr	r2, [pc, #284]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b45      	ldr	r3, [pc, #276]	@ (8000880 <MX_GPIO_Init+0x138>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b42      	ldr	r3, [pc, #264]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a41      	ldr	r2, [pc, #260]	@ (8000880 <MX_GPIO_Init+0x138>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b3f      	ldr	r3, [pc, #252]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b3c      	ldr	r3, [pc, #240]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a3b      	ldr	r2, [pc, #236]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b39      	ldr	r3, [pc, #228]	@ (8000880 <MX_GPIO_Init+0x138>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	4836      	ldr	r0, [pc, #216]	@ (8000884 <MX_GPIO_Init+0x13c>)
 80007ac:	f002 fbac 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80007b0:	2200      	movs	r2, #0
 80007b2:	f248 11ea 	movw	r1, #33258	@ 0x81ea
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f002 fba5 	bl	8002f08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c6:	f002 fb9f 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|LED_STATUS_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f240 1191 	movw	r1, #401	@ 0x191
 80007d0:	482d      	ldr	r0, [pc, #180]	@ (8000888 <MX_GPIO_Init+0x140>)
 80007d2:	f002 fb99 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4825      	ldr	r0, [pc, #148]	@ (8000884 <MX_GPIO_Init+0x13c>)
 80007ee:	f002 fa09 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007f2:	f248 13fa 	movw	r3, #33274	@ 0x81fa
 80007f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f002 f9f9 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB7 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7|LED_STATUS_Pin;
 8000812:	f240 1391 	movw	r3, #401	@ 0x191
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_GPIO_Init+0x140>)
 800082c:	f002 f9ea 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000830:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084a:	f002 f9db 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800084e:	2360      	movs	r3, #96	@ 0x60
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <MX_GPIO_Init+0x140>)
 8000862:	f002 f9cf 	bl	8002c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2028      	movs	r0, #40	@ 0x28
 800086c:	f002 f995 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000870:	2028      	movs	r0, #40	@ 0x28
 8000872:	f002 f9ac 	bl	8002bce <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	48001400 	.word	0x48001400
 8000888:	48000400 	.word	0x48000400

0800088c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000894:	1d39      	adds	r1, r7, #4
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <__io_putchar+0x20>)
 800089e:	f004 f84d 	bl	800493c <HAL_UART_Transmit>

	return chr;
 80008a2:	687b      	ldr	r3, [r7, #4]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000014c 	.word	0x2000014c

080008b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		screenDisplay();
 80008c2:	f000 f93f 	bl	8000b44 <screenDisplay>
	}
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40000800 	.word	0x40000800

080008d4 <HAL_GPIO_EXTI_Callback>:

/* Fonction de callback des boutons */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	static int lastButtonTime = 0; // Anti-rebonds

	if ((HAL_GetTick() - lastButtonTime) > 10)
 80008de:	f000 fc45 	bl	800116c <HAL_GetTick>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a34      	ldr	r2, [pc, #208]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d960      	bls.n	80009b0 <HAL_GPIO_EXTI_Callback+0xdc>
	{ // Anti-rebonds 50ms
		switch(GPIO_Pin)
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008f4:	d008      	beq.n	8000908 <HAL_GPIO_EXTI_Callback+0x34>
 80008f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008fa:	dc53      	bgt.n	80009a4 <HAL_GPIO_EXTI_Callback+0xd0>
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d03f      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0xac>
 8000900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000904:	d01e      	beq.n	8000944 <HAL_GPIO_EXTI_Callback+0x70>
 8000906:	e04d      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0xd0>
		{
		case BUTTON_UP:
			globalToDisplay++;
 8000908:	4b2c      	ldr	r3, [pc, #176]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a2b      	ldr	r2, [pc, #172]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000910:	6013      	str	r3, [r2, #0]
			// Change l'instrument virtuel suivant le numero affiché sur l'ecran en piochant le son associé dans la banque MIDI.
			ProgramChange(globalToDisplay);
 8000912:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f8be 	bl	8000a98 <ProgramChange>
			printf("%d \r\n", globalToDisplay);
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	4827      	ldr	r0, [pc, #156]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000924:	f004 ff48 	bl	80057b8 <iprintf>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800092e:	4825      	ldr	r0, [pc, #148]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000930:	f002 faea 	bl	8002f08 <HAL_GPIO_WritePin>
			if (globalToDisplay > 127) //RQ: pour moi 127 car une data en midi = 1 octet donc au max 128 sons différents possibles
 8000934:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b7f      	cmp	r3, #127	@ 0x7f
 800093a:	dd30      	ble.n	800099e <HAL_GPIO_EXTI_Callback+0xca>
			{
				globalToDisplay=127;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800093e:	227f      	movs	r2, #127	@ 0x7f
 8000940:	601a      	str	r2, [r3, #0]
			}
			break;
 8000942:	e02c      	b.n	800099e <HAL_GPIO_EXTI_Callback+0xca>

		case BUTTON_DOWN:
			globalToDisplay--;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3b01      	subs	r3, #1
 800094a:	4a1c      	ldr	r2, [pc, #112]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800094c:	6013      	str	r3, [r2, #0]
			// Change l'instrument virtuel suivant le numero affiché sur l'ecran en piochant le son associé dans la banque MIDI.
			ProgramChange(globalToDisplay);
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f8a0 	bl	8000a98 <ProgramChange>
			printf("%d \r\n", globalToDisplay);
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000960:	f004 ff2a 	bl	80057b8 <iprintf>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096a:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0xf0>)
 800096c:	f002 facc 	bl	8002f08 <HAL_GPIO_WritePin>
			if (globalToDisplay < 0)
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da14      	bge.n	80009a2 <HAL_GPIO_EXTI_Callback+0xce>
			{
				globalToDisplay=0;
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
			}
			break;
 800097e:	e010      	b.n	80009a2 <HAL_GPIO_EXTI_Callback+0xce>

		case PEDAL:
			ControlChange(ADCValue(), EFFECT);
 8000980:	f000 f8ba 	bl	8000af8 <ADCValue>
 8000984:	4603      	mov	r3, r0
 8000986:	2107      	movs	r1, #7
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f89b 	bl	8000ac4 <ControlChange>
			printf("%d \r\n", ADCValue());
 800098e:	f000 f8b3 	bl	8000af8 <ADCValue>
 8000992:	4603      	mov	r3, r0
 8000994:	4619      	mov	r1, r3
 8000996:	480a      	ldr	r0, [pc, #40]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000998:	f004 ff0e 	bl	80057b8 <iprintf>
			break;
 800099c:	e002      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0xd0>
			break;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0xd0>
			break;
 80009a2:	bf00      	nop

		}

		lastButtonTime = HAL_GetTick();
 80009a4:	f000 fbe2 	bl	800116c <HAL_GetTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80009ae:	601a      	str	r2, [r3, #0]
	}
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000f0 	.word	0x200000f0
 80009bc:	200000f4 	.word	0x200000f4
 80009c0:	08006568 	.word	0x08006568
 80009c4:	48000400 	.word	0x48000400

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fb69 	bl	80010a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f810 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f7ff feb8 	bl	8000748 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009d8:	f000 fa92 	bl	8000f00 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80009dc:	f7ff fde8 	bl	80005b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80009e0:	f000 fa1a 	bl	8000e18 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	printf("Test\r\n");
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <main+0x28>)
 80009e6:	f004 ff4f 	bl	8005888 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009ea:	bf00      	nop
 80009ec:	e7fd      	b.n	80009ea <main+0x22>
 80009ee:	bf00      	nop
 80009f0:	08006570 	.word	0x08006570

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	2238      	movs	r2, #56	@ 0x38
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 f820 	bl	8005a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f002 faa6 	bl	8002f68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a26:	2340      	movs	r3, #64	@ 0x40
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a36:	2355      	movs	r3, #85	@ 0x55
 8000a38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fb40 	bl	80030d0 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a56:	f000 f818 	bl	8000a8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2104      	movs	r1, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fe3e 	bl	80036f4 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 f804 	bl	8000a8a <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	@ 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
}
 8000a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <Error_Handler+0x8>
	...

08000a98 <ProgramChange>:
#include "usart.h"
//Forme message MIDI : Status, Data 1, Data 2

// Fonction d'envoi d'un changement de de son dans la banque MIDI
void ProgramChange(int MIDISoundNumber)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    int data[2] = {0xC0, MIDISoundNumber};  // le changement de programme se fait sur le canal 1 car 0xC0
 8000aa0:	23c0      	movs	r3, #192	@ 0xc0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, data, 2, HAL_MAX_DELAY);
 8000aa8:	f107 0108 	add.w	r1, r7, #8
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <ProgramChange+0x28>)
 8000ab4:	f003 ff42 	bl	800493c <HAL_UART_Transmit>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000014c 	.word	0x2000014c

08000ac4 <ControlChange>:

// Fonction pedale MIDI changement de valeur d'un bouton au fonctionnement définit

void ControlChange(int pedalValue,int effect)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    int data[3] = {0xB0, effect, pedalValue};  // 0xB0 = Control Change sur canal 1 bouton 0
 8000ace:	23b0      	movs	r3, #176	@ 0xb0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(&huart1, data, 3, HAL_MAX_DELAY);
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <ControlChange+0x30>)
 8000ae6:	f003 ff29 	bl	800493c <HAL_UART_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000014c 	.word	0x2000014c

08000af8 <ADCValue>:

// Recupere la valeur du potentiometre suivant l'inclinaison de la pédale et la convertit en un nombre entre 0 127
uint8_t ADCValue(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000afe:	480f      	ldr	r0, [pc, #60]	@ (8000b3c <ADCValue+0x44>)
 8000b00:	f000 ff3e 	bl	8001980 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <ADCValue+0x44>)
 8000b0a:	f001 f829 	bl	8001b60 <HAL_ADC_PollForConversion>
	uint32_t lastADCValue = HAL_ADC_GetValue(&hadc1); //Lit la valeur analogique convertie
 8000b0e:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <ADCValue+0x44>)
 8000b10:	f001 f8fe 	bl	8001d10 <HAL_ADC_GetValue>
 8000b14:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1); // economie d'energie on éteint l'adc si il n'est pas utilisé.
 8000b16:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <ADCValue+0x44>)
 8000b18:	f000 ffee 	bl	8001af8 <HAL_ADC_Stop>
    return (uint8_t)((lastADCValue * 127) / 4095);
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	01db      	lsls	r3, r3, #7
 8000b22:	1a9a      	subs	r2, r3, r2
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <ADCValue+0x48>)
 8000b26:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	0852      	lsrs	r2, r2, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	0adb      	lsrs	r3, r3, #11
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000084 	.word	0x20000084
 8000b40:	00100101 	.word	0x00100101

08000b44 <screenDisplay>:
    0b10010000  // 9
};

int globalToDisplay;

void screenDisplay(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	static int displayNumber = 0;

    if (displayNumber == 0) {
 8000b48:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <screenDisplay+0x80>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d116      	bne.n	8000b7e <screenDisplay+0x3a>
        GPIOB->ODR = array[globalToDisplay / 10]; // Chiffre des dizaines
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <screenDisplay+0x84>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <screenDisplay+0x88>)
 8000b56:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5a:	1092      	asrs	r2, r2, #2
 8000b5c:	17db      	asrs	r3, r3, #31
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <screenDisplay+0x8c>)
 8000b62:	5cd2      	ldrb	r2, [r2, r3]
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <screenDisplay+0x90>)
 8000b66:	615a      	str	r2, [r3, #20]
        HAL_GPIO_WritePin(GPIO_PORT_B, COM0, GPIO_PIN_SET);  // COM0 = 1
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2140      	movs	r1, #64	@ 0x40
 8000b6c:	4819      	ldr	r0, [pc, #100]	@ (8000bd4 <screenDisplay+0x90>)
 8000b6e:	f002 f9cb 	bl	8002f08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM1, GPIO_PIN_RESET); // COM1 = 0
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	4817      	ldr	r0, [pc, #92]	@ (8000bd4 <screenDisplay+0x90>)
 8000b78:	f002 f9c6 	bl	8002f08 <HAL_GPIO_WritePin>
 8000b7c:	e01a      	b.n	8000bb4 <screenDisplay+0x70>
    } else {
        GPIOB->ODR = array[globalToDisplay % 10]; // Chiffre des unités
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <screenDisplay+0x84>)
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <screenDisplay+0x88>)
 8000b84:	fb83 2301 	smull	r2, r3, r3, r1
 8000b88:	109a      	asrs	r2, r3, #2
 8000b8a:	17cb      	asrs	r3, r1, #31
 8000b8c:	1ad2      	subs	r2, r2, r3
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	1aca      	subs	r2, r1, r3
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <screenDisplay+0x8c>)
 8000b9a:	5c9a      	ldrb	r2, [r3, r2]
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <screenDisplay+0x90>)
 8000b9e:	615a      	str	r2, [r3, #20]
        HAL_GPIO_WritePin(GPIO_PORT_B, COM0, GPIO_PIN_RESET); // COM0 = 0
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <screenDisplay+0x90>)
 8000ba6:	f002 f9af 	bl	8002f08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM1, GPIO_PIN_SET);  // COM1 = 1
 8000baa:	2201      	movs	r2, #1
 8000bac:	2120      	movs	r1, #32
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <screenDisplay+0x90>)
 8000bb0:	f002 f9aa 	bl	8002f08 <HAL_GPIO_WritePin>
    }

    displayNumber = 1 - displayNumber;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <screenDisplay+0x80>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1c3 0301 	rsb	r3, r3, #1
 8000bbc:	4a01      	ldr	r2, [pc, #4]	@ (8000bc4 <screenDisplay+0x80>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000f8 	.word	0x200000f8
 8000bc8:	200000f4 	.word	0x200000f4
 8000bcc:	66666667 	.word	0x66666667
 8000bd0:	08006578 	.word	0x08006578
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <HAL_MspInit+0x44>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0e:	f002 fa4f 	bl	80030b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 fa67 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <TIM4_IRQHandler+0x10>)
 8000c86:	f003 f998 	bl	8003fba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000100 	.word	0x20000100

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c98:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000c9c:	f002 f94c 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ca0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ca4:	f002 f948 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
  }

  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fdc3 	bl	800088c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
  }
  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f004 fe94 	bl	8005ae4 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20008000 	.word	0x20008000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200000fc 	.word	0x200000fc
 8000df0:	20000330 	.word	0x20000330

08000df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e38:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <MX_TIM4_Init+0x98>)
 8000e3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e3e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000e42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e4c:	2213      	movs	r2, #19
 8000e4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e5e:	f003 f855 	bl	8003f0c <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000e68:	f7ff fe0f 	bl	8000a8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e7a:	f003 f9ed 	bl	8004258 <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000e84:	f7ff fe01 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e96:	f003 fc39 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ea0:	f7ff fdf3 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000100 	.word	0x20000100
 8000eb0:	40000800 	.word	0x40000800

08000eb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x44>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d113      	bne.n	8000eee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <HAL_TIM_Base_MspInit+0x48>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <HAL_TIM_Base_MspInit+0x48>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_TIM_Base_MspInit+0x48>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201e      	movs	r0, #30
 8000ee4:	f001 fe59 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ee8:	201e      	movs	r0, #30
 8000eea:	f001 fe70 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40000800 	.word	0x40000800
 8000efc:	40021000 	.word	0x40021000

08000f00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f06:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <MX_USART1_UART_Init+0x9c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f44:	2208      	movs	r2, #8
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f50:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f52:	f003 fca3 	bl	800489c <HAL_UART_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f7ff fd95 	bl	8000a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f64:	f004 fa9c 	bl	80054a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8000f6e:	f7ff fd8c 	bl	8000a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f76:	f004 fad1 	bl	800551c <HAL_UARTEx_SetRxFifoThreshold>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8000f80:	f7ff fd83 	bl	8000a8a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_USART1_UART_Init+0x98>)
 8000f86:	f004 fa52 	bl	800542e <HAL_UARTEx_DisableFifoMode>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8000f90:	f7ff fd7b 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000014c 	.word	0x2000014c
 8000f9c:	40013800 	.word	0x40013800

08000fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09a      	sub	sp, #104	@ 0x68
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2244      	movs	r2, #68	@ 0x44
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fd41 	bl	8005a48 <memset>
  if(uartHandle->Instance==USART1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <HAL_UART_MspInit+0xa8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d137      	bne.n	8001040 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fda5 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe8:	f7ff fd4f 	bl	8000a8a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_UART_MspInit+0xac>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff0:	4a16      	ldr	r2, [pc, #88]	@ (800104c <HAL_UART_MspInit+0xac>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_UART_MspInit+0xac>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_UART_MspInit+0xac>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	4a10      	ldr	r2, [pc, #64]	@ (800104c <HAL_UART_MspInit+0xac>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_UART_MspInit+0xac>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800101c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001020:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102e:	2307      	movs	r3, #7
 8001030:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103c:	f001 fde2 	bl	8002c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001040:	bf00      	nop
 8001042:	3768      	adds	r7, #104	@ 0x68
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013800 	.word	0x40013800
 800104c:	40021000 	.word	0x40021000

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001054:	f7ff fece 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	@ (800109c <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f004 fd37 	bl	8005af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001082:	f7ff fca1 	bl	80009c8 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001094:	08006608 	.word	0x08006608
  ldr r2, =_sbss
 8001098:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800109c:	20000330 	.word	0x20000330

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>

080010a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f001 fd69 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f80e 	bl	80010d4 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e001      	b.n	80010c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c4:	f7ff fd88 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c8:	79fb      	ldrb	r3, [r7, #7]

}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_InitTick+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d022      	beq.n	800112e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_InitTick+0x6c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <HAL_InitTick+0x68>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fd74 	bl	8002bea <HAL_SYSTICK_Config>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10f      	bne.n	8001128 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d809      	bhi.n	8001122 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110e:	2200      	movs	r2, #0
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	f001 fd40 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_InitTick+0x70>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e007      	b.n	8001132 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e004      	b.n	8001132 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e001      	b.n	8001132 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000008 	.word	0x20000008
 8001140:	20000000 	.word	0x20000000
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x1c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x1c>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200001e0 	.word	0x200001e0
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200001e0 	.word	0x200001e0

08001184 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	609a      	str	r2, [r3, #8]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3360      	adds	r3, #96	@ 0x60
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <LL_ADC_SetOffset+0x44>)
 800120e:	4013      	ands	r3, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	4313      	orrs	r3, r2
 800121c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	03fff000 	.word	0x03fff000

08001234 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3360      	adds	r3, #96	@ 0x60
 8001242:	461a      	mov	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3360      	adds	r3, #96	@ 0x60
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	431a      	orrs	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001296:	b480      	push	{r7}
 8001298:	b087      	sub	sp, #28
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3360      	adds	r3, #96	@ 0x60
 80012a6:	461a      	mov	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3360      	adds	r3, #96	@ 0x60
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	615a      	str	r2, [r3, #20]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800134e:	b480      	push	{r7}
 8001350:	b087      	sub	sp, #28
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3330      	adds	r3, #48	@ 0x30
 800135e:	461a      	mov	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	4413      	add	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	211f      	movs	r1, #31
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0e9b      	lsrs	r3, r3, #26
 8001386:	f003 011f 	and.w	r1, r3, #31
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	431a      	orrs	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3314      	adds	r3, #20
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	0e5b      	lsrs	r3, r3, #25
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	0d1b      	lsrs	r3, r3, #20
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	2107      	movs	r1, #7
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	0d1b      	lsrs	r3, r3, #20
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	431a      	orrs	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001414:	43db      	mvns	r3, r3
 8001416:	401a      	ands	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0318 	and.w	r3, r3, #24
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001420:	40d9      	lsrs	r1, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	400b      	ands	r3, r1
 8001426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142a:	431a      	orrs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	0007ffff 	.word	0x0007ffff

08001444 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 031f 	and.w	r3, r3, #31
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800148c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6093      	str	r3, [r2, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014b4:	d101      	bne.n	80014ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80014d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001504:	d101      	bne.n	800150a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001550:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001554:	f043 0202 	orr.w	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <LL_ADC_IsEnabled+0x18>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_ADC_IsEnabled+0x1a>
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d101      	bne.n	80015a6 <LL_ADC_IsDisableOngoing+0x18>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_ADC_IsDisableOngoing+0x1a>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c8:	f043 0204 	orr.w	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015f0:	f043 0210 	orr.w	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b04      	cmp	r3, #4
 8001616:	d101      	bne.n	800161c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800163a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800163e:	f043 0220 	orr.w	r2, r3, #32
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b08      	cmp	r3, #8
 8001664:	d101      	bne.n	800166a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e167      	b.n	8001962 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7fe fffd 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fef1 	bl	80014a0 <LL_ADC_IsDeepPowerDownEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fed7 	bl	800147c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff0c 	bl	80014f0 <LL_ADC_IsInternalRegulatorEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fef0 	bl	80014c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e8:	4ba0      	ldr	r3, [pc, #640]	@ (800196c <HAL_ADC_Init+0x2f4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	4aa0      	ldr	r2, [pc, #640]	@ (8001970 <HAL_ADC_Init+0x2f8>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff feee 	bl	80014f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10d      	bne.n	8001736 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171e:	f043 0210 	orr.w	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff62 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001740:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8100 	bne.w	8001950 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 80fc 	bne.w	8001950 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001760:	f043 0202 	orr.w	r2, r3, #2
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fefb 	bl	8001568 <LL_ADC_IsEnabled>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d111      	bne.n	800179c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001778:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800177c:	f7ff fef4 	bl	8001568 <LL_ADC_IsEnabled>
 8001780:	4604      	mov	r4, r0
 8001782:	487c      	ldr	r0, [pc, #496]	@ (8001974 <HAL_ADC_Init+0x2fc>)
 8001784:	f7ff fef0 	bl	8001568 <LL_ADC_IsEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	4323      	orrs	r3, r4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	4878      	ldr	r0, [pc, #480]	@ (8001978 <HAL_ADC_Init+0x300>)
 8001798:	f7ff fcf4 	bl	8001184 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7f5b      	ldrb	r3, [r3, #29]
 80017a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d106      	bne.n	80017d8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	045b      	lsls	r3, r3, #17
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d009      	beq.n	80017f4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	4b60      	ldr	r3, [pc, #384]	@ (800197c <HAL_ADC_Init+0x304>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	430b      	orrs	r3, r1
 8001806:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff15 	bl	8001652 <LL_ADC_INJ_IsConversionOngoing>
 8001828:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d16d      	bne.n	800190c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d16a      	bne.n	800190c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800183a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001842:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	430b      	orrs	r3, r1
 800185e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001876:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001880:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001884:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6911      	ldr	r1, [r2, #16]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	430b      	orrs	r3, r1
 8001892:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001896:	e013      	b.n	80018c0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d118      	bne.n	80018fc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018ec:	430a      	orrs	r2, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	e007      	b.n	800190c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10c      	bne.n	800192e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f023 010f 	bic.w	r1, r3, #15
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	631a      	str	r2, [r3, #48]	@ 0x30
 800192c:	e007      	b.n	800193e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 020f 	bic.w	r2, r2, #15
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800194e:	e007      	b.n	8001960 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001960:	7ffb      	ldrb	r3, [r7, #31]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	20000000 	.word	0x20000000
 8001970:	053e2d63 	.word	0x053e2d63
 8001974:	50000100 	.word	0x50000100
 8001978:	50000300 	.word	0x50000300
 800197c:	fff04007 	.word	0xfff04007

08001980 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001988:	4859      	ldr	r0, [pc, #356]	@ (8001af0 <HAL_ADC_Start+0x170>)
 800198a:	f7ff fd5b 	bl	8001444 <LL_ADC_GetMultimode>
 800198e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe35 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 809f 	bne.w	8001ae0 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_Start+0x30>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e09a      	b.n	8001ae6 <HAL_ADC_Start+0x166>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fe63 	bl	8002684 <ADC_Enable>
 80019be:	4603      	mov	r3, r0
 80019c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 8086 	bne.w	8001ad6 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a44      	ldr	r2, [pc, #272]	@ (8001af4 <HAL_ADC_Start+0x174>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d002      	beq.n	80019ee <HAL_ADC_Start+0x6e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e001      	b.n	80019f2 <HAL_ADC_Start+0x72>
 80019ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d002      	beq.n	8001a00 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1e:	f023 0206 	bic.w	r2, r3, #6
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a26:	e002      	b.n	8001a2e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	221c      	movs	r2, #28
 8001a34:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2c      	ldr	r2, [pc, #176]	@ (8001af4 <HAL_ADC_Start+0x174>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d002      	beq.n	8001a4e <HAL_ADC_Start+0xce>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e001      	b.n	8001a52 <HAL_ADC_Start+0xd2>
 8001a4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d008      	beq.n	8001a6c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d002      	beq.n	8001a6c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d114      	bne.n	8001a96 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd90 	bl	80015b4 <LL_ADC_REG_StartConversion>
 8001a94:	e026      	b.n	8001ae4 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <HAL_ADC_Start+0x174>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d002      	beq.n	8001ab2 <HAL_ADC_Start+0x132>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e001      	b.n	8001ab6 <HAL_ADC_Start+0x136>
 8001ab2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ab6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00f      	beq.n	8001ae4 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001acc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ad4:	e006      	b.n	8001ae4 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001ade:	e001      	b.n	8001ae4 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	50000300 	.word	0x50000300
 8001af4:	50000100 	.word	0x50000100

08001af8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Stop+0x16>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e023      	b.n	8001b56 <HAL_ADC_Stop+0x5e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b16:	2103      	movs	r1, #3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fcf7 	bl	800250c <ADC_ConversionStop>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d111      	bne.n	8001b4c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fe31 	bl	8002790 <ADC_Disable>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b6a:	4867      	ldr	r0, [pc, #412]	@ (8001d08 <HAL_ADC_PollForConversion+0x1a8>)
 8001b6c:	f7ff fc6a 	bl	8001444 <LL_ADC_GetMultimode>
 8001b70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d102      	bne.n	8001b80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e02a      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d002      	beq.n	8001b92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	d111      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba4:	f043 0220 	orr.w	r2, r3, #32
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0a6      	b.n	8001cfe <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bb4:	e00f      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bb6:	4854      	ldr	r0, [pc, #336]	@ (8001d08 <HAL_ADC_PollForConversion+0x1a8>)
 8001bb8:	f7ff fc52 	bl	8001460 <LL_ADC_GetMultiDMATransfer>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc6:	f043 0220 	orr.w	r2, r3, #32
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e095      	b.n	8001cfe <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bd6:	f7ff fac9 	bl	800116c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bdc:	e021      	b.n	8001c22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d01d      	beq.n	8001c22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001be6:	f7ff fac1 	bl	800116c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d302      	bcc.n	8001bfc <HAL_ADC_PollForConversion+0x9c>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d112      	bne.n	8001c22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e06d      	b.n	8001cfe <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0d6      	beq.n	8001bde <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fb71 	bl	8001328 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01c      	beq.n	8001c86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7f5b      	ldrb	r3, [r3, #29]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d118      	bne.n	8001c86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d111      	bne.n	8001c86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_ADC_PollForConversion+0x1ac>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x136>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	e001      	b.n	8001c9a <HAL_ADC_PollForConversion+0x13a>
 8001c96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d008      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d002      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d104      	bne.n	8001cbe <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e00d      	b.n	8001cda <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <HAL_ADC_PollForConversion+0x1ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d002      	beq.n	8001cce <HAL_ADC_PollForConversion+0x16e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e001      	b.n	8001cd2 <HAL_ADC_PollForConversion+0x172>
 8001cce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cd2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d104      	bne.n	8001cea <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e008      	b.n	8001cfc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	220c      	movs	r2, #12
 8001cfa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	50000300 	.word	0x50000300
 8001d0c:	50000100 	.word	0x50000100

08001d10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0b6      	sub	sp, #216	@ 0xd8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x22>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e3c8      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x7b4>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc52 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 83ad 	bne.w	80024c2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f7ff faea 	bl	800134e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fc40 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8001d84:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fc60 	bl	8001652 <LL_ADC_INJ_IsConversionOngoing>
 8001d92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 81d9 	bne.w	8002152 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 81d4 	bne.w	8002152 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001db2:	d10f      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7ff faf1 	bl	80013a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fa98 	bl	8001302 <LL_ADC_SetSamplingTimeCommonConfig>
 8001dd2:	e00e      	b.n	8001df2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fae0 	bl	80013a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fa88 	bl	8001302 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d022      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6919      	ldr	r1, [r3, #16]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e24:	f7ff f9e2 	bl	80011ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff fa2e 	bl	8001296 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x124>
 8001e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e4e:	e000      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x126>
 8001e50:	2300      	movs	r3, #0
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7ff fa3a 	bl	80012cc <LL_ADC_SetOffsetSaturation>
 8001e58:	e17b      	b.n	8002152 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f9e7 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x15a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f9dc 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	0e9b      	lsrs	r3, r3, #26
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	e01e      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x198>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f9d1 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e004      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001eb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1b0>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	e018      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1e2>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e004      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d106      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f9a0 	bl	8001260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f984 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x220>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f979 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	e01e      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x25e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2101      	movs	r1, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f96e 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e004      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x276>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	e018      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x2a8>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e004      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001fca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d106      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f93d 	bl	8001260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2102      	movs	r1, #2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f921 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x2e6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2102      	movs	r1, #2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f916 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	e01e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x324>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f90b 	bl	8001234 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002038:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002044:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x33c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	e016      	b.n	8002096 <HAL_ADC_ConfigChannel+0x36a>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800207a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e004      	b.n	8002096 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800208c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002096:	429a      	cmp	r2, r3
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	2102      	movs	r1, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f8dc 	bl	8001260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f8c0 	bl	8001234 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x3a8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2103      	movs	r1, #3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f8b5 	bl	8001234 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	e017      	b.n	8002104 <HAL_ADC_ConfigChannel+0x3d8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2103      	movs	r1, #3
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f8aa 	bl	8001234 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e003      	b.n	8002102 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_ConfigChannel+0x3f0>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	e011      	b.n	8002140 <HAL_ADC_ConfigChannel+0x414>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800212a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800212c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800212e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	2103      	movs	r1, #3
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f887 	bl	8001260 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fa06 	bl	8001568 <LL_ADC_IsEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 8140 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	461a      	mov	r2, r3
 8002172:	f7ff f943 	bl	80013fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4a8f      	ldr	r2, [pc, #572]	@ (80023b8 <HAL_ADC_ConfigChannel+0x68c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	f040 8131 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x47e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	3301      	adds	r3, #1
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2b09      	cmp	r3, #9
 80021a0:	bf94      	ite	ls
 80021a2:	2301      	movls	r3, #1
 80021a4:	2300      	movhi	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e019      	b.n	80021de <HAL_ADC_ConfigChannel+0x4b2>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80021b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021ba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80021bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80021c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d079      	beq.n	80022d6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x4d2>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	3301      	adds	r3, #1
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021fc:	e015      	b.n	800222a <HAL_ADC_ConfigChannel+0x4fe>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800220c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800220e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e003      	b.n	8002222 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3301      	adds	r3, #1
 8002224:	069b      	lsls	r3, r3, #26
 8002226:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ADC_ConfigChannel+0x51e>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	3301      	adds	r3, #1
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	e017      	b.n	800227a <HAL_ADC_ConfigChannel+0x54e>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800225a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800225c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e003      	b.n	800226e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	ea42 0103 	orr.w	r1, r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x574>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	3301      	adds	r3, #1
 8002292:	f003 021f 	and.w	r2, r3, #31
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	e018      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x5a6>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80022b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80022bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 021f 	and.w	r2, r3, #31
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d2:	430b      	orrs	r3, r1
 80022d4:	e081      	b.n	80023da <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x5c6>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	3301      	adds	r3, #1
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022f0:	e015      	b.n	800231e <HAL_ADC_ConfigChannel+0x5f2>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e003      	b.n	8002316 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3301      	adds	r3, #1
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_ADC_ConfigChannel+0x612>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	3301      	adds	r3, #1
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	e017      	b.n	800236e <HAL_ADC_ConfigChannel+0x642>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	61fb      	str	r3, [r7, #28]
  return result;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e003      	b.n	8002362 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	ea42 0103 	orr.w	r1, r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_ADC_ConfigChannel+0x66e>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	3301      	adds	r3, #1
 8002386:	f003 021f 	and.w	r2, r3, #31
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	3b1e      	subs	r3, #30
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002398:	e01e      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x6ac>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	613b      	str	r3, [r7, #16]
  return result;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d104      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e006      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x698>
 80023b6:	bf00      	nop
 80023b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f003 021f 	and.w	r2, r3, #31
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	3b1e      	subs	r3, #30
 80023d2:	051b      	lsls	r3, r3, #20
 80023d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe ffe1 	bl	80013a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7bc>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d071      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f0:	483e      	ldr	r0, [pc, #248]	@ (80024ec <HAL_ADC_ConfigChannel+0x7c0>)
 80023f2:	f7fe feed 	bl	80011d0 <LL_ADC_GetCommonPathInternalCh>
 80023f6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3c      	ldr	r2, [pc, #240]	@ (80024f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_ADC_ConfigChannel+0x6e2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3a      	ldr	r2, [pc, #232]	@ (80024f4 <HAL_ADC_ConfigChannel+0x7c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d127      	bne.n	800245e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800240e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d121      	bne.n	800245e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002422:	d157      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002428:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800242c:	4619      	mov	r1, r3
 800242e:	482f      	ldr	r0, [pc, #188]	@ (80024ec <HAL_ADC_ConfigChannel+0x7c0>)
 8002430:	f7fe febb 	bl	80011aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002434:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	4a30      	ldr	r2, [pc, #192]	@ (80024fc <HAL_ADC_ConfigChannel+0x7d0>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800244e:	e002      	b.n	8002456 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3b01      	subs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245c:	e03a      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a27      	ldr	r2, [pc, #156]	@ (8002500 <HAL_ADC_ConfigChannel+0x7d4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d113      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800246c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <HAL_ADC_ConfigChannel+0x7d8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02a      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800247e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002486:	4619      	mov	r1, r3
 8002488:	4818      	ldr	r0, [pc, #96]	@ (80024ec <HAL_ADC_ConfigChannel+0x7c0>)
 800248a:	f7fe fe8e 	bl	80011aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248e:	e021      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1c      	ldr	r2, [pc, #112]	@ (8002508 <HAL_ADC_ConfigChannel+0x7dc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11c      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800249a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	@ (8002504 <HAL_ADC_ConfigChannel+0x7d8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d011      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024b8:	4619      	mov	r1, r3
 80024ba:	480c      	ldr	r0, [pc, #48]	@ (80024ec <HAL_ADC_ConfigChannel+0x7c0>)
 80024bc:	f7fe fe75 	bl	80011aa <LL_ADC_SetCommonPathInternalCh>
 80024c0:	e008      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	37d8      	adds	r7, #216	@ 0xd8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	80080000 	.word	0x80080000
 80024ec:	50000300 	.word	0x50000300
 80024f0:	c3210000 	.word	0xc3210000
 80024f4:	90c00010 	.word	0x90c00010
 80024f8:	20000000 	.word	0x20000000
 80024fc:	053e2d63 	.word	0x053e2d63
 8002500:	c7520000 	.word	0xc7520000
 8002504:	50000100 	.word	0x50000100
 8002508:	cb840000 	.word	0xcb840000

0800250c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f86e 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 8002528:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f88f 	bl	8001652 <LL_ADC_INJ_IsConversionOngoing>
 8002534:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8098 	beq.w	8002674 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d02a      	beq.n	80025a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f5b      	ldrb	r3, [r3, #29]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d126      	bne.n	80025a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7f1b      	ldrb	r3, [r3, #28]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d122      	bne.n	80025a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002566:	e014      	b.n	8002592 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4a45      	ldr	r2, [pc, #276]	@ (8002680 <ADC_ConversionStop+0x174>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d90d      	bls.n	800258c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002574:	f043 0210 	orr.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e074      	b.n	8002676 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259c:	2b40      	cmp	r3, #64	@ 0x40
 800259e:	d1e3      	bne.n	8002568 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d014      	beq.n	80025d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f826 	bl	8001604 <LL_ADC_REG_IsConversionOngoing>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe ffe3 	bl	800158e <LL_ADC_IsDisableOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f802 	bl	80015dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d014      	beq.n	8002608 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f835 	bl	8001652 <LL_ADC_INJ_IsConversionOngoing>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ffcb 	bl	800158e <LL_ADC_IsDisableOngoing>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f811 	bl	800162a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d005      	beq.n	800261a <ADC_ConversionStop+0x10e>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d105      	bne.n	8002620 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002614:	230c      	movs	r3, #12
 8002616:	617b      	str	r3, [r7, #20]
        break;
 8002618:	e005      	b.n	8002626 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800261a:	2308      	movs	r3, #8
 800261c:	617b      	str	r3, [r7, #20]
        break;
 800261e:	e002      	b.n	8002626 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002620:	2304      	movs	r3, #4
 8002622:	617b      	str	r3, [r7, #20]
        break;
 8002624:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002626:	f7fe fda1 	bl	800116c <HAL_GetTick>
 800262a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800262c:	e01b      	b.n	8002666 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800262e:	f7fe fd9d 	bl	800116c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b05      	cmp	r3, #5
 800263a:	d914      	bls.n	8002666 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00d      	beq.n	8002666 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e007      	b.n	8002676 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1dc      	bne.n	800262e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	a33fffff 	.word	0xa33fffff

08002684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe ff67 	bl	8001568 <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d169      	bne.n	8002774 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <ADC_Enable+0xfc>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00d      	beq.n	80026ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	f043 0210 	orr.w	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e055      	b.n	8002776 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe ff22 	bl	8001518 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026d4:	482b      	ldr	r0, [pc, #172]	@ (8002784 <ADC_Enable+0x100>)
 80026d6:	f7fe fd7b 	bl	80011d0 <LL_ADC_GetCommonPathInternalCh>
 80026da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026e4:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <ADC_Enable+0x104>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	4a28      	ldr	r2, [pc, #160]	@ (800278c <ADC_Enable+0x108>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026fe:	e002      	b.n	8002706 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3b01      	subs	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800270c:	f7fe fd2e 	bl	800116c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002712:	e028      	b.n	8002766 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff25 	bl	8001568 <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fef5 	bl	8001518 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272e:	f7fe fd1d 	bl	800116c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d914      	bls.n	8002766 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d00d      	beq.n	8002766 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d1cf      	bne.n	8002714 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	8000003f 	.word	0x8000003f
 8002784:	50000300 	.word	0x50000300
 8002788:	20000000 	.word	0x20000000
 800278c:	053e2d63 	.word	0x053e2d63

08002790 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fef6 	bl	800158e <LL_ADC_IsDisableOngoing>
 80027a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fedd 	bl	8001568 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d047      	beq.n	8002844 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d144      	bne.n	8002844 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030d 	and.w	r3, r3, #13
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10c      	bne.n	80027e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe feb7 	bl	8001540 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2203      	movs	r2, #3
 80027d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027da:	f7fe fcc7 	bl	800116c <HAL_GetTick>
 80027de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027e0:	e029      	b.n	8002836 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e023      	b.n	8002846 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027fe:	f7fe fcb5 	bl	800116c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d914      	bls.n	8002836 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1dc      	bne.n	80027fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <LL_ADC_IsEnabled>:
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <LL_ADC_IsEnabled+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_IsEnabled+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_REG_IsConversionOngoing>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d101      	bne.n	800288c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b0a1      	sub	sp, #132	@ 0x84
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e08b      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028c2:	2300      	movs	r3, #0
 80028c4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028c6:	2300      	movs	r3, #0
 80028c8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d2:	d102      	bne.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028d4:	4b41      	ldr	r3, [pc, #260]	@ (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	e001      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e06a      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ffb8 	bl	8002874 <LL_ADC_REG_IsConversionOngoing>
 8002904:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ffb2 	bl	8002874 <LL_ADC_REG_IsConversionOngoing>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d14c      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002918:	2b00      	cmp	r3, #0
 800291a:	d149      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800291e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d028      	beq.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002928:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800293a:	035b      	lsls	r3, r3, #13
 800293c:	430b      	orrs	r3, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002942:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002944:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002948:	f7ff ff81 	bl	800284e <LL_ADC_IsEnabled>
 800294c:	4604      	mov	r4, r0
 800294e:	4823      	ldr	r0, [pc, #140]	@ (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002950:	f7ff ff7d 	bl	800284e <LL_ADC_IsEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	4323      	orrs	r3, r4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d133      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800295c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002964:	f023 030f 	bic.w	r3, r3, #15
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	6811      	ldr	r1, [r2, #0]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	6892      	ldr	r2, [r2, #8]
 8002970:	430a      	orrs	r2, r1
 8002972:	431a      	orrs	r2, r3
 8002974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002976:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002978:	e024      	b.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800297a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002984:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002986:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800298a:	f7ff ff60 	bl	800284e <LL_ADC_IsEnabled>
 800298e:	4604      	mov	r4, r0
 8002990:	4812      	ldr	r0, [pc, #72]	@ (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002992:	f7ff ff5c 	bl	800284e <LL_ADC_IsEnabled>
 8002996:	4603      	mov	r3, r0
 8002998:	4323      	orrs	r3, r4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d112      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800299e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029a6:	f023 030f 	bic.w	r3, r3, #15
 80029aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029ae:	e009      	b.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029c2:	e000      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3784      	adds	r7, #132	@ 0x84
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	50000100 	.word	0x50000100
 80029e0:	50000300 	.word	0x50000300

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	@ (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	@ (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff29 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff40 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff90 	bl	8002ad8 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5f 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff33 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa4 	bl	8002b40 <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c12:	e15a      	b.n	8002eca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 814c 	beq.w	8002ec4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d005      	beq.n	8002c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d130      	bne.n	8002ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 0201 	and.w	r2, r3, #1
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d017      	beq.n	8002ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d123      	bne.n	8002d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	08da      	lsrs	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3208      	adds	r2, #8
 8002cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	6939      	ldr	r1, [r7, #16]
 8002d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0203 	and.w	r2, r3, #3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80a6 	beq.w	8002ec4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d78:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <HAL_GPIO_Init+0x2e4>)
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee8 <HAL_GPIO_Init+0x2e4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d84:	4b58      	ldr	r3, [pc, #352]	@ (8002ee8 <HAL_GPIO_Init+0x2e4>)
 8002d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d90:	4a56      	ldr	r2, [pc, #344]	@ (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dba:	d01f      	beq.n	8002dfc <HAL_GPIO_Init+0x1f8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef0 <HAL_GPIO_Init+0x2ec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d019      	beq.n	8002df8 <HAL_GPIO_Init+0x1f4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef4 <HAL_GPIO_Init+0x2f0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_GPIO_Init+0x1f0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <HAL_GPIO_Init+0x2f4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00d      	beq.n	8002df0 <HAL_GPIO_Init+0x1ec>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a49      	ldr	r2, [pc, #292]	@ (8002efc <HAL_GPIO_Init+0x2f8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <HAL_GPIO_Init+0x1e8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a48      	ldr	r2, [pc, #288]	@ (8002f00 <HAL_GPIO_Init+0x2fc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_GPIO_Init+0x1e4>
 8002de4:	2305      	movs	r3, #5
 8002de6:	e00a      	b.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002de8:	2306      	movs	r3, #6
 8002dea:	e008      	b.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002dec:	2304      	movs	r3, #4
 8002dee:	e006      	b.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002df0:	2303      	movs	r3, #3
 8002df2:	e004      	b.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e002      	b.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	f002 0203 	and.w	r2, r2, #3
 8002e04:	0092      	lsls	r2, r2, #2
 8002e06:	4093      	lsls	r3, r2
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e0e:	4937      	ldr	r1, [pc, #220]	@ (8002eec <HAL_GPIO_Init+0x2e8>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e1c:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e40:	4a30      	ldr	r2, [pc, #192]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e46:	4b2f      	ldr	r3, [pc, #188]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e6a:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e70:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e94:	4a1b      	ldr	r2, [pc, #108]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ebe:	4a11      	ldr	r2, [pc, #68]	@ (8002f04 <HAL_GPIO_Init+0x300>)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f ae9d 	bne.w	8002c14 <HAL_GPIO_Init+0x10>
  }
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	48000400 	.word	0x48000400
 8002ef4:	48000800 	.word	0x48000800
 8002ef8:	48000c00 	.word	0x48000c00
 8002efc:	48001000 	.word	0x48001000
 8002f00:	48001400 	.word	0x48001400
 8002f04:	40010400 	.word	0x40010400

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f24:	e002      	b.n	8002f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f4e:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fcbc 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010400 	.word	0x40010400

08002f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d141      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f76:	4b4b      	ldr	r3, [pc, #300]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f82:	d131      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f84:	4b47      	ldr	r3, [pc, #284]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f8a:	4a46      	ldr	r2, [pc, #280]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f94:	4b43      	ldr	r3, [pc, #268]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f9c:	4a41      	ldr	r2, [pc, #260]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa4:	4b40      	ldr	r3, [pc, #256]	@ (80030a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2232      	movs	r2, #50	@ 0x32
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a3f      	ldr	r2, [pc, #252]	@ (80030ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fba:	e002      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc2:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fce:	d102      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f2      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd6:	4b33      	ldr	r3, [pc, #204]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe2:	d158      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e057      	b.n	8003098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fee:	4a2d      	ldr	r2, [pc, #180]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ff8:	e04d      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003000:	d141      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b28      	ldr	r3, [pc, #160]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d131      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003010:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003016:	4a23      	ldr	r2, [pc, #140]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003020:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003028:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800302e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003030:	4b1d      	ldr	r3, [pc, #116]	@ (80030a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2232      	movs	r2, #50	@ 0x32
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003046:	e002      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305a:	d102      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306e:	d112      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e011      	b.n	8003098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003084:	e007      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003086:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003094:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40007000 	.word	0x40007000
 80030a8:	20000000 	.word	0x20000000
 80030ac:	431bde83 	.word	0x431bde83

080030b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030be:	6093      	str	r3, [r2, #8]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40007000 	.word	0x40007000

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e2fe      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ee:	4b97      	ldr	r3, [pc, #604]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f8:	4b94      	ldr	r3, [pc, #592]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d102      	bne.n	800310e <HAL_RCC_OscConfig+0x3e>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d002      	beq.n	8003114 <HAL_RCC_OscConfig+0x44>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b8d      	ldr	r3, [pc, #564]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e2d9      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x74>
 8003136:	4b85      	ldr	r3, [pc, #532]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a84      	ldr	r2, [pc, #528]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b7f      	ldr	r3, [pc, #508]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7e      	ldr	r2, [pc, #504]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b7c      	ldr	r3, [pc, #496]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7b      	ldr	r2, [pc, #492]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003168:	4b78      	ldr	r3, [pc, #480]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a77      	ldr	r2, [pc, #476]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b75      	ldr	r3, [pc, #468]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a74      	ldr	r2, [pc, #464]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fd fff0 	bl	800116c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd ffec 	bl	800116c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	@ 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e29e      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a2:	4b6a      	ldr	r3, [pc, #424]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xc0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd ffdc 	bl	800116c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd ffd8 	bl	800116c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	@ 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e28a      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ca:	4b60      	ldr	r3, [pc, #384]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d075      	beq.n	80032d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e6:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f0:	4b56      	ldr	r3, [pc, #344]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_OscConfig+0x136>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d002      	beq.n	800320c <HAL_RCC_OscConfig+0x13c>
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11f      	bne.n	800324c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	4b4f      	ldr	r3, [pc, #316]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x154>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e25d      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b49      	ldr	r3, [pc, #292]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	4946      	ldr	r1, [pc, #280]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003238:	4b45      	ldr	r3, [pc, #276]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd ff49 	bl	80010d4 <HAL_InitTick>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d043      	beq.n	80032d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e249      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d023      	beq.n	800329c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b3d      	ldr	r3, [pc, #244]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a3c      	ldr	r2, [pc, #240]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd ff84 	bl	800116c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fd ff80 	bl	800116c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e232      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327a:	4b34      	ldr	r3, [pc, #208]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b31      	ldr	r3, [pc, #196]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	492d      	ldr	r1, [pc, #180]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
 800329a:	e01a      	b.n	80032d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329c:	4b2b      	ldr	r3, [pc, #172]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80032a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd ff60 	bl	800116c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fd ff5c 	bl	800116c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e20e      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1e0>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d041      	beq.n	8003362 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01c      	beq.n	8003320 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e6:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80032e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ec:	4a17      	ldr	r2, [pc, #92]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7fd ff39 	bl	800116c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fd ff35 	bl	800116c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1e7      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003310:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ef      	beq.n	80032fe <HAL_RCC_OscConfig+0x22e>
 800331e:	e020      	b.n	8003362 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003320:	4b0a      	ldr	r3, [pc, #40]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003326:	4a09      	ldr	r2, [pc, #36]	@ (800334c <HAL_RCC_OscConfig+0x27c>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd ff1c 	bl	800116c <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003336:	e00d      	b.n	8003354 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003338:	f7fd ff18 	bl	800116c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d906      	bls.n	8003354 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e1ca      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003354:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ea      	bne.n	8003338 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80a6 	beq.w	80034bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003370:	2300      	movs	r3, #0
 8003372:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003374:	4b84      	ldr	r3, [pc, #528]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_OscConfig+0x2b4>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_RCC_OscConfig+0x2b6>
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	4a7e      	ldr	r2, [pc, #504]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003394:	6593      	str	r3, [r2, #88]	@ 0x58
 8003396:	4b7c      	ldr	r3, [pc, #496]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a6:	4b79      	ldr	r3, [pc, #484]	@ (800358c <HAL_RCC_OscConfig+0x4bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b2:	4b76      	ldr	r3, [pc, #472]	@ (800358c <HAL_RCC_OscConfig+0x4bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	@ (800358c <HAL_RCC_OscConfig+0x4bc>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fd fed5 	bl	800116c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7fd fed1 	bl	800116c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e183      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	4b6c      	ldr	r3, [pc, #432]	@ (800358c <HAL_RCC_OscConfig+0x4bc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d108      	bne.n	80033fe <HAL_RCC_OscConfig+0x32e>
 80033ec:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	4a65      	ldr	r2, [pc, #404]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033fc:	e024      	b.n	8003448 <HAL_RCC_OscConfig+0x378>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d110      	bne.n	8003428 <HAL_RCC_OscConfig+0x358>
 8003406:	4b60      	ldr	r3, [pc, #384]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340c:	4a5e      	ldr	r2, [pc, #376]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003416:	4b5c      	ldr	r3, [pc, #368]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	4a5a      	ldr	r2, [pc, #360]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003426:	e00f      	b.n	8003448 <HAL_RCC_OscConfig+0x378>
 8003428:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342e:	4a56      	ldr	r2, [pc, #344]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003438:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d016      	beq.n	800347e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd fe8c 	bl	800116c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003456:	e00a      	b.n	800346e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fd fe88 	bl	800116c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e138      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	4b46      	ldr	r3, [pc, #280]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ed      	beq.n	8003458 <HAL_RCC_OscConfig+0x388>
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fd fe75 	bl	800116c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fd fe71 	bl	800116c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e121      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349c:	4b3a      	ldr	r3, [pc, #232]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ed      	bne.n	8003486 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b35      	ldr	r3, [pc, #212]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	4a34      	ldr	r2, [pc, #208]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03c      	beq.n	8003542 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01c      	beq.n	800350a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80034d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fd fe44 	bl	800116c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e8:	f7fd fe40 	bl	800116c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0f2      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034fa:	4b23      	ldr	r3, [pc, #140]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ef      	beq.n	80034e8 <HAL_RCC_OscConfig+0x418>
 8003508:	e01b      	b.n	8003542 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800350a:	4b1f      	ldr	r3, [pc, #124]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800350c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003510:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fd fe27 	bl	800116c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003522:	f7fd fe23 	bl	800116c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0d5      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003534:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ef      	bne.n	8003522 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80c9 	beq.w	80036de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354c:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b0c      	cmp	r3, #12
 8003556:	f000 8083 	beq.w	8003660 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d15e      	bne.n	8003620 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <HAL_RCC_OscConfig+0x4b8>)
 8003568:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800356c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fd fdfd 	bl	800116c <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003574:	e00c      	b.n	8003590 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd fdf9 	bl	800116c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d905      	bls.n	8003590 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0ab      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003590:	4b55      	ldr	r3, [pc, #340]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ec      	bne.n	8003576 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800359c:	4b52      	ldr	r3, [pc, #328]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	4b52      	ldr	r3, [pc, #328]	@ (80036ec <HAL_RCC_OscConfig+0x61c>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6a11      	ldr	r1, [r2, #32]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ac:	3a01      	subs	r2, #1
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	4311      	orrs	r1, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035b6:	0212      	lsls	r2, r2, #8
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0552      	lsls	r2, r2, #21
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035ca:	0852      	lsrs	r2, r2, #1
 80035cc:	3a01      	subs	r2, #1
 80035ce:	0652      	lsls	r2, r2, #25
 80035d0:	4311      	orrs	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035d6:	06d2      	lsls	r2, r2, #27
 80035d8:	430a      	orrs	r2, r1
 80035da:	4943      	ldr	r1, [pc, #268]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b41      	ldr	r3, [pc, #260]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a40      	ldr	r2, [pc, #256]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035ec:	4b3e      	ldr	r3, [pc, #248]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a3d      	ldr	r2, [pc, #244]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fdb8 	bl	800116c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd fdb4 	bl	800116c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e066      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	4b35      	ldr	r3, [pc, #212]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x530>
 800361e:	e05e      	b.n	80036de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a30      	ldr	r2, [pc, #192]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd fd9e 	bl	800116c <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fd fd9a 	bl	800116c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04c      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003646:	4b28      	ldr	r3, [pc, #160]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003652:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	4924      	ldr	r1, [pc, #144]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_RCC_OscConfig+0x620>)
 800365a:	4013      	ands	r3, r2
 800365c:	60cb      	str	r3, [r1, #12]
 800365e:	e03e      	b.n	80036de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e039      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800366c:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_RCC_OscConfig+0x618>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	429a      	cmp	r2, r3
 800367e:	d12c      	bne.n	80036da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	3b01      	subs	r3, #1
 800368c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d123      	bne.n	80036da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d11b      	bne.n	80036da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d113      	bne.n	80036da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	3b01      	subs	r3, #1
 80036c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d109      	bne.n	80036da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	019f800c 	.word	0x019f800c
 80036f0:	feeefffc 	.word	0xfeeefffc

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e11e      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b91      	ldr	r3, [pc, #580]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b8e      	ldr	r3, [pc, #568]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 020f 	bic.w	r2, r3, #15
 8003722:	498c      	ldr	r1, [pc, #560]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b8a      	ldr	r3, [pc, #552]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e106      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d073      	beq.n	8003830 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d129      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003750:	4b81      	ldr	r3, [pc, #516]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0f4      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003760:	f000 f99e 	bl	8003aa0 <RCC_GetSysClockFreqFromPLLSource>
 8003764:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_RCC_ClockConfig+0x268>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d93f      	bls.n	80037ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800376e:	4b7a      	ldr	r3, [pc, #488]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d033      	beq.n	80037ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d12f      	bne.n	80037ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800378e:	4b72      	ldr	r3, [pc, #456]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003796:	4a70      	ldr	r2, [pc, #448]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800379c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e024      	b.n	80037ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0c6      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b66      	ldr	r3, [pc, #408]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0be      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037cc:	f000 f8ce 	bl	800396c <HAL_RCC_GetSysClockFreq>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4a61      	ldr	r2, [pc, #388]	@ (800395c <HAL_RCC_ClockConfig+0x268>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d909      	bls.n	80037ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037da:	4b5f      	ldr	r3, [pc, #380]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e2:	4a5d      	ldr	r2, [pc, #372]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80037e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4957      	ldr	r1, [pc, #348]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fd fcb4 	bl	800116c <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fd fcb0 	bl	800116c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e095      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b4e      	ldr	r3, [pc, #312]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003848:	4b43      	ldr	r3, [pc, #268]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a42      	ldr	r2, [pc, #264]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800384e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003852:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003860:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003868:	4a3b      	ldr	r2, [pc, #236]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800386a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800386e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b39      	ldr	r3, [pc, #228]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4936      	ldr	r1, [pc, #216]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
 8003882:	e008      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b80      	cmp	r3, #128	@ 0x80
 8003888:	d105      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800388a:	4b33      	ldr	r3, [pc, #204]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a32      	ldr	r2, [pc, #200]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003890:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003894:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003896:	4b2f      	ldr	r3, [pc, #188]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d21d      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 020f 	bic.w	r2, r3, #15
 80038ac:	4929      	ldr	r1, [pc, #164]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038b4:	f7fd fc5a 	bl	800116c <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fd fc56 	bl	800116c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e03b      	b.n	800394a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1ed      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4917      	ldr	r1, [pc, #92]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390a:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490f      	ldr	r1, [pc, #60]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800391e:	f000 f825 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8003922:	4602      	mov	r2, r0
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <HAL_RCC_ClockConfig+0x264>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	490c      	ldr	r1, [pc, #48]	@ (8003960 <HAL_RCC_ClockConfig+0x26c>)
 8003930:	5ccb      	ldrb	r3, [r1, r3]
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <HAL_RCC_ClockConfig+0x270>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <HAL_RCC_ClockConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fbc6 	bl	80010d4 <HAL_InitTick>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40022000 	.word	0x40022000
 8003958:	40021000 	.word	0x40021000
 800395c:	04c4b400 	.word	0x04c4b400
 8003960:	08006584 	.word	0x08006584
 8003964:	20000000 	.word	0x20000000
 8003968:	20000004 	.word	0x20000004

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003972:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d102      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800397e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	e047      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003984:	4b27      	ldr	r3, [pc, #156]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d102      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003990:	4b26      	ldr	r3, [pc, #152]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e03e      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003996:	4b23      	ldr	r3, [pc, #140]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d136      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039a2:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3301      	adds	r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d10c      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	4a16      	ldr	r2, [pc, #88]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ca:	68d2      	ldr	r2, [r2, #12]
 80039cc:	0a12      	lsrs	r2, r2, #8
 80039ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	617b      	str	r3, [r7, #20]
      break;
 80039d8:	e00c      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	0a12      	lsrs	r2, r2, #8
 80039e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0e5b      	lsrs	r3, r3, #25
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e001      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a14:	693b      	ldr	r3, [r7, #16]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a4c:	f7ff fff0 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4904      	ldr	r1, [pc, #16]	@ (8003a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08006594 	.word	0x08006594

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a78:	f7ff ffda 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0adb      	lsrs	r3, r3, #11
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4904      	ldr	r1, [pc, #16]	@ (8003a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08006594 	.word	0x08006594

08003aa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	3301      	adds	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d10c      	bne.n	8003ade <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac4:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	0a12      	lsrs	r2, r2, #8
 8003ad2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
    break;
 8003adc:	e00c      	b.n	8003af8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ade:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	0a12      	lsrs	r2, r2, #8
 8003aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    break;
 8003af6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	0e5b      	lsrs	r3, r3, #25
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	3301      	adds	r3, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b12:	687b      	ldr	r3, [r7, #4]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40021000 	.word	0x40021000
 8003b24:	007a1200 	.word	0x007a1200
 8003b28:	00f42400 	.word	0x00f42400

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b34:	2300      	movs	r3, #0
 8003b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8098 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4e:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	4b40      	ldr	r3, [pc, #256]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b66:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b76:	4b3a      	ldr	r3, [pc, #232]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a39      	ldr	r2, [pc, #228]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b82:	f7fd faf3 	bl	800116c <HAL_GetTick>
 8003b86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b88:	e009      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7fd faef 	bl	800116c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d902      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8003b9c:	e005      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9e:	4b30      	ldr	r3, [pc, #192]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ef      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d159      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d019      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bcc:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd8:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	4a1f      	ldr	r2, [pc, #124]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	4a1b      	ldr	r2, [pc, #108]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd faaf 	bl	800116c <HAL_GetTick>
 8003c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c10:	e00b      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd faab 	bl	800116c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d902      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	74fb      	strb	r3, [r7, #19]
            break;
 8003c28:	e006      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ec      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	4903      	ldr	r1, [pc, #12]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c54:	e008      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	74bb      	strb	r3, [r7, #18]
 8003c5a:	e005      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c68:	7c7b      	ldrb	r3, [r7, #17]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4ba6      	ldr	r3, [pc, #664]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	4aa5      	ldr	r2, [pc, #660]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c86:	4ba0      	ldr	r3, [pc, #640]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f023 0203 	bic.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	499c      	ldr	r1, [pc, #624]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca8:	4b97      	ldr	r3, [pc, #604]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f023 020c 	bic.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	4994      	ldr	r1, [pc, #592]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cca:	4b8f      	ldr	r3, [pc, #572]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	498b      	ldr	r1, [pc, #556]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cec:	4b86      	ldr	r3, [pc, #536]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	4983      	ldr	r1, [pc, #524]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	497a      	ldr	r1, [pc, #488]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d30:	4b75      	ldr	r3, [pc, #468]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	4972      	ldr	r1, [pc, #456]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d52:	4b6d      	ldr	r3, [pc, #436]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4969      	ldr	r1, [pc, #420]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d74:	4b64      	ldr	r3, [pc, #400]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4961      	ldr	r1, [pc, #388]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d96:	4b5c      	ldr	r3, [pc, #368]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	4958      	ldr	r1, [pc, #352]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db8:	4b53      	ldr	r3, [pc, #332]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	4950      	ldr	r1, [pc, #320]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003df0:	4b45      	ldr	r3, [pc, #276]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	4942      	ldr	r1, [pc, #264]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b3d      	ldr	r3, [pc, #244]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a3c      	ldr	r2, [pc, #240]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e28:	4b37      	ldr	r3, [pc, #220]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	4934      	ldr	r1, [pc, #208]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b2f      	ldr	r3, [pc, #188]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e60:	4b29      	ldr	r3, [pc, #164]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	4926      	ldr	r1, [pc, #152]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a20      	ldr	r2, [pc, #128]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e98:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	4918      	ldr	r1, [pc, #96]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a12      	ldr	r2, [pc, #72]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	490a      	ldr	r1, [pc, #40]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003efc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e049      	b.n	8003fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc ffbe 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f000 faa6 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01b      	beq.n	800401e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0202 	mvn.w	r2, #2
 8003fee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa2b 	bl	8004460 <HAL_TIM_IC_CaptureCallback>
 800400a:	e005      	b.n	8004018 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa1d 	bl	800444c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa2e 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01b      	beq.n	800406a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0204 	mvn.w	r2, #4
 800403a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fa05 	bl	8004460 <HAL_TIM_IC_CaptureCallback>
 8004056:	e005      	b.n	8004064 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f9f7 	bl	800444c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa08 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01b      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0208 	mvn.w	r2, #8
 8004086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2204      	movs	r2, #4
 800408c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f9df 	bl	8004460 <HAL_TIM_IC_CaptureCallback>
 80040a2:	e005      	b.n	80040b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f9d1 	bl	800444c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9e2 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01b      	beq.n	8004102 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0210 	mvn.w	r2, #16
 80040d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2208      	movs	r2, #8
 80040d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f9b9 	bl	8004460 <HAL_TIM_IC_CaptureCallback>
 80040ee:	e005      	b.n	80040fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f9ab 	bl	800444c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9bc 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f06f 0201 	mvn.w	r2, #1
 800411e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fc fbc5 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fb68 	bl	8004824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fb60 	bl	8004838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f976 	bl	8004488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0220 	mvn.w	r2, #32
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fb28 	bl	8004810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb34 	bl	800484c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00c      	beq.n	8004208 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb2c 	bl	8004860 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00c      	beq.n	800422c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fb24 	bl	8004874 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00c      	beq.n	8004250 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb1c 	bl	8004888 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_TIM_ConfigClockSource+0x1c>
 8004270:	2302      	movs	r3, #2
 8004272:	e0de      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x1da>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800429e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a63      	ldr	r2, [pc, #396]	@ (800443c <HAL_TIM_ConfigClockSource+0x1e4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f000 80a9 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 80042b4:	4a61      	ldr	r2, [pc, #388]	@ (800443c <HAL_TIM_ConfigClockSource+0x1e4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f200 80ae 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 80042bc:	4a60      	ldr	r2, [pc, #384]	@ (8004440 <HAL_TIM_ConfigClockSource+0x1e8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f000 80a1 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 80042c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004440 <HAL_TIM_ConfigClockSource+0x1e8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f200 80a6 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 80042cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004444 <HAL_TIM_ConfigClockSource+0x1ec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f000 8099 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 80042d4:	4a5b      	ldr	r2, [pc, #364]	@ (8004444 <HAL_TIM_ConfigClockSource+0x1ec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f200 809e 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 80042dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004448 <HAL_TIM_ConfigClockSource+0x1f0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	f000 8091 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 80042e4:	4a58      	ldr	r2, [pc, #352]	@ (8004448 <HAL_TIM_ConfigClockSource+0x1f0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f200 8096 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 80042ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042f0:	f000 8089 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 80042f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042f8:	f200 808e 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004300:	d03e      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0x128>
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004306:	f200 8087 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430e:	f000 8086 	beq.w	800441e <HAL_TIM_ConfigClockSource+0x1c6>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	d87f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004318:	2b70      	cmp	r3, #112	@ 0x70
 800431a:	d01a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0xfa>
 800431c:	2b70      	cmp	r3, #112	@ 0x70
 800431e:	d87b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004320:	2b60      	cmp	r3, #96	@ 0x60
 8004322:	d050      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
 8004324:	2b60      	cmp	r3, #96	@ 0x60
 8004326:	d877      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004328:	2b50      	cmp	r3, #80	@ 0x50
 800432a:	d03c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x14e>
 800432c:	2b50      	cmp	r3, #80	@ 0x50
 800432e:	d873      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	d058      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x18e>
 8004334:	2b40      	cmp	r3, #64	@ 0x40
 8004336:	d86f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004338:	2b30      	cmp	r3, #48	@ 0x30
 800433a:	d064      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 800433c:	2b30      	cmp	r3, #48	@ 0x30
 800433e:	d86b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d060      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d867      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05c      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d05a      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x1ae>
 8004350:	e062      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004362:	f000 f9b3 	bl	80046cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]
      break;
 800437e:	e04f      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004390:	f000 f99c 	bl	80046cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a2:	609a      	str	r2, [r3, #8]
      break;
 80043a4:	e03c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 f90e 	bl	80045d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2150      	movs	r1, #80	@ 0x50
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f967 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e02c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 f92d 	bl	8004632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2160      	movs	r1, #96	@ 0x60
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f957 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e01c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	461a      	mov	r2, r3
 80043f4:	f000 f8ee 	bl	80045d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2140      	movs	r1, #64	@ 0x40
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f947 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 8004404:	e00c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f000 f93e 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 8004416:	e003      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e000      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800441e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	00100070 	.word	0x00100070
 8004440:	00100040 	.word	0x00100040
 8004444:	00100030 	.word	0x00100030
 8004448:	00100020 	.word	0x00100020

0800444c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a42      	ldr	r2, [pc, #264]	@ (80045b8 <TIM_Base_SetConfig+0x11c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00f      	beq.n	80044d4 <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ba:	d00b      	beq.n	80044d4 <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3f      	ldr	r2, [pc, #252]	@ (80045bc <TIM_Base_SetConfig+0x120>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0x38>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a3e      	ldr	r2, [pc, #248]	@ (80045c0 <TIM_Base_SetConfig+0x124>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0x38>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3d      	ldr	r2, [pc, #244]	@ (80045c4 <TIM_Base_SetConfig+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d108      	bne.n	80044e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a33      	ldr	r2, [pc, #204]	@ (80045b8 <TIM_Base_SetConfig+0x11c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01b      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d017      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a30      	ldr	r2, [pc, #192]	@ (80045bc <TIM_Base_SetConfig+0x120>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2f      	ldr	r2, [pc, #188]	@ (80045c0 <TIM_Base_SetConfig+0x124>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00f      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2e      	ldr	r2, [pc, #184]	@ (80045c4 <TIM_Base_SetConfig+0x128>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2d      	ldr	r2, [pc, #180]	@ (80045c8 <TIM_Base_SetConfig+0x12c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2c      	ldr	r2, [pc, #176]	@ (80045cc <TIM_Base_SetConfig+0x130>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_Base_SetConfig+0x8a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2b      	ldr	r2, [pc, #172]	@ (80045d0 <TIM_Base_SetConfig+0x134>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d108      	bne.n	8004538 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800452c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <TIM_Base_SetConfig+0x11c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_Base_SetConfig+0xe8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <TIM_Base_SetConfig+0x128>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0xe8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <TIM_Base_SetConfig+0x12c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0xe8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <TIM_Base_SetConfig+0x130>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0xe8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <TIM_Base_SetConfig+0x134>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d103      	bne.n	800458c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]
  }
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f023 030a 	bic.w	r3, r3, #10
 8004610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004632:	b480      	push	{r7}
 8004634:	b087      	sub	sp, #28
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f023 0210 	bic.w	r2, r3, #16
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800465c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	031b      	lsls	r3, r3, #12
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800466e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80046a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f043 0307 	orr.w	r3, r3, #7
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e065      	b.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2c      	ldr	r2, [pc, #176]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2b      	ldr	r2, [pc, #172]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800475e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1b      	ldr	r2, [pc, #108]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479a:	d013      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a18      	ldr	r2, [pc, #96]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a12      	ldr	r2, [pc, #72]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a13      	ldr	r2, [pc, #76]	@ (800480c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10c      	bne.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40013400 	.word	0x40013400
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40014000 	.word	0x40014000

08004810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e042      	b.n	8004934 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fc fb6d 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2224      	movs	r2, #36	@ 0x24
 80048ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fb82 	bl	8004ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f8b3 	bl	8004a58 <UART_SetConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e01b      	b.n	8004934 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800490a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800491a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fc01 	bl	8005134 <UART_CheckIdleState>
 8004932:	4603      	mov	r3, r0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	2b20      	cmp	r3, #32
 8004954:	d17b      	bne.n	8004a4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_Transmit+0x26>
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e074      	b.n	8004a50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2221      	movs	r2, #33	@ 0x21
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004976:	f7fc fbf9 	bl	800116c <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b0:	e030      	b.n	8004a14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fc63 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e03d      	b.n	8004a50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1c8      	bne.n	80049b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2140      	movs	r1, #64	@ 0x40
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fc2c 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b08c      	sub	sp, #48	@ 0x30
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4bab      	ldr	r3, [pc, #684]	@ (8004d34 <UART_SetConfig+0x2dc>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4aa0      	ldr	r2, [pc, #640]	@ (8004d38 <UART_SetConfig+0x2e0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ace:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	f023 010f 	bic.w	r1, r3, #15
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a91      	ldr	r2, [pc, #580]	@ (8004d3c <UART_SetConfig+0x2e4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d125      	bne.n	8004b48 <UART_SetConfig+0xf0>
 8004afc:	4b90      	ldr	r3, [pc, #576]	@ (8004d40 <UART_SetConfig+0x2e8>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d81a      	bhi.n	8004b40 <UART_SetConfig+0xe8>
 8004b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <UART_SetConfig+0xb8>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b31 	.word	0x08004b31
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b26:	e0d6      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2e:	e0d2      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b36:	e0ce      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3e:	e0ca      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e0c6      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a7d      	ldr	r2, [pc, #500]	@ (8004d44 <UART_SetConfig+0x2ec>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d138      	bne.n	8004bc4 <UART_SetConfig+0x16c>
 8004b52:	4b7b      	ldr	r3, [pc, #492]	@ (8004d40 <UART_SetConfig+0x2e8>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d82d      	bhi.n	8004bbc <UART_SetConfig+0x164>
 8004b60:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <UART_SetConfig+0x110>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	08004bbd 	.word	0x08004bbd
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004bbd 	.word	0x08004bbd
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	08004bbd 	.word	0x08004bbd
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	e098      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004baa:	e094      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb2:	e090      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bba:	e08c      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc2:	e088      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8004d48 <UART_SetConfig+0x2f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d125      	bne.n	8004c1a <UART_SetConfig+0x1c2>
 8004bce:	4b5c      	ldr	r3, [pc, #368]	@ (8004d40 <UART_SetConfig+0x2e8>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bd8:	2b30      	cmp	r3, #48	@ 0x30
 8004bda:	d016      	beq.n	8004c0a <UART_SetConfig+0x1b2>
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d818      	bhi.n	8004c12 <UART_SetConfig+0x1ba>
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d00a      	beq.n	8004bfa <UART_SetConfig+0x1a2>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d814      	bhi.n	8004c12 <UART_SetConfig+0x1ba>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <UART_SetConfig+0x19a>
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d008      	beq.n	8004c02 <UART_SetConfig+0x1aa>
 8004bf0:	e00f      	b.n	8004c12 <UART_SetConfig+0x1ba>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf8:	e06d      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c00:	e069      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c02:	2304      	movs	r3, #4
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c08:	e065      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c10:	e061      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c12:	2310      	movs	r3, #16
 8004c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c18:	e05d      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4b      	ldr	r2, [pc, #300]	@ (8004d4c <UART_SetConfig+0x2f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d125      	bne.n	8004c70 <UART_SetConfig+0x218>
 8004c24:	4b46      	ldr	r3, [pc, #280]	@ (8004d40 <UART_SetConfig+0x2e8>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c30:	d016      	beq.n	8004c60 <UART_SetConfig+0x208>
 8004c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c34:	d818      	bhi.n	8004c68 <UART_SetConfig+0x210>
 8004c36:	2b80      	cmp	r3, #128	@ 0x80
 8004c38:	d00a      	beq.n	8004c50 <UART_SetConfig+0x1f8>
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d814      	bhi.n	8004c68 <UART_SetConfig+0x210>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <UART_SetConfig+0x1f0>
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d008      	beq.n	8004c58 <UART_SetConfig+0x200>
 8004c46:	e00f      	b.n	8004c68 <UART_SetConfig+0x210>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c4e:	e042      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	e03e      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	e03a      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c66:	e036      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e032      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a30      	ldr	r2, [pc, #192]	@ (8004d38 <UART_SetConfig+0x2e0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d12a      	bne.n	8004cd0 <UART_SetConfig+0x278>
 8004c7a:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <UART_SetConfig+0x2e8>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c88:	d01a      	beq.n	8004cc0 <UART_SetConfig+0x268>
 8004c8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c8e:	d81b      	bhi.n	8004cc8 <UART_SetConfig+0x270>
 8004c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c94:	d00c      	beq.n	8004cb0 <UART_SetConfig+0x258>
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c9a:	d815      	bhi.n	8004cc8 <UART_SetConfig+0x270>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <UART_SetConfig+0x250>
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca4:	d008      	beq.n	8004cb8 <UART_SetConfig+0x260>
 8004ca6:	e00f      	b.n	8004cc8 <UART_SetConfig+0x270>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cae:	e012      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb6:	e00e      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cbe:	e00a      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc6:	e006      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	e002      	b.n	8004cd6 <UART_SetConfig+0x27e>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <UART_SetConfig+0x2e0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	f040 80a8 	bne.w	8004e32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d834      	bhi.n	8004d54 <UART_SetConfig+0x2fc>
 8004cea:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <UART_SetConfig+0x298>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d55 	.word	0x08004d55
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004d23 	.word	0x08004d23
 8004d04:	08004d55 	.word	0x08004d55
 8004d08:	08004d55 	.word	0x08004d55
 8004d0c:	08004d55 	.word	0x08004d55
 8004d10:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe fe98 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d1a:	e021      	b.n	8004d60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <UART_SetConfig+0x2f8>)
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d20:	e01e      	b.n	8004d60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe fe23 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8004d26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d28:	e01a      	b.n	8004d60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d30:	e016      	b.n	8004d60 <UART_SetConfig+0x308>
 8004d32:	bf00      	nop
 8004d34:	cfff69f3 	.word	0xcfff69f3
 8004d38:	40008000 	.word	0x40008000
 8004d3c:	40013800 	.word	0x40013800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40004400 	.word	0x40004400
 8004d48:	40004800 	.word	0x40004800
 8004d4c:	40004c00 	.word	0x40004c00
 8004d50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 812a 	beq.w	8004fbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	4a9e      	ldr	r2, [pc, #632]	@ (8004fe8 <UART_SetConfig+0x590>)
 8004d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d72:	461a      	mov	r2, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d305      	bcc.n	8004d98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d903      	bls.n	8004da0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d9e:	e10d      	b.n	8004fbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	2200      	movs	r2, #0
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	60fa      	str	r2, [r7, #12]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	4a8e      	ldr	r2, [pc, #568]	@ (8004fe8 <UART_SetConfig+0x590>)
 8004dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2200      	movs	r2, #0
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dc2:	f7fb fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	020b      	lsls	r3, r1, #8
 8004dd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ddc:	0202      	lsls	r2, r0, #8
 8004dde:	6979      	ldr	r1, [r7, #20]
 8004de0:	6849      	ldr	r1, [r1, #4]
 8004de2:	0849      	lsrs	r1, r1, #1
 8004de4:	2000      	movs	r0, #0
 8004de6:	460c      	mov	r4, r1
 8004de8:	4605      	mov	r5, r0
 8004dea:	eb12 0804 	adds.w	r8, r2, r4
 8004dee:	eb43 0905 	adc.w	r9, r3, r5
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	469a      	mov	sl, r3
 8004dfa:	4693      	mov	fp, r2
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	465b      	mov	r3, fp
 8004e00:	4640      	mov	r0, r8
 8004e02:	4649      	mov	r1, r9
 8004e04:	f7fb fa5c 	bl	80002c0 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e16:	d308      	bcc.n	8004e2a <UART_SetConfig+0x3d2>
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e1e:	d204      	bcs.n	8004e2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	60da      	str	r2, [r3, #12]
 8004e28:	e0c8      	b.n	8004fbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e30:	e0c4      	b.n	8004fbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e3a:	d167      	bne.n	8004f0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d828      	bhi.n	8004e96 <UART_SetConfig+0x43e>
 8004e44:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <UART_SetConfig+0x3f4>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e87 	.word	0x08004e87
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fe fdea 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e76:	e014      	b.n	8004ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e78:	f7fe fdfc 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e7e:	e010      	b.n	8004ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b5a      	ldr	r3, [pc, #360]	@ (8004fec <UART_SetConfig+0x594>)
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e84:	e00d      	b.n	8004ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fe fd71 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8004e8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8089 	beq.w	8004fbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe8 <UART_SetConfig+0x590>)
 8004eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ebc:	005a      	lsls	r2, r3, #1
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	441a      	add	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	2b0f      	cmp	r3, #15
 8004ed4:	d916      	bls.n	8004f04 <UART_SetConfig+0x4ac>
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d212      	bcs.n	8004f04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f023 030f 	bic.w	r3, r3, #15
 8004ee6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	8bfb      	ldrh	r3, [r7, #30]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	8bfa      	ldrh	r2, [r7, #30]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e05b      	b.n	8004fbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f0a:	e057      	b.n	8004fbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d828      	bhi.n	8004f66 <UART_SetConfig+0x50e>
 8004f14:	a201      	add	r2, pc, #4	@ (adr r2, 8004f1c <UART_SetConfig+0x4c4>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	08004f67 	.word	0x08004f67
 8004f2c:	08004f57 	.word	0x08004f57
 8004f30:	08004f67 	.word	0x08004f67
 8004f34:	08004f67 	.word	0x08004f67
 8004f38:	08004f67 	.word	0x08004f67
 8004f3c:	08004f5f 	.word	0x08004f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fe fd82 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f46:	e014      	b.n	8004f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fe fd94 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f4e:	e010      	b.n	8004f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f50:	4b26      	ldr	r3, [pc, #152]	@ (8004fec <UART_SetConfig+0x594>)
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f54:	e00d      	b.n	8004f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f56:	f7fe fd09 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8004f5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f5c:	e009      	b.n	8004f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f64:	e005      	b.n	8004f72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f70:	bf00      	nop
    }

    if (pclk != 0U)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d021      	beq.n	8004fbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <UART_SetConfig+0x590>)
 8004f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f82:	461a      	mov	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	441a      	add	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d909      	bls.n	8004fb6 <UART_SetConfig+0x55e>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa8:	d205      	bcs.n	8004fb6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60da      	str	r2, [r3, #12]
 8004fb4:	e002      	b.n	8004fbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3730      	adds	r7, #48	@ 0x30
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	0800659c 	.word	0x0800659c
 8004fec:	00f42400 	.word	0x00f42400

08004ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01a      	beq.n	8005106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ee:	d10a      	bne.n	8005106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b098      	sub	sp, #96	@ 0x60
 8005138:	af02      	add	r7, sp, #8
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005144:	f7fc f812 	bl	800116c <HAL_GetTick>
 8005148:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b08      	cmp	r3, #8
 8005156:	d12f      	bne.n	80051b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005160:	2200      	movs	r2, #0
 8005162:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f88e 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d022      	beq.n	80051b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005186:	653b      	str	r3, [r7, #80]	@ 0x50
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005190:	647b      	str	r3, [r7, #68]	@ 0x44
 8005192:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e6      	bne.n	8005172 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e063      	b.n	8005280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d149      	bne.n	800525a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f857 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d03c      	beq.n	800525a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	623b      	str	r3, [r7, #32]
   return(result);
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005200:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e6      	bne.n	80051e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	60fb      	str	r3, [r7, #12]
   return(result);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	64bb      	str	r3, [r7, #72]	@ 0x48
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005232:	61fa      	str	r2, [r7, #28]
 8005234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	69b9      	ldr	r1, [r7, #24]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	617b      	str	r3, [r7, #20]
   return(result);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e5      	bne.n	8005212 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e012      	b.n	8005280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3758      	adds	r7, #88	@ 0x58
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005298:	e04f      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d04b      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fb ff63 	bl	800116c <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e04e      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d037      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b80      	cmp	r3, #128	@ 0x80
 80052ce:	d034      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b40      	cmp	r3, #64	@ 0x40
 80052d4:	d031      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d110      	bne.n	8005306 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2208      	movs	r2, #8
 80052ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f838 	bl	8005362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2208      	movs	r2, #8
 80052f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e029      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005314:	d111      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800531e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f81e 	bl	8005362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00f      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4013      	ands	r3, r2
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	bf0c      	ite	eq
 800534a:	2301      	moveq	r3, #1
 800534c:	2300      	movne	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	429a      	cmp	r2, r3
 8005356:	d0a0      	beq.n	800529a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005362:	b480      	push	{r7}
 8005364:	b095      	sub	sp, #84	@ 0x54
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800537e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005388:	643b      	str	r3, [r7, #64]	@ 0x40
 800538a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800538e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e3      	bne.n	800539c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d118      	bne.n	800540e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 0310 	bic.w	r3, r3, #16
 80053f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6979      	ldr	r1, [r7, #20]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	613b      	str	r3, [r7, #16]
   return(result);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e6      	bne.n	80053dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005422:	bf00      	nop
 8005424:	3754      	adds	r7, #84	@ 0x54
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_UARTEx_DisableFifoMode+0x16>
 8005440:	2302      	movs	r3, #2
 8005442:	e027      	b.n	8005494 <HAL_UARTEx_DisableFifoMode+0x66>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2224      	movs	r2, #36	@ 0x24
 8005450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005472:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e02d      	b.n	8005514 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2224      	movs	r2, #36	@ 0x24
 80054c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f84f 	bl	8005598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005530:	2302      	movs	r3, #2
 8005532:	e02d      	b.n	8005590 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2224      	movs	r2, #36	@ 0x24
 8005540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f811 	bl	8005598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055b8:	e031      	b.n	800561e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055ba:	2308      	movs	r3, #8
 80055bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055be:	2308      	movs	r3, #8
 80055c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	0e5b      	lsrs	r3, r3, #25
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	0f5b      	lsrs	r3, r3, #29
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	7b3a      	ldrb	r2, [r7, #12]
 80055e6:	4911      	ldr	r1, [pc, #68]	@ (800562c <UARTEx_SetNbDataToProcess+0x94>)
 80055e8:	5c8a      	ldrb	r2, [r1, r2]
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055ee:	7b3a      	ldrb	r2, [r7, #12]
 80055f0:	490f      	ldr	r1, [pc, #60]	@ (8005630 <UARTEx_SetNbDataToProcess+0x98>)
 80055f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	7b7a      	ldrb	r2, [r7, #13]
 8005604:	4909      	ldr	r1, [pc, #36]	@ (800562c <UARTEx_SetNbDataToProcess+0x94>)
 8005606:	5c8a      	ldrb	r2, [r1, r2]
 8005608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800560c:	7b7a      	ldrb	r2, [r7, #13]
 800560e:	4908      	ldr	r1, [pc, #32]	@ (8005630 <UARTEx_SetNbDataToProcess+0x98>)
 8005610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005612:	fb93 f3f2 	sdiv	r3, r3, r2
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	080065b4 	.word	0x080065b4
 8005630:	080065bc 	.word	0x080065bc

08005634 <std>:
 8005634:	2300      	movs	r3, #0
 8005636:	b510      	push	{r4, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	e9c0 3300 	strd	r3, r3, [r0]
 800563e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005642:	6083      	str	r3, [r0, #8]
 8005644:	8181      	strh	r1, [r0, #12]
 8005646:	6643      	str	r3, [r0, #100]	@ 0x64
 8005648:	81c2      	strh	r2, [r0, #14]
 800564a:	6183      	str	r3, [r0, #24]
 800564c:	4619      	mov	r1, r3
 800564e:	2208      	movs	r2, #8
 8005650:	305c      	adds	r0, #92	@ 0x5c
 8005652:	f000 f9f9 	bl	8005a48 <memset>
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <std+0x58>)
 8005658:	6263      	str	r3, [r4, #36]	@ 0x24
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <std+0x5c>)
 800565c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800565e:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <std+0x60>)
 8005660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005662:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <std+0x64>)
 8005664:	6323      	str	r3, [r4, #48]	@ 0x30
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <std+0x68>)
 8005668:	6224      	str	r4, [r4, #32]
 800566a:	429c      	cmp	r4, r3
 800566c:	d006      	beq.n	800567c <std+0x48>
 800566e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005672:	4294      	cmp	r4, r2
 8005674:	d002      	beq.n	800567c <std+0x48>
 8005676:	33d0      	adds	r3, #208	@ 0xd0
 8005678:	429c      	cmp	r4, r3
 800567a:	d105      	bne.n	8005688 <std+0x54>
 800567c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005684:	f000 ba58 	b.w	8005b38 <__retarget_lock_init_recursive>
 8005688:	bd10      	pop	{r4, pc}
 800568a:	bf00      	nop
 800568c:	08005899 	.word	0x08005899
 8005690:	080058bb 	.word	0x080058bb
 8005694:	080058f3 	.word	0x080058f3
 8005698:	08005917 	.word	0x08005917
 800569c:	200001e4 	.word	0x200001e4

080056a0 <stdio_exit_handler>:
 80056a0:	4a02      	ldr	r2, [pc, #8]	@ (80056ac <stdio_exit_handler+0xc>)
 80056a2:	4903      	ldr	r1, [pc, #12]	@ (80056b0 <stdio_exit_handler+0x10>)
 80056a4:	4803      	ldr	r0, [pc, #12]	@ (80056b4 <stdio_exit_handler+0x14>)
 80056a6:	f000 b869 	b.w	800577c <_fwalk_sglue>
 80056aa:	bf00      	nop
 80056ac:	2000000c 	.word	0x2000000c
 80056b0:	080063d9 	.word	0x080063d9
 80056b4:	2000001c 	.word	0x2000001c

080056b8 <cleanup_stdio>:
 80056b8:	6841      	ldr	r1, [r0, #4]
 80056ba:	4b0c      	ldr	r3, [pc, #48]	@ (80056ec <cleanup_stdio+0x34>)
 80056bc:	4299      	cmp	r1, r3
 80056be:	b510      	push	{r4, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	d001      	beq.n	80056c8 <cleanup_stdio+0x10>
 80056c4:	f000 fe88 	bl	80063d8 <_fflush_r>
 80056c8:	68a1      	ldr	r1, [r4, #8]
 80056ca:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <cleanup_stdio+0x38>)
 80056cc:	4299      	cmp	r1, r3
 80056ce:	d002      	beq.n	80056d6 <cleanup_stdio+0x1e>
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fe81 	bl	80063d8 <_fflush_r>
 80056d6:	68e1      	ldr	r1, [r4, #12]
 80056d8:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <cleanup_stdio+0x3c>)
 80056da:	4299      	cmp	r1, r3
 80056dc:	d004      	beq.n	80056e8 <cleanup_stdio+0x30>
 80056de:	4620      	mov	r0, r4
 80056e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e4:	f000 be78 	b.w	80063d8 <_fflush_r>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	bf00      	nop
 80056ec:	200001e4 	.word	0x200001e4
 80056f0:	2000024c 	.word	0x2000024c
 80056f4:	200002b4 	.word	0x200002b4

080056f8 <global_stdio_init.part.0>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <global_stdio_init.part.0+0x30>)
 80056fc:	4c0b      	ldr	r4, [pc, #44]	@ (800572c <global_stdio_init.part.0+0x34>)
 80056fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005730 <global_stdio_init.part.0+0x38>)
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	4620      	mov	r0, r4
 8005704:	2200      	movs	r2, #0
 8005706:	2104      	movs	r1, #4
 8005708:	f7ff ff94 	bl	8005634 <std>
 800570c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005710:	2201      	movs	r2, #1
 8005712:	2109      	movs	r1, #9
 8005714:	f7ff ff8e 	bl	8005634 <std>
 8005718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800571c:	2202      	movs	r2, #2
 800571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005722:	2112      	movs	r1, #18
 8005724:	f7ff bf86 	b.w	8005634 <std>
 8005728:	2000031c 	.word	0x2000031c
 800572c:	200001e4 	.word	0x200001e4
 8005730:	080056a1 	.word	0x080056a1

08005734 <__sfp_lock_acquire>:
 8005734:	4801      	ldr	r0, [pc, #4]	@ (800573c <__sfp_lock_acquire+0x8>)
 8005736:	f000 ba00 	b.w	8005b3a <__retarget_lock_acquire_recursive>
 800573a:	bf00      	nop
 800573c:	20000325 	.word	0x20000325

08005740 <__sfp_lock_release>:
 8005740:	4801      	ldr	r0, [pc, #4]	@ (8005748 <__sfp_lock_release+0x8>)
 8005742:	f000 b9fb 	b.w	8005b3c <__retarget_lock_release_recursive>
 8005746:	bf00      	nop
 8005748:	20000325 	.word	0x20000325

0800574c <__sinit>:
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
 8005750:	f7ff fff0 	bl	8005734 <__sfp_lock_acquire>
 8005754:	6a23      	ldr	r3, [r4, #32]
 8005756:	b11b      	cbz	r3, 8005760 <__sinit+0x14>
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	f7ff bff0 	b.w	8005740 <__sfp_lock_release>
 8005760:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <__sinit+0x28>)
 8005762:	6223      	str	r3, [r4, #32]
 8005764:	4b04      	ldr	r3, [pc, #16]	@ (8005778 <__sinit+0x2c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f5      	bne.n	8005758 <__sinit+0xc>
 800576c:	f7ff ffc4 	bl	80056f8 <global_stdio_init.part.0>
 8005770:	e7f2      	b.n	8005758 <__sinit+0xc>
 8005772:	bf00      	nop
 8005774:	080056b9 	.word	0x080056b9
 8005778:	2000031c 	.word	0x2000031c

0800577c <_fwalk_sglue>:
 800577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005780:	4607      	mov	r7, r0
 8005782:	4688      	mov	r8, r1
 8005784:	4614      	mov	r4, r2
 8005786:	2600      	movs	r6, #0
 8005788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800578c:	f1b9 0901 	subs.w	r9, r9, #1
 8005790:	d505      	bpl.n	800579e <_fwalk_sglue+0x22>
 8005792:	6824      	ldr	r4, [r4, #0]
 8005794:	2c00      	cmp	r4, #0
 8005796:	d1f7      	bne.n	8005788 <_fwalk_sglue+0xc>
 8005798:	4630      	mov	r0, r6
 800579a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d907      	bls.n	80057b4 <_fwalk_sglue+0x38>
 80057a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057a8:	3301      	adds	r3, #1
 80057aa:	d003      	beq.n	80057b4 <_fwalk_sglue+0x38>
 80057ac:	4629      	mov	r1, r5
 80057ae:	4638      	mov	r0, r7
 80057b0:	47c0      	blx	r8
 80057b2:	4306      	orrs	r6, r0
 80057b4:	3568      	adds	r5, #104	@ 0x68
 80057b6:	e7e9      	b.n	800578c <_fwalk_sglue+0x10>

080057b8 <iprintf>:
 80057b8:	b40f      	push	{r0, r1, r2, r3}
 80057ba:	b507      	push	{r0, r1, r2, lr}
 80057bc:	4906      	ldr	r1, [pc, #24]	@ (80057d8 <iprintf+0x20>)
 80057be:	ab04      	add	r3, sp, #16
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c6:	6881      	ldr	r1, [r0, #8]
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	f000 fadb 	bl	8005d84 <_vfiprintf_r>
 80057ce:	b003      	add	sp, #12
 80057d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d4:	b004      	add	sp, #16
 80057d6:	4770      	bx	lr
 80057d8:	20000018 	.word	0x20000018

080057dc <_puts_r>:
 80057dc:	6a03      	ldr	r3, [r0, #32]
 80057de:	b570      	push	{r4, r5, r6, lr}
 80057e0:	6884      	ldr	r4, [r0, #8]
 80057e2:	4605      	mov	r5, r0
 80057e4:	460e      	mov	r6, r1
 80057e6:	b90b      	cbnz	r3, 80057ec <_puts_r+0x10>
 80057e8:	f7ff ffb0 	bl	800574c <__sinit>
 80057ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057ee:	07db      	lsls	r3, r3, #31
 80057f0:	d405      	bmi.n	80057fe <_puts_r+0x22>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	0598      	lsls	r0, r3, #22
 80057f6:	d402      	bmi.n	80057fe <_puts_r+0x22>
 80057f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057fa:	f000 f99e 	bl	8005b3a <__retarget_lock_acquire_recursive>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	0719      	lsls	r1, r3, #28
 8005802:	d502      	bpl.n	800580a <_puts_r+0x2e>
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d135      	bne.n	8005876 <_puts_r+0x9a>
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f8c5 	bl	800599c <__swsetup_r>
 8005812:	b380      	cbz	r0, 8005876 <_puts_r+0x9a>
 8005814:	f04f 35ff 	mov.w	r5, #4294967295
 8005818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800581a:	07da      	lsls	r2, r3, #31
 800581c:	d405      	bmi.n	800582a <_puts_r+0x4e>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	059b      	lsls	r3, r3, #22
 8005822:	d402      	bmi.n	800582a <_puts_r+0x4e>
 8005824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005826:	f000 f989 	bl	8005b3c <__retarget_lock_release_recursive>
 800582a:	4628      	mov	r0, r5
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	2b00      	cmp	r3, #0
 8005830:	da04      	bge.n	800583c <_puts_r+0x60>
 8005832:	69a2      	ldr	r2, [r4, #24]
 8005834:	429a      	cmp	r2, r3
 8005836:	dc17      	bgt.n	8005868 <_puts_r+0x8c>
 8005838:	290a      	cmp	r1, #10
 800583a:	d015      	beq.n	8005868 <_puts_r+0x8c>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	6022      	str	r2, [r4, #0]
 8005842:	7019      	strb	r1, [r3, #0]
 8005844:	68a3      	ldr	r3, [r4, #8]
 8005846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800584a:	3b01      	subs	r3, #1
 800584c:	60a3      	str	r3, [r4, #8]
 800584e:	2900      	cmp	r1, #0
 8005850:	d1ed      	bne.n	800582e <_puts_r+0x52>
 8005852:	2b00      	cmp	r3, #0
 8005854:	da11      	bge.n	800587a <_puts_r+0x9e>
 8005856:	4622      	mov	r2, r4
 8005858:	210a      	movs	r1, #10
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f85f 	bl	800591e <__swbuf_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d0d7      	beq.n	8005814 <_puts_r+0x38>
 8005864:	250a      	movs	r5, #10
 8005866:	e7d7      	b.n	8005818 <_puts_r+0x3c>
 8005868:	4622      	mov	r2, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f857 	bl	800591e <__swbuf_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d1e7      	bne.n	8005844 <_puts_r+0x68>
 8005874:	e7ce      	b.n	8005814 <_puts_r+0x38>
 8005876:	3e01      	subs	r6, #1
 8005878:	e7e4      	b.n	8005844 <_puts_r+0x68>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	220a      	movs	r2, #10
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e7ee      	b.n	8005864 <_puts_r+0x88>
	...

08005888 <puts>:
 8005888:	4b02      	ldr	r3, [pc, #8]	@ (8005894 <puts+0xc>)
 800588a:	4601      	mov	r1, r0
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f7ff bfa5 	b.w	80057dc <_puts_r>
 8005892:	bf00      	nop
 8005894:	20000018 	.word	0x20000018

08005898 <__sread>:
 8005898:	b510      	push	{r4, lr}
 800589a:	460c      	mov	r4, r1
 800589c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a0:	f000 f8fc 	bl	8005a9c <_read_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	bfab      	itete	ge
 80058a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058aa:	89a3      	ldrhlt	r3, [r4, #12]
 80058ac:	181b      	addge	r3, r3, r0
 80058ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058b2:	bfac      	ite	ge
 80058b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058b6:	81a3      	strhlt	r3, [r4, #12]
 80058b8:	bd10      	pop	{r4, pc}

080058ba <__swrite>:
 80058ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058be:	461f      	mov	r7, r3
 80058c0:	898b      	ldrh	r3, [r1, #12]
 80058c2:	05db      	lsls	r3, r3, #23
 80058c4:	4605      	mov	r5, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	4616      	mov	r6, r2
 80058ca:	d505      	bpl.n	80058d8 <__swrite+0x1e>
 80058cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d0:	2302      	movs	r3, #2
 80058d2:	2200      	movs	r2, #0
 80058d4:	f000 f8d0 	bl	8005a78 <_lseek_r>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	4632      	mov	r2, r6
 80058e6:	463b      	mov	r3, r7
 80058e8:	4628      	mov	r0, r5
 80058ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ee:	f000 b8e7 	b.w	8005ac0 <_write_r>

080058f2 <__sseek>:
 80058f2:	b510      	push	{r4, lr}
 80058f4:	460c      	mov	r4, r1
 80058f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fa:	f000 f8bd 	bl	8005a78 <_lseek_r>
 80058fe:	1c43      	adds	r3, r0, #1
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	bf15      	itete	ne
 8005904:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800590a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800590e:	81a3      	strheq	r3, [r4, #12]
 8005910:	bf18      	it	ne
 8005912:	81a3      	strhne	r3, [r4, #12]
 8005914:	bd10      	pop	{r4, pc}

08005916 <__sclose>:
 8005916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591a:	f000 b89d 	b.w	8005a58 <_close_r>

0800591e <__swbuf_r>:
 800591e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005920:	460e      	mov	r6, r1
 8005922:	4614      	mov	r4, r2
 8005924:	4605      	mov	r5, r0
 8005926:	b118      	cbz	r0, 8005930 <__swbuf_r+0x12>
 8005928:	6a03      	ldr	r3, [r0, #32]
 800592a:	b90b      	cbnz	r3, 8005930 <__swbuf_r+0x12>
 800592c:	f7ff ff0e 	bl	800574c <__sinit>
 8005930:	69a3      	ldr	r3, [r4, #24]
 8005932:	60a3      	str	r3, [r4, #8]
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	071a      	lsls	r2, r3, #28
 8005938:	d501      	bpl.n	800593e <__swbuf_r+0x20>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	b943      	cbnz	r3, 8005950 <__swbuf_r+0x32>
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 f82b 	bl	800599c <__swsetup_r>
 8005946:	b118      	cbz	r0, 8005950 <__swbuf_r+0x32>
 8005948:	f04f 37ff 	mov.w	r7, #4294967295
 800594c:	4638      	mov	r0, r7
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	6922      	ldr	r2, [r4, #16]
 8005954:	1a98      	subs	r0, r3, r2
 8005956:	6963      	ldr	r3, [r4, #20]
 8005958:	b2f6      	uxtb	r6, r6
 800595a:	4283      	cmp	r3, r0
 800595c:	4637      	mov	r7, r6
 800595e:	dc05      	bgt.n	800596c <__swbuf_r+0x4e>
 8005960:	4621      	mov	r1, r4
 8005962:	4628      	mov	r0, r5
 8005964:	f000 fd38 	bl	80063d8 <_fflush_r>
 8005968:	2800      	cmp	r0, #0
 800596a:	d1ed      	bne.n	8005948 <__swbuf_r+0x2a>
 800596c:	68a3      	ldr	r3, [r4, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	6022      	str	r2, [r4, #0]
 8005978:	701e      	strb	r6, [r3, #0]
 800597a:	6962      	ldr	r2, [r4, #20]
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	429a      	cmp	r2, r3
 8005980:	d004      	beq.n	800598c <__swbuf_r+0x6e>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	07db      	lsls	r3, r3, #31
 8005986:	d5e1      	bpl.n	800594c <__swbuf_r+0x2e>
 8005988:	2e0a      	cmp	r6, #10
 800598a:	d1df      	bne.n	800594c <__swbuf_r+0x2e>
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 fd22 	bl	80063d8 <_fflush_r>
 8005994:	2800      	cmp	r0, #0
 8005996:	d0d9      	beq.n	800594c <__swbuf_r+0x2e>
 8005998:	e7d6      	b.n	8005948 <__swbuf_r+0x2a>
	...

0800599c <__swsetup_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4b29      	ldr	r3, [pc, #164]	@ (8005a44 <__swsetup_r+0xa8>)
 80059a0:	4605      	mov	r5, r0
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	460c      	mov	r4, r1
 80059a6:	b118      	cbz	r0, 80059b0 <__swsetup_r+0x14>
 80059a8:	6a03      	ldr	r3, [r0, #32]
 80059aa:	b90b      	cbnz	r3, 80059b0 <__swsetup_r+0x14>
 80059ac:	f7ff fece 	bl	800574c <__sinit>
 80059b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b4:	0719      	lsls	r1, r3, #28
 80059b6:	d422      	bmi.n	80059fe <__swsetup_r+0x62>
 80059b8:	06da      	lsls	r2, r3, #27
 80059ba:	d407      	bmi.n	80059cc <__swsetup_r+0x30>
 80059bc:	2209      	movs	r2, #9
 80059be:	602a      	str	r2, [r5, #0]
 80059c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ca:	e033      	b.n	8005a34 <__swsetup_r+0x98>
 80059cc:	0758      	lsls	r0, r3, #29
 80059ce:	d512      	bpl.n	80059f6 <__swsetup_r+0x5a>
 80059d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059d2:	b141      	cbz	r1, 80059e6 <__swsetup_r+0x4a>
 80059d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059d8:	4299      	cmp	r1, r3
 80059da:	d002      	beq.n	80059e2 <__swsetup_r+0x46>
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 f8af 	bl	8005b40 <_free_r>
 80059e2:	2300      	movs	r3, #0
 80059e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	2300      	movs	r3, #0
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	f043 0308 	orr.w	r3, r3, #8
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	b94b      	cbnz	r3, 8005a16 <__swsetup_r+0x7a>
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a0c:	d003      	beq.n	8005a16 <__swsetup_r+0x7a>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 fd2f 	bl	8006474 <__smakebuf_r>
 8005a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1a:	f013 0201 	ands.w	r2, r3, #1
 8005a1e:	d00a      	beq.n	8005a36 <__swsetup_r+0x9a>
 8005a20:	2200      	movs	r2, #0
 8005a22:	60a2      	str	r2, [r4, #8]
 8005a24:	6962      	ldr	r2, [r4, #20]
 8005a26:	4252      	negs	r2, r2
 8005a28:	61a2      	str	r2, [r4, #24]
 8005a2a:	6922      	ldr	r2, [r4, #16]
 8005a2c:	b942      	cbnz	r2, 8005a40 <__swsetup_r+0xa4>
 8005a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a32:	d1c5      	bne.n	80059c0 <__swsetup_r+0x24>
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	0799      	lsls	r1, r3, #30
 8005a38:	bf58      	it	pl
 8005a3a:	6962      	ldrpl	r2, [r4, #20]
 8005a3c:	60a2      	str	r2, [r4, #8]
 8005a3e:	e7f4      	b.n	8005a2a <__swsetup_r+0x8e>
 8005a40:	2000      	movs	r0, #0
 8005a42:	e7f7      	b.n	8005a34 <__swsetup_r+0x98>
 8005a44:	20000018 	.word	0x20000018

08005a48 <memset>:
 8005a48:	4402      	add	r2, r0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d100      	bne.n	8005a52 <memset+0xa>
 8005a50:	4770      	bx	lr
 8005a52:	f803 1b01 	strb.w	r1, [r3], #1
 8005a56:	e7f9      	b.n	8005a4c <memset+0x4>

08005a58 <_close_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d06      	ldr	r5, [pc, #24]	@ (8005a74 <_close_r+0x1c>)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f7fb f95b 	bl	8000d1e <_close>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_close_r+0x1a>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_close_r+0x1a>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20000320 	.word	0x20000320

08005a78 <_lseek_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4d07      	ldr	r5, [pc, #28]	@ (8005a98 <_lseek_r+0x20>)
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	4608      	mov	r0, r1
 8005a80:	4611      	mov	r1, r2
 8005a82:	2200      	movs	r2, #0
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f7fb f970 	bl	8000d6c <_lseek>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d102      	bne.n	8005a96 <_lseek_r+0x1e>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b103      	cbz	r3, 8005a96 <_lseek_r+0x1e>
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	20000320 	.word	0x20000320

08005a9c <_read_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d07      	ldr	r5, [pc, #28]	@ (8005abc <_read_r+0x20>)
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	4608      	mov	r0, r1
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	602a      	str	r2, [r5, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f7fb f8fe 	bl	8000cac <_read>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_read_r+0x1e>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_read_r+0x1e>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	20000320 	.word	0x20000320

08005ac0 <_write_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	@ (8005ae0 <_write_r+0x20>)
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fb f909 	bl	8000ce6 <_write>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_write_r+0x1e>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_write_r+0x1e>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20000320 	.word	0x20000320

08005ae4 <__errno>:
 8005ae4:	4b01      	ldr	r3, [pc, #4]	@ (8005aec <__errno+0x8>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000018 	.word	0x20000018

08005af0 <__libc_init_array>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b28 <__libc_init_array+0x38>)
 8005af4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b2c <__libc_init_array+0x3c>)
 8005af6:	1b64      	subs	r4, r4, r5
 8005af8:	10a4      	asrs	r4, r4, #2
 8005afa:	2600      	movs	r6, #0
 8005afc:	42a6      	cmp	r6, r4
 8005afe:	d109      	bne.n	8005b14 <__libc_init_array+0x24>
 8005b00:	4d0b      	ldr	r5, [pc, #44]	@ (8005b30 <__libc_init_array+0x40>)
 8005b02:	4c0c      	ldr	r4, [pc, #48]	@ (8005b34 <__libc_init_array+0x44>)
 8005b04:	f000 fd24 	bl	8006550 <_init>
 8005b08:	1b64      	subs	r4, r4, r5
 8005b0a:	10a4      	asrs	r4, r4, #2
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	42a6      	cmp	r6, r4
 8005b10:	d105      	bne.n	8005b1e <__libc_init_array+0x2e>
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b18:	4798      	blx	r3
 8005b1a:	3601      	adds	r6, #1
 8005b1c:	e7ee      	b.n	8005afc <__libc_init_array+0xc>
 8005b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b22:	4798      	blx	r3
 8005b24:	3601      	adds	r6, #1
 8005b26:	e7f2      	b.n	8005b0e <__libc_init_array+0x1e>
 8005b28:	08006600 	.word	0x08006600
 8005b2c:	08006600 	.word	0x08006600
 8005b30:	08006600 	.word	0x08006600
 8005b34:	08006604 	.word	0x08006604

08005b38 <__retarget_lock_init_recursive>:
 8005b38:	4770      	bx	lr

08005b3a <__retarget_lock_acquire_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <__retarget_lock_release_recursive>:
 8005b3c:	4770      	bx	lr
	...

08005b40 <_free_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4605      	mov	r5, r0
 8005b44:	2900      	cmp	r1, #0
 8005b46:	d041      	beq.n	8005bcc <_free_r+0x8c>
 8005b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b4c:	1f0c      	subs	r4, r1, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bfb8      	it	lt
 8005b52:	18e4      	addlt	r4, r4, r3
 8005b54:	f000 f8e0 	bl	8005d18 <__malloc_lock>
 8005b58:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd0 <_free_r+0x90>)
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	b933      	cbnz	r3, 8005b6c <_free_r+0x2c>
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6014      	str	r4, [r2, #0]
 8005b62:	4628      	mov	r0, r5
 8005b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b68:	f000 b8dc 	b.w	8005d24 <__malloc_unlock>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d908      	bls.n	8005b82 <_free_r+0x42>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	1821      	adds	r1, r4, r0
 8005b74:	428b      	cmp	r3, r1
 8005b76:	bf01      	itttt	eq
 8005b78:	6819      	ldreq	r1, [r3, #0]
 8005b7a:	685b      	ldreq	r3, [r3, #4]
 8005b7c:	1809      	addeq	r1, r1, r0
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	e7ed      	b.n	8005b5e <_free_r+0x1e>
 8005b82:	461a      	mov	r2, r3
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b10b      	cbz	r3, 8005b8c <_free_r+0x4c>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d9fa      	bls.n	8005b82 <_free_r+0x42>
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	1850      	adds	r0, r2, r1
 8005b90:	42a0      	cmp	r0, r4
 8005b92:	d10b      	bne.n	8005bac <_free_r+0x6c>
 8005b94:	6820      	ldr	r0, [r4, #0]
 8005b96:	4401      	add	r1, r0
 8005b98:	1850      	adds	r0, r2, r1
 8005b9a:	4283      	cmp	r3, r0
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	d1e0      	bne.n	8005b62 <_free_r+0x22>
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	4408      	add	r0, r1
 8005ba8:	6010      	str	r0, [r2, #0]
 8005baa:	e7da      	b.n	8005b62 <_free_r+0x22>
 8005bac:	d902      	bls.n	8005bb4 <_free_r+0x74>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	e7d6      	b.n	8005b62 <_free_r+0x22>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	1821      	adds	r1, r4, r0
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf04      	itt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bf04      	itt	eq
 8005bc4:	1809      	addeq	r1, r1, r0
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6054      	str	r4, [r2, #4]
 8005bca:	e7ca      	b.n	8005b62 <_free_r+0x22>
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
 8005bce:	bf00      	nop
 8005bd0:	2000032c 	.word	0x2000032c

08005bd4 <sbrk_aligned>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8005c14 <sbrk_aligned+0x40>)
 8005bd8:	460c      	mov	r4, r1
 8005bda:	6831      	ldr	r1, [r6, #0]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	b911      	cbnz	r1, 8005be6 <sbrk_aligned+0x12>
 8005be0:	f000 fca6 	bl	8006530 <_sbrk_r>
 8005be4:	6030      	str	r0, [r6, #0]
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 fca1 	bl	8006530 <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d103      	bne.n	8005bfa <sbrk_aligned+0x26>
 8005bf2:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	1cc4      	adds	r4, r0, #3
 8005bfc:	f024 0403 	bic.w	r4, r4, #3
 8005c00:	42a0      	cmp	r0, r4
 8005c02:	d0f8      	beq.n	8005bf6 <sbrk_aligned+0x22>
 8005c04:	1a21      	subs	r1, r4, r0
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 fc92 	bl	8006530 <_sbrk_r>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d1f2      	bne.n	8005bf6 <sbrk_aligned+0x22>
 8005c10:	e7ef      	b.n	8005bf2 <sbrk_aligned+0x1e>
 8005c12:	bf00      	nop
 8005c14:	20000328 	.word	0x20000328

08005c18 <_malloc_r>:
 8005c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c1c:	1ccd      	adds	r5, r1, #3
 8005c1e:	f025 0503 	bic.w	r5, r5, #3
 8005c22:	3508      	adds	r5, #8
 8005c24:	2d0c      	cmp	r5, #12
 8005c26:	bf38      	it	cc
 8005c28:	250c      	movcc	r5, #12
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	db01      	blt.n	8005c34 <_malloc_r+0x1c>
 8005c30:	42a9      	cmp	r1, r5
 8005c32:	d904      	bls.n	8005c3e <_malloc_r+0x26>
 8005c34:	230c      	movs	r3, #12
 8005c36:	6033      	str	r3, [r6, #0]
 8005c38:	2000      	movs	r0, #0
 8005c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d14 <_malloc_r+0xfc>
 8005c42:	f000 f869 	bl	8005d18 <__malloc_lock>
 8005c46:	f8d8 3000 	ldr.w	r3, [r8]
 8005c4a:	461c      	mov	r4, r3
 8005c4c:	bb44      	cbnz	r4, 8005ca0 <_malloc_r+0x88>
 8005c4e:	4629      	mov	r1, r5
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff ffbf 	bl	8005bd4 <sbrk_aligned>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	4604      	mov	r4, r0
 8005c5a:	d158      	bne.n	8005d0e <_malloc_r+0xf6>
 8005c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c60:	4627      	mov	r7, r4
 8005c62:	2f00      	cmp	r7, #0
 8005c64:	d143      	bne.n	8005cee <_malloc_r+0xd6>
 8005c66:	2c00      	cmp	r4, #0
 8005c68:	d04b      	beq.n	8005d02 <_malloc_r+0xea>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	4630      	mov	r0, r6
 8005c70:	eb04 0903 	add.w	r9, r4, r3
 8005c74:	f000 fc5c 	bl	8006530 <_sbrk_r>
 8005c78:	4581      	cmp	r9, r0
 8005c7a:	d142      	bne.n	8005d02 <_malloc_r+0xea>
 8005c7c:	6821      	ldr	r1, [r4, #0]
 8005c7e:	1a6d      	subs	r5, r5, r1
 8005c80:	4629      	mov	r1, r5
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7ff ffa6 	bl	8005bd4 <sbrk_aligned>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d03a      	beq.n	8005d02 <_malloc_r+0xea>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	442b      	add	r3, r5
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	f8d8 3000 	ldr.w	r3, [r8]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	bb62      	cbnz	r2, 8005cf4 <_malloc_r+0xdc>
 8005c9a:	f8c8 7000 	str.w	r7, [r8]
 8005c9e:	e00f      	b.n	8005cc0 <_malloc_r+0xa8>
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	1b52      	subs	r2, r2, r5
 8005ca4:	d420      	bmi.n	8005ce8 <_malloc_r+0xd0>
 8005ca6:	2a0b      	cmp	r2, #11
 8005ca8:	d917      	bls.n	8005cda <_malloc_r+0xc2>
 8005caa:	1961      	adds	r1, r4, r5
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	6025      	str	r5, [r4, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	6059      	strne	r1, [r3, #4]
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	bf08      	it	eq
 8005cb8:	f8c8 1000 	streq.w	r1, [r8]
 8005cbc:	5162      	str	r2, [r4, r5]
 8005cbe:	604b      	str	r3, [r1, #4]
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 f82f 	bl	8005d24 <__malloc_unlock>
 8005cc6:	f104 000b 	add.w	r0, r4, #11
 8005cca:	1d23      	adds	r3, r4, #4
 8005ccc:	f020 0007 	bic.w	r0, r0, #7
 8005cd0:	1ac2      	subs	r2, r0, r3
 8005cd2:	bf1c      	itt	ne
 8005cd4:	1a1b      	subne	r3, r3, r0
 8005cd6:	50a3      	strne	r3, [r4, r2]
 8005cd8:	e7af      	b.n	8005c3a <_malloc_r+0x22>
 8005cda:	6862      	ldr	r2, [r4, #4]
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	bf0c      	ite	eq
 8005ce0:	f8c8 2000 	streq.w	r2, [r8]
 8005ce4:	605a      	strne	r2, [r3, #4]
 8005ce6:	e7eb      	b.n	8005cc0 <_malloc_r+0xa8>
 8005ce8:	4623      	mov	r3, r4
 8005cea:	6864      	ldr	r4, [r4, #4]
 8005cec:	e7ae      	b.n	8005c4c <_malloc_r+0x34>
 8005cee:	463c      	mov	r4, r7
 8005cf0:	687f      	ldr	r7, [r7, #4]
 8005cf2:	e7b6      	b.n	8005c62 <_malloc_r+0x4a>
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	d1fb      	bne.n	8005cf4 <_malloc_r+0xdc>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6053      	str	r3, [r2, #4]
 8005d00:	e7de      	b.n	8005cc0 <_malloc_r+0xa8>
 8005d02:	230c      	movs	r3, #12
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	4630      	mov	r0, r6
 8005d08:	f000 f80c 	bl	8005d24 <__malloc_unlock>
 8005d0c:	e794      	b.n	8005c38 <_malloc_r+0x20>
 8005d0e:	6005      	str	r5, [r0, #0]
 8005d10:	e7d6      	b.n	8005cc0 <_malloc_r+0xa8>
 8005d12:	bf00      	nop
 8005d14:	2000032c 	.word	0x2000032c

08005d18 <__malloc_lock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	@ (8005d20 <__malloc_lock+0x8>)
 8005d1a:	f7ff bf0e 	b.w	8005b3a <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20000324 	.word	0x20000324

08005d24 <__malloc_unlock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	@ (8005d2c <__malloc_unlock+0x8>)
 8005d26:	f7ff bf09 	b.w	8005b3c <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20000324 	.word	0x20000324

08005d30 <__sfputc_r>:
 8005d30:	6893      	ldr	r3, [r2, #8]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	b410      	push	{r4}
 8005d38:	6093      	str	r3, [r2, #8]
 8005d3a:	da08      	bge.n	8005d4e <__sfputc_r+0x1e>
 8005d3c:	6994      	ldr	r4, [r2, #24]
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	db01      	blt.n	8005d46 <__sfputc_r+0x16>
 8005d42:	290a      	cmp	r1, #10
 8005d44:	d103      	bne.n	8005d4e <__sfputc_r+0x1e>
 8005d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d4a:	f7ff bde8 	b.w	800591e <__swbuf_r>
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	1c58      	adds	r0, r3, #1
 8005d52:	6010      	str	r0, [r2, #0]
 8005d54:	7019      	strb	r1, [r3, #0]
 8005d56:	4608      	mov	r0, r1
 8005d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <__sfputs_r>:
 8005d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d60:	4606      	mov	r6, r0
 8005d62:	460f      	mov	r7, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	18d5      	adds	r5, r2, r3
 8005d68:	42ac      	cmp	r4, r5
 8005d6a:	d101      	bne.n	8005d70 <__sfputs_r+0x12>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e007      	b.n	8005d80 <__sfputs_r+0x22>
 8005d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d74:	463a      	mov	r2, r7
 8005d76:	4630      	mov	r0, r6
 8005d78:	f7ff ffda 	bl	8005d30 <__sfputc_r>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d1f3      	bne.n	8005d68 <__sfputs_r+0xa>
 8005d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d84 <_vfiprintf_r>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	460d      	mov	r5, r1
 8005d8a:	b09d      	sub	sp, #116	@ 0x74
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	4698      	mov	r8, r3
 8005d90:	4606      	mov	r6, r0
 8005d92:	b118      	cbz	r0, 8005d9c <_vfiprintf_r+0x18>
 8005d94:	6a03      	ldr	r3, [r0, #32]
 8005d96:	b90b      	cbnz	r3, 8005d9c <_vfiprintf_r+0x18>
 8005d98:	f7ff fcd8 	bl	800574c <__sinit>
 8005d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d9e:	07d9      	lsls	r1, r3, #31
 8005da0:	d405      	bmi.n	8005dae <_vfiprintf_r+0x2a>
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	059a      	lsls	r2, r3, #22
 8005da6:	d402      	bmi.n	8005dae <_vfiprintf_r+0x2a>
 8005da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005daa:	f7ff fec6 	bl	8005b3a <__retarget_lock_acquire_recursive>
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	071b      	lsls	r3, r3, #28
 8005db2:	d501      	bpl.n	8005db8 <_vfiprintf_r+0x34>
 8005db4:	692b      	ldr	r3, [r5, #16]
 8005db6:	b99b      	cbnz	r3, 8005de0 <_vfiprintf_r+0x5c>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff fdee 	bl	800599c <__swsetup_r>
 8005dc0:	b170      	cbz	r0, 8005de0 <_vfiprintf_r+0x5c>
 8005dc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dc4:	07dc      	lsls	r4, r3, #31
 8005dc6:	d504      	bpl.n	8005dd2 <_vfiprintf_r+0x4e>
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	b01d      	add	sp, #116	@ 0x74
 8005dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	0598      	lsls	r0, r3, #22
 8005dd6:	d4f7      	bmi.n	8005dc8 <_vfiprintf_r+0x44>
 8005dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dda:	f7ff feaf 	bl	8005b3c <__retarget_lock_release_recursive>
 8005dde:	e7f3      	b.n	8005dc8 <_vfiprintf_r+0x44>
 8005de0:	2300      	movs	r3, #0
 8005de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de4:	2320      	movs	r3, #32
 8005de6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dee:	2330      	movs	r3, #48	@ 0x30
 8005df0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fa0 <_vfiprintf_r+0x21c>
 8005df4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005df8:	f04f 0901 	mov.w	r9, #1
 8005dfc:	4623      	mov	r3, r4
 8005dfe:	469a      	mov	sl, r3
 8005e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e04:	b10a      	cbz	r2, 8005e0a <_vfiprintf_r+0x86>
 8005e06:	2a25      	cmp	r2, #37	@ 0x25
 8005e08:	d1f9      	bne.n	8005dfe <_vfiprintf_r+0x7a>
 8005e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e0e:	d00b      	beq.n	8005e28 <_vfiprintf_r+0xa4>
 8005e10:	465b      	mov	r3, fp
 8005e12:	4622      	mov	r2, r4
 8005e14:	4629      	mov	r1, r5
 8005e16:	4630      	mov	r0, r6
 8005e18:	f7ff ffa1 	bl	8005d5e <__sfputs_r>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f000 80a7 	beq.w	8005f70 <_vfiprintf_r+0x1ec>
 8005e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e24:	445a      	add	r2, fp
 8005e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e28:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 809f 	beq.w	8005f70 <_vfiprintf_r+0x1ec>
 8005e32:	2300      	movs	r3, #0
 8005e34:	f04f 32ff 	mov.w	r2, #4294967295
 8005e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e3c:	f10a 0a01 	add.w	sl, sl, #1
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	9307      	str	r3, [sp, #28]
 8005e44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e48:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e4a:	4654      	mov	r4, sl
 8005e4c:	2205      	movs	r2, #5
 8005e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e52:	4853      	ldr	r0, [pc, #332]	@ (8005fa0 <_vfiprintf_r+0x21c>)
 8005e54:	f7fa f9e4 	bl	8000220 <memchr>
 8005e58:	9a04      	ldr	r2, [sp, #16]
 8005e5a:	b9d8      	cbnz	r0, 8005e94 <_vfiprintf_r+0x110>
 8005e5c:	06d1      	lsls	r1, r2, #27
 8005e5e:	bf44      	itt	mi
 8005e60:	2320      	movmi	r3, #32
 8005e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e66:	0713      	lsls	r3, r2, #28
 8005e68:	bf44      	itt	mi
 8005e6a:	232b      	movmi	r3, #43	@ 0x2b
 8005e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e70:	f89a 3000 	ldrb.w	r3, [sl]
 8005e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e76:	d015      	beq.n	8005ea4 <_vfiprintf_r+0x120>
 8005e78:	9a07      	ldr	r2, [sp, #28]
 8005e7a:	4654      	mov	r4, sl
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f04f 0c0a 	mov.w	ip, #10
 8005e82:	4621      	mov	r1, r4
 8005e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e88:	3b30      	subs	r3, #48	@ 0x30
 8005e8a:	2b09      	cmp	r3, #9
 8005e8c:	d94b      	bls.n	8005f26 <_vfiprintf_r+0x1a2>
 8005e8e:	b1b0      	cbz	r0, 8005ebe <_vfiprintf_r+0x13a>
 8005e90:	9207      	str	r2, [sp, #28]
 8005e92:	e014      	b.n	8005ebe <_vfiprintf_r+0x13a>
 8005e94:	eba0 0308 	sub.w	r3, r0, r8
 8005e98:	fa09 f303 	lsl.w	r3, r9, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	46a2      	mov	sl, r4
 8005ea2:	e7d2      	b.n	8005e4a <_vfiprintf_r+0xc6>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	1d19      	adds	r1, r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	9103      	str	r1, [sp, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bfbb      	ittet	lt
 8005eb0:	425b      	neglt	r3, r3
 8005eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8005eb6:	9307      	strge	r3, [sp, #28]
 8005eb8:	9307      	strlt	r3, [sp, #28]
 8005eba:	bfb8      	it	lt
 8005ebc:	9204      	strlt	r2, [sp, #16]
 8005ebe:	7823      	ldrb	r3, [r4, #0]
 8005ec0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ec2:	d10a      	bne.n	8005eda <_vfiprintf_r+0x156>
 8005ec4:	7863      	ldrb	r3, [r4, #1]
 8005ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec8:	d132      	bne.n	8005f30 <_vfiprintf_r+0x1ac>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	1d1a      	adds	r2, r3, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	9203      	str	r2, [sp, #12]
 8005ed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ed6:	3402      	adds	r4, #2
 8005ed8:	9305      	str	r3, [sp, #20]
 8005eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fb0 <_vfiprintf_r+0x22c>
 8005ede:	7821      	ldrb	r1, [r4, #0]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	f7fa f99c 	bl	8000220 <memchr>
 8005ee8:	b138      	cbz	r0, 8005efa <_vfiprintf_r+0x176>
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	eba0 000a 	sub.w	r0, r0, sl
 8005ef0:	2240      	movs	r2, #64	@ 0x40
 8005ef2:	4082      	lsls	r2, r0
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	3401      	adds	r4, #1
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efe:	4829      	ldr	r0, [pc, #164]	@ (8005fa4 <_vfiprintf_r+0x220>)
 8005f00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f04:	2206      	movs	r2, #6
 8005f06:	f7fa f98b 	bl	8000220 <memchr>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d03f      	beq.n	8005f8e <_vfiprintf_r+0x20a>
 8005f0e:	4b26      	ldr	r3, [pc, #152]	@ (8005fa8 <_vfiprintf_r+0x224>)
 8005f10:	bb1b      	cbnz	r3, 8005f5a <_vfiprintf_r+0x1d6>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	3307      	adds	r3, #7
 8005f16:	f023 0307 	bic.w	r3, r3, #7
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f20:	443b      	add	r3, r7
 8005f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f24:	e76a      	b.n	8005dfc <_vfiprintf_r+0x78>
 8005f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	e7a8      	b.n	8005e82 <_vfiprintf_r+0xfe>
 8005f30:	2300      	movs	r3, #0
 8005f32:	3401      	adds	r4, #1
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	4619      	mov	r1, r3
 8005f38:	f04f 0c0a 	mov.w	ip, #10
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f42:	3a30      	subs	r2, #48	@ 0x30
 8005f44:	2a09      	cmp	r2, #9
 8005f46:	d903      	bls.n	8005f50 <_vfiprintf_r+0x1cc>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0c6      	beq.n	8005eda <_vfiprintf_r+0x156>
 8005f4c:	9105      	str	r1, [sp, #20]
 8005f4e:	e7c4      	b.n	8005eda <_vfiprintf_r+0x156>
 8005f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f54:	4604      	mov	r4, r0
 8005f56:	2301      	movs	r3, #1
 8005f58:	e7f0      	b.n	8005f3c <_vfiprintf_r+0x1b8>
 8005f5a:	ab03      	add	r3, sp, #12
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	462a      	mov	r2, r5
 8005f60:	4b12      	ldr	r3, [pc, #72]	@ (8005fac <_vfiprintf_r+0x228>)
 8005f62:	a904      	add	r1, sp, #16
 8005f64:	4630      	mov	r0, r6
 8005f66:	f3af 8000 	nop.w
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	1c78      	adds	r0, r7, #1
 8005f6e:	d1d6      	bne.n	8005f1e <_vfiprintf_r+0x19a>
 8005f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f72:	07d9      	lsls	r1, r3, #31
 8005f74:	d405      	bmi.n	8005f82 <_vfiprintf_r+0x1fe>
 8005f76:	89ab      	ldrh	r3, [r5, #12]
 8005f78:	059a      	lsls	r2, r3, #22
 8005f7a:	d402      	bmi.n	8005f82 <_vfiprintf_r+0x1fe>
 8005f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f7e:	f7ff fddd 	bl	8005b3c <__retarget_lock_release_recursive>
 8005f82:	89ab      	ldrh	r3, [r5, #12]
 8005f84:	065b      	lsls	r3, r3, #25
 8005f86:	f53f af1f 	bmi.w	8005dc8 <_vfiprintf_r+0x44>
 8005f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f8c:	e71e      	b.n	8005dcc <_vfiprintf_r+0x48>
 8005f8e:	ab03      	add	r3, sp, #12
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	462a      	mov	r2, r5
 8005f94:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <_vfiprintf_r+0x228>)
 8005f96:	a904      	add	r1, sp, #16
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 f879 	bl	8006090 <_printf_i>
 8005f9e:	e7e4      	b.n	8005f6a <_vfiprintf_r+0x1e6>
 8005fa0:	080065c4 	.word	0x080065c4
 8005fa4:	080065ce 	.word	0x080065ce
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	08005d5f 	.word	0x08005d5f
 8005fb0:	080065ca 	.word	0x080065ca

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4616      	mov	r6, r2
 8005fba:	4698      	mov	r8, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bfb8      	it	lt
 8005fc8:	4613      	movlt	r3, r2
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b10a      	cbz	r2, 8005fda <_printf_common+0x26>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	6833      	ldrmi	r3, [r6, #0]
 8005fe2:	3302      	addmi	r3, #2
 8005fe4:	6033      	strmi	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	f015 0506 	ands.w	r5, r5, #6
 8005fec:	d106      	bne.n	8005ffc <_printf_common+0x48>
 8005fee:	f104 0a19 	add.w	sl, r4, #25
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dc26      	bgt.n	800604a <_printf_common+0x96>
 8005ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	3b00      	subs	r3, #0
 8006004:	bf18      	it	ne
 8006006:	2301      	movne	r3, #1
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d42b      	bmi.n	8006064 <_printf_common+0xb0>
 800600c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006010:	4641      	mov	r1, r8
 8006012:	4638      	mov	r0, r7
 8006014:	47c8      	blx	r9
 8006016:	3001      	adds	r0, #1
 8006018:	d01e      	beq.n	8006058 <_printf_common+0xa4>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf02      	ittt	eq
 8006026:	68e5      	ldreq	r5, [r4, #12]
 8006028:	6833      	ldreq	r3, [r6, #0]
 800602a:	1aed      	subeq	r5, r5, r3
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	bf0c      	ite	eq
 8006030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006034:	2500      	movne	r5, #0
 8006036:	4293      	cmp	r3, r2
 8006038:	bfc4      	itt	gt
 800603a:	1a9b      	subgt	r3, r3, r2
 800603c:	18ed      	addgt	r5, r5, r3
 800603e:	2600      	movs	r6, #0
 8006040:	341a      	adds	r4, #26
 8006042:	42b5      	cmp	r5, r6
 8006044:	d11a      	bne.n	800607c <_printf_common+0xc8>
 8006046:	2000      	movs	r0, #0
 8006048:	e008      	b.n	800605c <_printf_common+0xa8>
 800604a:	2301      	movs	r3, #1
 800604c:	4652      	mov	r2, sl
 800604e:	4641      	mov	r1, r8
 8006050:	4638      	mov	r0, r7
 8006052:	47c8      	blx	r9
 8006054:	3001      	adds	r0, #1
 8006056:	d103      	bne.n	8006060 <_printf_common+0xac>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	3501      	adds	r5, #1
 8006062:	e7c6      	b.n	8005ff2 <_printf_common+0x3e>
 8006064:	18e1      	adds	r1, r4, r3
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	2030      	movs	r0, #48	@ 0x30
 800606a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800606e:	4422      	add	r2, r4
 8006070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006078:	3302      	adds	r3, #2
 800607a:	e7c7      	b.n	800600c <_printf_common+0x58>
 800607c:	2301      	movs	r3, #1
 800607e:	4622      	mov	r2, r4
 8006080:	4641      	mov	r1, r8
 8006082:	4638      	mov	r0, r7
 8006084:	47c8      	blx	r9
 8006086:	3001      	adds	r0, #1
 8006088:	d0e6      	beq.n	8006058 <_printf_common+0xa4>
 800608a:	3601      	adds	r6, #1
 800608c:	e7d9      	b.n	8006042 <_printf_common+0x8e>
	...

08006090 <_printf_i>:
 8006090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	7e0f      	ldrb	r7, [r1, #24]
 8006096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006098:	2f78      	cmp	r7, #120	@ 0x78
 800609a:	4691      	mov	r9, r2
 800609c:	4680      	mov	r8, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	469a      	mov	sl, r3
 80060a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060a6:	d807      	bhi.n	80060b8 <_printf_i+0x28>
 80060a8:	2f62      	cmp	r7, #98	@ 0x62
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x32>
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	f000 80d2 	beq.w	8006256 <_printf_i+0x1c6>
 80060b2:	2f58      	cmp	r7, #88	@ 0x58
 80060b4:	f000 80b9 	beq.w	800622a <_printf_i+0x19a>
 80060b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c0:	e03a      	b.n	8006138 <_printf_i+0xa8>
 80060c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060c6:	2b15      	cmp	r3, #21
 80060c8:	d8f6      	bhi.n	80060b8 <_printf_i+0x28>
 80060ca:	a101      	add	r1, pc, #4	@ (adr r1, 80060d0 <_printf_i+0x40>)
 80060cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d0:	08006129 	.word	0x08006129
 80060d4:	0800613d 	.word	0x0800613d
 80060d8:	080060b9 	.word	0x080060b9
 80060dc:	080060b9 	.word	0x080060b9
 80060e0:	080060b9 	.word	0x080060b9
 80060e4:	080060b9 	.word	0x080060b9
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080060b9 	.word	0x080060b9
 80060f0:	080060b9 	.word	0x080060b9
 80060f4:	080060b9 	.word	0x080060b9
 80060f8:	080060b9 	.word	0x080060b9
 80060fc:	0800623d 	.word	0x0800623d
 8006100:	08006167 	.word	0x08006167
 8006104:	080061f7 	.word	0x080061f7
 8006108:	080060b9 	.word	0x080060b9
 800610c:	080060b9 	.word	0x080060b9
 8006110:	0800625f 	.word	0x0800625f
 8006114:	080060b9 	.word	0x080060b9
 8006118:	08006167 	.word	0x08006167
 800611c:	080060b9 	.word	0x080060b9
 8006120:	080060b9 	.word	0x080060b9
 8006124:	080061ff 	.word	0x080061ff
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6032      	str	r2, [r6, #0]
 8006130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006138:	2301      	movs	r3, #1
 800613a:	e09d      	b.n	8006278 <_printf_i+0x1e8>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	6820      	ldr	r0, [r4, #0]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	d501      	bpl.n	800614c <_printf_i+0xbc>
 8006148:	681d      	ldr	r5, [r3, #0]
 800614a:	e003      	b.n	8006154 <_printf_i+0xc4>
 800614c:	0645      	lsls	r5, r0, #25
 800614e:	d5fb      	bpl.n	8006148 <_printf_i+0xb8>
 8006150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006154:	2d00      	cmp	r5, #0
 8006156:	da03      	bge.n	8006160 <_printf_i+0xd0>
 8006158:	232d      	movs	r3, #45	@ 0x2d
 800615a:	426d      	negs	r5, r5
 800615c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006160:	4859      	ldr	r0, [pc, #356]	@ (80062c8 <_printf_i+0x238>)
 8006162:	230a      	movs	r3, #10
 8006164:	e011      	b.n	800618a <_printf_i+0xfa>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	0608      	lsls	r0, r1, #24
 800616c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006170:	d402      	bmi.n	8006178 <_printf_i+0xe8>
 8006172:	0649      	lsls	r1, r1, #25
 8006174:	bf48      	it	mi
 8006176:	b2ad      	uxthmi	r5, r5
 8006178:	2f6f      	cmp	r7, #111	@ 0x6f
 800617a:	4853      	ldr	r0, [pc, #332]	@ (80062c8 <_printf_i+0x238>)
 800617c:	6033      	str	r3, [r6, #0]
 800617e:	bf14      	ite	ne
 8006180:	230a      	movne	r3, #10
 8006182:	2308      	moveq	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618a:	6866      	ldr	r6, [r4, #4]
 800618c:	60a6      	str	r6, [r4, #8]
 800618e:	2e00      	cmp	r6, #0
 8006190:	bfa2      	ittt	ge
 8006192:	6821      	ldrge	r1, [r4, #0]
 8006194:	f021 0104 	bicge.w	r1, r1, #4
 8006198:	6021      	strge	r1, [r4, #0]
 800619a:	b90d      	cbnz	r5, 80061a0 <_printf_i+0x110>
 800619c:	2e00      	cmp	r6, #0
 800619e:	d04b      	beq.n	8006238 <_printf_i+0x1a8>
 80061a0:	4616      	mov	r6, r2
 80061a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a6:	fb03 5711 	mls	r7, r3, r1, r5
 80061aa:	5dc7      	ldrb	r7, [r0, r7]
 80061ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b0:	462f      	mov	r7, r5
 80061b2:	42bb      	cmp	r3, r7
 80061b4:	460d      	mov	r5, r1
 80061b6:	d9f4      	bls.n	80061a2 <_printf_i+0x112>
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d10b      	bne.n	80061d4 <_printf_i+0x144>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	07df      	lsls	r7, r3, #31
 80061c0:	d508      	bpl.n	80061d4 <_printf_i+0x144>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6861      	ldr	r1, [r4, #4]
 80061c6:	4299      	cmp	r1, r3
 80061c8:	bfde      	ittt	le
 80061ca:	2330      	movle	r3, #48	@ 0x30
 80061cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d4:	1b92      	subs	r2, r2, r6
 80061d6:	6122      	str	r2, [r4, #16]
 80061d8:	f8cd a000 	str.w	sl, [sp]
 80061dc:	464b      	mov	r3, r9
 80061de:	aa03      	add	r2, sp, #12
 80061e0:	4621      	mov	r1, r4
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff fee6 	bl	8005fb4 <_printf_common>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d14a      	bne.n	8006282 <_printf_i+0x1f2>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	b004      	add	sp, #16
 80061f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f043 0320 	orr.w	r3, r3, #32
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	4833      	ldr	r0, [pc, #204]	@ (80062cc <_printf_i+0x23c>)
 8006200:	2778      	movs	r7, #120	@ 0x78
 8006202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	6831      	ldr	r1, [r6, #0]
 800620a:	061f      	lsls	r7, r3, #24
 800620c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006210:	d402      	bmi.n	8006218 <_printf_i+0x188>
 8006212:	065f      	lsls	r7, r3, #25
 8006214:	bf48      	it	mi
 8006216:	b2ad      	uxthmi	r5, r5
 8006218:	6031      	str	r1, [r6, #0]
 800621a:	07d9      	lsls	r1, r3, #31
 800621c:	bf44      	itt	mi
 800621e:	f043 0320 	orrmi.w	r3, r3, #32
 8006222:	6023      	strmi	r3, [r4, #0]
 8006224:	b11d      	cbz	r5, 800622e <_printf_i+0x19e>
 8006226:	2310      	movs	r3, #16
 8006228:	e7ac      	b.n	8006184 <_printf_i+0xf4>
 800622a:	4827      	ldr	r0, [pc, #156]	@ (80062c8 <_printf_i+0x238>)
 800622c:	e7e9      	b.n	8006202 <_printf_i+0x172>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f023 0320 	bic.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	e7f6      	b.n	8006226 <_printf_i+0x196>
 8006238:	4616      	mov	r6, r2
 800623a:	e7bd      	b.n	80061b8 <_printf_i+0x128>
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	6825      	ldr	r5, [r4, #0]
 8006240:	6961      	ldr	r1, [r4, #20]
 8006242:	1d18      	adds	r0, r3, #4
 8006244:	6030      	str	r0, [r6, #0]
 8006246:	062e      	lsls	r6, r5, #24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	d501      	bpl.n	8006250 <_printf_i+0x1c0>
 800624c:	6019      	str	r1, [r3, #0]
 800624e:	e002      	b.n	8006256 <_printf_i+0x1c6>
 8006250:	0668      	lsls	r0, r5, #25
 8006252:	d5fb      	bpl.n	800624c <_printf_i+0x1bc>
 8006254:	8019      	strh	r1, [r3, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	4616      	mov	r6, r2
 800625c:	e7bc      	b.n	80061d8 <_printf_i+0x148>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	6032      	str	r2, [r6, #0]
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	2100      	movs	r1, #0
 800626a:	4630      	mov	r0, r6
 800626c:	f7f9 ffd8 	bl	8000220 <memchr>
 8006270:	b108      	cbz	r0, 8006276 <_printf_i+0x1e6>
 8006272:	1b80      	subs	r0, r0, r6
 8006274:	6060      	str	r0, [r4, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	2300      	movs	r3, #0
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006280:	e7aa      	b.n	80061d8 <_printf_i+0x148>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	4632      	mov	r2, r6
 8006286:	4649      	mov	r1, r9
 8006288:	4640      	mov	r0, r8
 800628a:	47d0      	blx	sl
 800628c:	3001      	adds	r0, #1
 800628e:	d0ad      	beq.n	80061ec <_printf_i+0x15c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	d413      	bmi.n	80062be <_printf_i+0x22e>
 8006296:	68e0      	ldr	r0, [r4, #12]
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	4298      	cmp	r0, r3
 800629c:	bfb8      	it	lt
 800629e:	4618      	movlt	r0, r3
 80062a0:	e7a6      	b.n	80061f0 <_printf_i+0x160>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4632      	mov	r2, r6
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d09d      	beq.n	80061ec <_printf_i+0x15c>
 80062b0:	3501      	adds	r5, #1
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	9903      	ldr	r1, [sp, #12]
 80062b6:	1a5b      	subs	r3, r3, r1
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	dcf2      	bgt.n	80062a2 <_printf_i+0x212>
 80062bc:	e7eb      	b.n	8006296 <_printf_i+0x206>
 80062be:	2500      	movs	r5, #0
 80062c0:	f104 0619 	add.w	r6, r4, #25
 80062c4:	e7f5      	b.n	80062b2 <_printf_i+0x222>
 80062c6:	bf00      	nop
 80062c8:	080065d5 	.word	0x080065d5
 80062cc:	080065e6 	.word	0x080065e6

080062d0 <__sflush_r>:
 80062d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d8:	0716      	lsls	r6, r2, #28
 80062da:	4605      	mov	r5, r0
 80062dc:	460c      	mov	r4, r1
 80062de:	d454      	bmi.n	800638a <__sflush_r+0xba>
 80062e0:	684b      	ldr	r3, [r1, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dc02      	bgt.n	80062ec <__sflush_r+0x1c>
 80062e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dd48      	ble.n	800637e <__sflush_r+0xae>
 80062ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	d045      	beq.n	800637e <__sflush_r+0xae>
 80062f2:	2300      	movs	r3, #0
 80062f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062f8:	682f      	ldr	r7, [r5, #0]
 80062fa:	6a21      	ldr	r1, [r4, #32]
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	d030      	beq.n	8006362 <__sflush_r+0x92>
 8006300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	0759      	lsls	r1, r3, #29
 8006306:	d505      	bpl.n	8006314 <__sflush_r+0x44>
 8006308:	6863      	ldr	r3, [r4, #4]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800630e:	b10b      	cbz	r3, 8006314 <__sflush_r+0x44>
 8006310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006318:	6a21      	ldr	r1, [r4, #32]
 800631a:	4628      	mov	r0, r5
 800631c:	47b0      	blx	r6
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	d106      	bne.n	8006332 <__sflush_r+0x62>
 8006324:	6829      	ldr	r1, [r5, #0]
 8006326:	291d      	cmp	r1, #29
 8006328:	d82b      	bhi.n	8006382 <__sflush_r+0xb2>
 800632a:	4a2a      	ldr	r2, [pc, #168]	@ (80063d4 <__sflush_r+0x104>)
 800632c:	410a      	asrs	r2, r1
 800632e:	07d6      	lsls	r6, r2, #31
 8006330:	d427      	bmi.n	8006382 <__sflush_r+0xb2>
 8006332:	2200      	movs	r2, #0
 8006334:	6062      	str	r2, [r4, #4]
 8006336:	04d9      	lsls	r1, r3, #19
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	6022      	str	r2, [r4, #0]
 800633c:	d504      	bpl.n	8006348 <__sflush_r+0x78>
 800633e:	1c42      	adds	r2, r0, #1
 8006340:	d101      	bne.n	8006346 <__sflush_r+0x76>
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	b903      	cbnz	r3, 8006348 <__sflush_r+0x78>
 8006346:	6560      	str	r0, [r4, #84]	@ 0x54
 8006348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800634a:	602f      	str	r7, [r5, #0]
 800634c:	b1b9      	cbz	r1, 800637e <__sflush_r+0xae>
 800634e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006352:	4299      	cmp	r1, r3
 8006354:	d002      	beq.n	800635c <__sflush_r+0x8c>
 8006356:	4628      	mov	r0, r5
 8006358:	f7ff fbf2 	bl	8005b40 <_free_r>
 800635c:	2300      	movs	r3, #0
 800635e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006360:	e00d      	b.n	800637e <__sflush_r+0xae>
 8006362:	2301      	movs	r3, #1
 8006364:	4628      	mov	r0, r5
 8006366:	47b0      	blx	r6
 8006368:	4602      	mov	r2, r0
 800636a:	1c50      	adds	r0, r2, #1
 800636c:	d1c9      	bne.n	8006302 <__sflush_r+0x32>
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0c6      	beq.n	8006302 <__sflush_r+0x32>
 8006374:	2b1d      	cmp	r3, #29
 8006376:	d001      	beq.n	800637c <__sflush_r+0xac>
 8006378:	2b16      	cmp	r3, #22
 800637a:	d11e      	bne.n	80063ba <__sflush_r+0xea>
 800637c:	602f      	str	r7, [r5, #0]
 800637e:	2000      	movs	r0, #0
 8006380:	e022      	b.n	80063c8 <__sflush_r+0xf8>
 8006382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006386:	b21b      	sxth	r3, r3
 8006388:	e01b      	b.n	80063c2 <__sflush_r+0xf2>
 800638a:	690f      	ldr	r7, [r1, #16]
 800638c:	2f00      	cmp	r7, #0
 800638e:	d0f6      	beq.n	800637e <__sflush_r+0xae>
 8006390:	0793      	lsls	r3, r2, #30
 8006392:	680e      	ldr	r6, [r1, #0]
 8006394:	bf08      	it	eq
 8006396:	694b      	ldreq	r3, [r1, #20]
 8006398:	600f      	str	r7, [r1, #0]
 800639a:	bf18      	it	ne
 800639c:	2300      	movne	r3, #0
 800639e:	eba6 0807 	sub.w	r8, r6, r7
 80063a2:	608b      	str	r3, [r1, #8]
 80063a4:	f1b8 0f00 	cmp.w	r8, #0
 80063a8:	dde9      	ble.n	800637e <__sflush_r+0xae>
 80063aa:	6a21      	ldr	r1, [r4, #32]
 80063ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063ae:	4643      	mov	r3, r8
 80063b0:	463a      	mov	r2, r7
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b0      	blx	r6
 80063b6:	2800      	cmp	r0, #0
 80063b8:	dc08      	bgt.n	80063cc <__sflush_r+0xfc>
 80063ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063cc:	4407      	add	r7, r0
 80063ce:	eba8 0800 	sub.w	r8, r8, r0
 80063d2:	e7e7      	b.n	80063a4 <__sflush_r+0xd4>
 80063d4:	dfbffffe 	.word	0xdfbffffe

080063d8 <_fflush_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	690b      	ldr	r3, [r1, #16]
 80063dc:	4605      	mov	r5, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	b913      	cbnz	r3, 80063e8 <_fflush_r+0x10>
 80063e2:	2500      	movs	r5, #0
 80063e4:	4628      	mov	r0, r5
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	b118      	cbz	r0, 80063f2 <_fflush_r+0x1a>
 80063ea:	6a03      	ldr	r3, [r0, #32]
 80063ec:	b90b      	cbnz	r3, 80063f2 <_fflush_r+0x1a>
 80063ee:	f7ff f9ad 	bl	800574c <__sinit>
 80063f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f3      	beq.n	80063e2 <_fflush_r+0xa>
 80063fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063fc:	07d0      	lsls	r0, r2, #31
 80063fe:	d404      	bmi.n	800640a <_fflush_r+0x32>
 8006400:	0599      	lsls	r1, r3, #22
 8006402:	d402      	bmi.n	800640a <_fflush_r+0x32>
 8006404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006406:	f7ff fb98 	bl	8005b3a <__retarget_lock_acquire_recursive>
 800640a:	4628      	mov	r0, r5
 800640c:	4621      	mov	r1, r4
 800640e:	f7ff ff5f 	bl	80062d0 <__sflush_r>
 8006412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006414:	07da      	lsls	r2, r3, #31
 8006416:	4605      	mov	r5, r0
 8006418:	d4e4      	bmi.n	80063e4 <_fflush_r+0xc>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	059b      	lsls	r3, r3, #22
 800641e:	d4e1      	bmi.n	80063e4 <_fflush_r+0xc>
 8006420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006422:	f7ff fb8b 	bl	8005b3c <__retarget_lock_release_recursive>
 8006426:	e7dd      	b.n	80063e4 <_fflush_r+0xc>

08006428 <__swhatbuf_r>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006430:	2900      	cmp	r1, #0
 8006432:	b096      	sub	sp, #88	@ 0x58
 8006434:	4615      	mov	r5, r2
 8006436:	461e      	mov	r6, r3
 8006438:	da0d      	bge.n	8006456 <__swhatbuf_r+0x2e>
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006440:	f04f 0100 	mov.w	r1, #0
 8006444:	bf14      	ite	ne
 8006446:	2340      	movne	r3, #64	@ 0x40
 8006448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800644c:	2000      	movs	r0, #0
 800644e:	6031      	str	r1, [r6, #0]
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	b016      	add	sp, #88	@ 0x58
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	466a      	mov	r2, sp
 8006458:	f000 f848 	bl	80064ec <_fstat_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	dbec      	blt.n	800643a <__swhatbuf_r+0x12>
 8006460:	9901      	ldr	r1, [sp, #4]
 8006462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800646a:	4259      	negs	r1, r3
 800646c:	4159      	adcs	r1, r3
 800646e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006472:	e7eb      	b.n	800644c <__swhatbuf_r+0x24>

08006474 <__smakebuf_r>:
 8006474:	898b      	ldrh	r3, [r1, #12]
 8006476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006478:	079d      	lsls	r5, r3, #30
 800647a:	4606      	mov	r6, r0
 800647c:	460c      	mov	r4, r1
 800647e:	d507      	bpl.n	8006490 <__smakebuf_r+0x1c>
 8006480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	2301      	movs	r3, #1
 800648a:	6163      	str	r3, [r4, #20]
 800648c:	b003      	add	sp, #12
 800648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006490:	ab01      	add	r3, sp, #4
 8006492:	466a      	mov	r2, sp
 8006494:	f7ff ffc8 	bl	8006428 <__swhatbuf_r>
 8006498:	9f00      	ldr	r7, [sp, #0]
 800649a:	4605      	mov	r5, r0
 800649c:	4639      	mov	r1, r7
 800649e:	4630      	mov	r0, r6
 80064a0:	f7ff fbba 	bl	8005c18 <_malloc_r>
 80064a4:	b948      	cbnz	r0, 80064ba <__smakebuf_r+0x46>
 80064a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064aa:	059a      	lsls	r2, r3, #22
 80064ac:	d4ee      	bmi.n	800648c <__smakebuf_r+0x18>
 80064ae:	f023 0303 	bic.w	r3, r3, #3
 80064b2:	f043 0302 	orr.w	r3, r3, #2
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	e7e2      	b.n	8006480 <__smakebuf_r+0xc>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	6020      	str	r0, [r4, #0]
 80064be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	9b01      	ldr	r3, [sp, #4]
 80064c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064ca:	b15b      	cbz	r3, 80064e4 <__smakebuf_r+0x70>
 80064cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 f81d 	bl	8006510 <_isatty_r>
 80064d6:	b128      	cbz	r0, 80064e4 <__smakebuf_r+0x70>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	431d      	orrs	r5, r3
 80064e8:	81a5      	strh	r5, [r4, #12]
 80064ea:	e7cf      	b.n	800648c <__smakebuf_r+0x18>

080064ec <_fstat_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d07      	ldr	r5, [pc, #28]	@ (800650c <_fstat_r+0x20>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	f7fa fc1c 	bl	8000d36 <_fstat>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	d102      	bne.n	8006508 <_fstat_r+0x1c>
 8006502:	682b      	ldr	r3, [r5, #0]
 8006504:	b103      	cbz	r3, 8006508 <_fstat_r+0x1c>
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	bd38      	pop	{r3, r4, r5, pc}
 800650a:	bf00      	nop
 800650c:	20000320 	.word	0x20000320

08006510 <_isatty_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	@ (800652c <_isatty_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fa fc1b 	bl	8000d56 <_isatty>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_isatty_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_isatty_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000320 	.word	0x20000320

08006530 <_sbrk_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	@ (800654c <_sbrk_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fa fc24 	bl	8000d88 <_sbrk>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_sbrk_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_sbrk_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20000320 	.word	0x20000320

08006550 <_init>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr

0800655c <_fini>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr


pdal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006564  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006744  08006744  00007744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067dc  080067dc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e4  080067e4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e4  080067e4  000077e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080067ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08006854  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006854  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001865b  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c0  00000000  00000000  000206f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00023ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001081  00000000  00000000  00025018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e6d  00000000  00000000  00026099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b2a  00000000  00000000  00047f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd288  00000000  00000000  00061a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ecb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006238  00000000  00000000  0013ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00144f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800672c 	.word	0x0800672c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800672c 	.word	0x0800672c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	@ 0x30
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2220      	movs	r2, #32
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fb2b 	bl	8005c24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800060a:	2201      	movs	r2, #1
 800060c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	4817      	ldr	r0, [pc, #92]	@ (8000698 <MX_ADC1_Init+0xe8>)
 800063a:	f001 f89f 	bl	800177c <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000644:	f000 fa1d 	bl	8000a82 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800064c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000654:	f002 f9a4 	bl	80029a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800065e:	f000 fa10 	bl	8000a82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_ADC1_Init+0xec>)
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2306      	movs	r3, #6
 8000668:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066e:	237f      	movs	r3, #127	@ 0x7f
 8000670:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2304      	movs	r3, #4
 8000674:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC1_Init+0xe8>)
 8000680:	f001 fbd6 	bl	8001e30 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800068a:	f000 f9fa 	bl	8000a82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3730      	adds	r7, #48	@ 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000084 	.word	0x20000084
 800069c:	04300002 	.word	0x04300002

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09a      	sub	sp, #104	@ 0x68
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2244      	movs	r2, #68	@ 0x44
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 faaf 	bl	8005c24 <memset>
  if(adcHandle->Instance==ADC1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006ce:	d134      	bne.n	800073a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 faa5 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006ec:	f000 f9c9 	bl	8000a82 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 80006f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <HAL_ADC_MspInit+0xa4>)
 8000716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000720:	2301      	movs	r3, #1
 8000722:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000724:	2303      	movs	r3, #3
 8000726:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000736:	f002 fae7 	bl	8002d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3768      	adds	r7, #104	@ 0x68
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b42      	ldr	r3, [pc, #264]	@ (8000868 <MX_GPIO_Init+0x120>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a41      	ldr	r2, [pc, #260]	@ (8000868 <MX_GPIO_Init+0x120>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b3f      	ldr	r3, [pc, #252]	@ (8000868 <MX_GPIO_Init+0x120>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <MX_GPIO_Init+0x120>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a3b      	ldr	r2, [pc, #236]	@ (8000868 <MX_GPIO_Init+0x120>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <MX_GPIO_Init+0x120>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b36      	ldr	r3, [pc, #216]	@ (8000868 <MX_GPIO_Init+0x120>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a35      	ldr	r2, [pc, #212]	@ (8000868 <MX_GPIO_Init+0x120>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <MX_GPIO_Init+0x120>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	4830      	ldr	r0, [pc, #192]	@ (800086c <MX_GPIO_Init+0x124>)
 80007ac:	f002 fc2e 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80007b0:	2200      	movs	r2, #0
 80007b2:	f248 11ea 	movw	r1, #33258	@ 0x81ea
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f002 fc27 	bl	800300c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c6:	f002 fc21 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007ca:	2200      	movs	r2, #0
 80007cc:	f240 11f1 	movw	r1, #497	@ 0x1f1
 80007d0:	4827      	ldr	r0, [pc, #156]	@ (8000870 <MX_GPIO_Init+0x128>)
 80007d2:	f002 fc1b 	bl	800300c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|LED_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	481f      	ldr	r0, [pc, #124]	@ (800086c <MX_GPIO_Init+0x124>)
 80007ee:	f002 fa8b 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007f2:	f248 13fa 	movw	r3, #33274	@ 0x81fa
 80007f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f002 fa7b 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6
                           PB7 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000812:	f240 13f1 	movw	r3, #497	@ 0x1f1
 8000816:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|LED_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_GPIO_Init+0x128>)
 800082c:	f002 fa6c 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000830:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084a:	f002 fa5d 	bl	8002d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2028      	movs	r0, #40	@ 0x28
 8000854:	f002 fa23 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000858:	2028      	movs	r0, #40	@ 0x28
 800085a:	f002 fa3a 	bl	8002cd2 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48001400 	.word	0x48001400
 8000870:	48000400 	.word	0x48000400

08000874 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 800087c:	1d39      	adds	r1, r7, #4
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	2201      	movs	r2, #1
 8000884:	4803      	ldr	r0, [pc, #12]	@ (8000894 <__io_putchar+0x20>)
 8000886:	f004 f947 	bl	8004b18 <HAL_UART_Transmit>

	return chr;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000150 	.word	0x20000150

08000898 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d108      	bne.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		screenDisplay();
 80008aa:	f000 f921 	bl	8000af0 <screenDisplay>
		//ControlChange(ADCValue(), EFFECT);
		printf("%d \r\n", ADCValue());
 80008ae:	f000 f8f9 	bl	8000aa4 <ADCValue>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008b8:	f005 f86c 	bl	8005994 <iprintf>
	}
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40000800 	.word	0x40000800
 80008c8:	08006744 	.word	0x08006744

080008cc <HAL_GPIO_EXTI_Callback>:

/* Fonction de callback des boutons */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
	static int lastButtonTime = 0; // Anti-rebonds

	if ((HAL_GetTick() - lastButtonTime) > 200)
 80008d6:	f000 fca9 	bl	800122c <HAL_GetTick>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a24      	ldr	r2, [pc, #144]	@ (8000970 <HAL_GPIO_EXTI_Callback+0xa4>)
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80008e4:	d93f      	bls.n	8000966 <HAL_GPIO_EXTI_Callback+0x9a>
	{ // Anti-rebonds 50ms
		switch(GPIO_Pin)
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008ec:	d01a      	beq.n	8000924 <HAL_GPIO_EXTI_Callback+0x58>
 80008ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008f2:	d132      	bne.n	800095a <HAL_GPIO_EXTI_Callback+0x8e>
		{
		case BUTTON_UP:
			globalToDisplay++;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008fc:	6013      	str	r3, [r2, #0]
			// Change l'instrument virtuel suivant le numero affiché sur l'ecran en piochant le son associé dans la banque MIDI.
			ProgramChange(globalToDisplay);
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f8c3 	bl	8000a8e <ProgramChange>
			printf("%d \r\n", globalToDisplay);
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	481a      	ldr	r0, [pc, #104]	@ (8000978 <HAL_GPIO_EXTI_Callback+0xac>)
 8000910:	f005 f840 	bl	8005994 <iprintf>
			if (globalToDisplay > 127) //RQ: pour moi 127 car une data en midi = 1 octet donc au max 128 sons différents possibles
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b7f      	cmp	r3, #127	@ 0x7f
 800091a:	dd1b      	ble.n	8000954 <HAL_GPIO_EXTI_Callback+0x88>
			{
				globalToDisplay=127;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 800091e:	227f      	movs	r2, #127	@ 0x7f
 8000920:	601a      	str	r2, [r3, #0]
			}
			break;
 8000922:	e017      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x88>

		case BUTTON_DOWN:
			globalToDisplay--;
 8000924:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 800092c:	6013      	str	r3, [r2, #0]
			// Change l'instrument virtuel suivant le numero affiché sur l'ecran en piochant le son associé dans la banque MIDI.
			ProgramChange(globalToDisplay);
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f8ab 	bl	8000a8e <ProgramChange>
			printf("%d \r\n", globalToDisplay);
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <HAL_GPIO_EXTI_Callback+0xac>)
 8000940:	f005 f828 	bl	8005994 <iprintf>
			if (globalToDisplay < 0)
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	da05      	bge.n	8000958 <HAL_GPIO_EXTI_Callback+0x8c>
			{
				globalToDisplay=0;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_GPIO_EXTI_Callback+0xa8>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
			}
			break;
 8000952:	e001      	b.n	8000958 <HAL_GPIO_EXTI_Callback+0x8c>
			break;
 8000954:	bf00      	nop
 8000956:	e000      	b.n	800095a <HAL_GPIO_EXTI_Callback+0x8e>
			break;
 8000958:	bf00      	nop
		}

		lastButtonTime = HAL_GetTick();
 800095a:	f000 fc67 	bl	800122c <HAL_GetTick>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000964:	601a      	str	r2, [r3, #0]
	}
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000f0 	.word	0x200000f0
 8000974:	200000f4 	.word	0x200000f4
 8000978:	08006744 	.word	0x08006744

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	4815      	ldr	r0, [pc, #84]	@ (80009dc <main+0x60>)
 8000986:	f002 fb41 	bl	800300c <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 fbea 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f82d 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff fed9 	bl	8000748 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000996:	f000 fb13 	bl	8000fc0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800099a:	f7ff fe09 	bl	80005b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 800099e:	f000 fa9b 	bl	8000ed8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  globalToDisplay = 0;                // Valeur de départ « 00 »
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <main+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim4);      // démarre le multiplexage
 80009a8:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <main+0x68>)
 80009aa:	f003 fb89 	bl	80040c0 <HAL_TIM_Base_Start_IT>

  printf("Test\r\n");
 80009ae:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <main+0x6c>)
 80009b0:	f005 f858 	bl	8005a64 <puts>
	while (1)
	{
		// HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

    /* USER CODE END WHILE */
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ba:	4808      	ldr	r0, [pc, #32]	@ (80009dc <main+0x60>)
 80009bc:	f002 fb26 	bl	800300c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009c0:	2064      	movs	r0, #100	@ 0x64
 80009c2:	f000 fc3f 	bl	8001244 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <main+0x60>)
 80009ce:	f002 fb1d 	bl	800300c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009d2:	2064      	movs	r0, #100	@ 0x64
 80009d4:	f000 fc36 	bl	8001244 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,1);
 80009d8:	bf00      	nop
 80009da:	e7eb      	b.n	80009b4 <main+0x38>
 80009dc:	48000400 	.word	0x48000400
 80009e0:	200000f4 	.word	0x200000f4
 80009e4:	20000104 	.word	0x20000104
 80009e8:	0800674c 	.word	0x0800674c

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2238      	movs	r2, #56	@ 0x38
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f005 f912 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f002 fb2c 	bl	800306c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1e:	2340      	movs	r3, #64	@ 0x40
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a2e:	2355      	movs	r3, #85	@ 0x55
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0318 	add.w	r3, r7, #24
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fbc6 	bl	80031d4 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a4e:	f000 f818 	bl	8000a82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2303      	movs	r3, #3
 8000a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fec4 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a76:	f000 f804 	bl	8000a82 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	@ 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a86:	b672      	cpsid	i
}
 8000a88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a8a:	bf00      	nop
 8000a8c:	e7fd      	b.n	8000a8a <Error_Handler+0x8>

08000a8e <ProgramChange>:
#include "usart.h"
//Forme message MIDI : Status, Data 1, Data 2

// Fonction d'envoi d'un changement de de son dans la banque MIDI
void ProgramChange(int MIDISoundNumber)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   // int data[2] = {0xC0, MIDISoundNumber};  // le changement de programme se fait sur le canal 1 car 0xC0
    //HAL_UART_Transmit(&huart1, data, 2, HAL_MAX_DELAY);
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <ADCValue>:
    //HAL_UART_Transmit(&huart1, data, 3, HAL_MAX_DELAY);
}

// Recupere la valeur du potentiometre suivant l'inclinaison de la pédale et la convertit en un nombre entre 0 127
uint8_t ADCValue(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000aaa:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <ADCValue+0x44>)
 8000aac:	f000 ffea 	bl	8001a84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <ADCValue+0x44>)
 8000ab6:	f001 f8d5 	bl	8001c64 <HAL_ADC_PollForConversion>
	uint32_t lastADCValue = HAL_ADC_GetValue(&hadc1); //Lit la valeur analogique convertie
 8000aba:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <ADCValue+0x44>)
 8000abc:	f001 f9aa 	bl	8001e14 <HAL_ADC_GetValue>
 8000ac0:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1); // economie d'energie on éteint l'adc si il n'est pas utilisé.
 8000ac2:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <ADCValue+0x44>)
 8000ac4:	f001 f89a 	bl	8001bfc <HAL_ADC_Stop>
    return (uint8_t)((lastADCValue * 127) / 4095);
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	01db      	lsls	r3, r3, #7
 8000ace:	1a9a      	subs	r2, r3, r2
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <ADCValue+0x48>)
 8000ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ad6:	1ad2      	subs	r2, r2, r3
 8000ad8:	0852      	lsrs	r2, r2, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	0adb      	lsrs	r3, r3, #11
 8000ade:	b2db      	uxtb	r3, r3
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000084 	.word	0x20000084
 8000aec:	00100101 	.word	0x00100101

08000af0 <screenDisplay>:
#define LED11_PIN  GPIO_PIN_7   // PB7
#define LED12_PIN  GPIO_PIN_0   // PF0

int globalToDisplay;

void screenDisplay(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	static int displayNumber = 0;

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	4829      	ldr	r0, [pc, #164]	@ (8000ba0 <screenDisplay+0xb0>)
 8000afa:	f002 fa87 	bl	800300c <HAL_GPIO_WritePin>


	// Efface uniquement les bits des segments (1,3,4,5,6,7,8)
		GPIOA->ODR &= ~( (1<<1) | (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7) | (1<<8) );
 8000afe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b08:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8000b0c:	6153      	str	r3, [r2, #20]

    if (displayNumber == 0) {
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <screenDisplay+0xb4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d118      	bne.n	8000b48 <screenDisplay+0x58>
        GPIOA->ODR = array[globalToDisplay / 10]; // Chiffre des dizaines
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <screenDisplay+0xb8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a24      	ldr	r2, [pc, #144]	@ (8000bac <screenDisplay+0xbc>)
 8000b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b20:	1092      	asrs	r2, r2, #2
 8000b22:	17db      	asrs	r3, r3, #31
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <screenDisplay+0xc0>)
 8000b28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b30:	615a      	str	r2, [r3, #20]
        HAL_GPIO_WritePin(GPIO_PORT_B, COM0, GPIO_PIN_SET);  // COM0 = 1
 8000b32:	2201      	movs	r2, #1
 8000b34:	2120      	movs	r1, #32
 8000b36:	481a      	ldr	r0, [pc, #104]	@ (8000ba0 <screenDisplay+0xb0>)
 8000b38:	f002 fa68 	bl	800300c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM1, GPIO_PIN_RESET); // COM1 = 0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2140      	movs	r1, #64	@ 0x40
 8000b40:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <screenDisplay+0xb0>)
 8000b42:	f002 fa63 	bl	800300c <HAL_GPIO_WritePin>
 8000b46:	e01c      	b.n	8000b82 <screenDisplay+0x92>
    } else {
        GPIOA->ODR = array[globalToDisplay % 10]; // Chiffre des unités
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <screenDisplay+0xb8>)
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <screenDisplay+0xbc>)
 8000b4e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b52:	109a      	asrs	r2, r3, #2
 8000b54:	17cb      	asrs	r3, r1, #31
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	1aca      	subs	r2, r1, r3
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <screenDisplay+0xc0>)
 8000b64:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000b68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b6c:	615a      	str	r2, [r3, #20]
        HAL_GPIO_WritePin(GPIO_PORT_B, COM0, GPIO_PIN_RESET); // COM0 = 0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <screenDisplay+0xb0>)
 8000b74:	f002 fa4a 	bl	800300c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM1, GPIO_PIN_SET);  // COM1 = 1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2140      	movs	r1, #64	@ 0x40
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <screenDisplay+0xb0>)
 8000b7e:	f002 fa45 	bl	800300c <HAL_GPIO_WritePin>
    }

    displayBar(ADCValue());
 8000b82:	f7ff ff8f 	bl	8000aa4 <ADCValue>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f813 	bl	8000bb4 <displayBar>
    displayNumber = 1 - displayNumber;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <screenDisplay+0xb4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f1c3 0301 	rsb	r3, r3, #1
 8000b96:	4a03      	ldr	r2, [pc, #12]	@ (8000ba4 <screenDisplay+0xb4>)
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	200000f8 	.word	0x200000f8
 8000ba8:	200000f4 	.word	0x200000f4
 8000bac:	66666667 	.word	0x66666667
 8000bb0:	08006754 	.word	0x08006754

08000bb4 <displayBar>:

void displayBar(uint8_t val) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
    static int com = 0; // Alterne entre COM0 et COM1
    int nbLeds = ((127 - val) * 6) / 128;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da00      	bge.n	8000bd2 <displayBar+0x1e>
 8000bd0:	337f      	adds	r3, #127	@ 0x7f
 8000bd2:	11db      	asrs	r3, r3, #7
 8000bd4:	60fb      	str	r3, [r7, #12]
 // De 0 à 6 LEDs en fonction de l’ADC

    // Remet toutes les LED à 0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // LED10
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	482c      	ldr	r0, [pc, #176]	@ (8000c8c <displayBar+0xd8>)
 8000bdc:	f002 fa16 	bl	800300c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // LED11
 8000be0:	2200      	movs	r2, #0
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	4829      	ldr	r0, [pc, #164]	@ (8000c8c <displayBar+0xd8>)
 8000be6:	f002 fa11 	bl	800300c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET); // LED12
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	4828      	ldr	r0, [pc, #160]	@ (8000c90 <displayBar+0xdc>)
 8000bf0:	f002 fa0c 	bl	800300c <HAL_GPIO_WritePin>

    // Active le COM concerné
    if (com == 0) {
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <displayBar+0xe0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10a      	bne.n	8000c12 <displayBar+0x5e>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM0, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2120      	movs	r1, #32
 8000c00:	4822      	ldr	r0, [pc, #136]	@ (8000c8c <displayBar+0xd8>)
 8000c02:	f002 fa03 	bl	800300c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM1, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2140      	movs	r1, #64	@ 0x40
 8000c0a:	4820      	ldr	r0, [pc, #128]	@ (8000c8c <displayBar+0xd8>)
 8000c0c:	f002 f9fe 	bl	800300c <HAL_GPIO_WritePin>
 8000c10:	e009      	b.n	8000c26 <displayBar+0x72>
    } else {
        HAL_GPIO_WritePin(GPIO_PORT_B, COM0, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <displayBar+0xd8>)
 8000c18:	f002 f9f8 	bl	800300c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIO_PORT_B, COM1, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2140      	movs	r1, #64	@ 0x40
 8000c20:	481a      	ldr	r0, [pc, #104]	@ (8000c8c <displayBar+0xd8>)
 8000c22:	f002 f9f3 	bl	800300c <HAL_GPIO_WritePin>
    }

    // Allume les bonnes LEDs dans l'ordre LED12 → LED11 → LED10
    if (nbLeds >= 1 + com * 3) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // LED12
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <displayBar+0xe0>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dd04      	ble.n	8000c40 <displayBar+0x8c>
 8000c36:	2201      	movs	r2, #1
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4814      	ldr	r0, [pc, #80]	@ (8000c8c <displayBar+0xd8>)
 8000c3c:	f002 f9e6 	bl	800300c <HAL_GPIO_WritePin>
       if (nbLeds >= 2 + com * 3) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // LED11
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <displayBar+0xe0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dd04      	ble.n	8000c5c <displayBar+0xa8>
 8000c52:	2201      	movs	r2, #1
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <displayBar+0xd8>)
 8000c58:	f002 f9d8 	bl	800300c <HAL_GPIO_WritePin>
       if (nbLeds >= 3 + com * 3) HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET); // LED10
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <displayBar+0xe0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	db04      	blt.n	8000c78 <displayBar+0xc4>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2101      	movs	r1, #1
 8000c72:	4807      	ldr	r0, [pc, #28]	@ (8000c90 <displayBar+0xdc>)
 8000c74:	f002 f9ca 	bl	800300c <HAL_GPIO_WritePin>

    com = 1 - com; // Alterne à chaque appel
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <displayBar+0xe0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1c3 0301 	rsb	r3, r3, #1
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <displayBar+0xe0>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48001400 	.word	0x48001400
 8000c94:	200000fc 	.word	0x200000fc

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cce:	f002 fa71 	bl	80031b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d36:	f000 fa67 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <TIM4_IRQHandler+0x10>)
 8000d46:	f003 fa25 	bl	8004194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000104 	.word	0x20000104

08000d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000d5c:	f002 f96e 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000d60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000d64:	f002 f96a 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e00a      	b.n	8000d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d7e:	f3af 8000 	nop.w
 8000d82:	4601      	mov	r1, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf0      	blt.n	8000d7e <_read+0x12>
  }

  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e009      	b.n	8000dcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd57 	bl	8000874 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf1      	blt.n	8000db8 <_write+0x12>
  }
  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_close>:

int _close(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e06:	605a      	str	r2, [r3, #4]
  return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_isatty>:

int _isatty(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f004 ff22 	bl	8005cc0 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20008000 	.word	0x20008000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000100 	.word	0x20000100
 8000eb0:	20000338 	.word	0x20000338

08000eb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <MX_TIM4_Init+0x98>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000efe:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f0c:	2213      	movs	r2, #19
 8000f0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f1c:	4813      	ldr	r0, [pc, #76]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f1e:	f003 f877 	bl	8004010 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f28:	f7ff fdab 	bl	8000a82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f3a:	f003 fa7b 	bl	8004434 <HAL_TIM_ConfigClockSource>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f44:	f7ff fd9d 	bl	8000a82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_TIM4_Init+0x94>)
 8000f56:	f003 fcc7 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f7ff fd8f 	bl	8000a82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	40000800 	.word	0x40000800

08000f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d113      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	201e      	movs	r0, #30
 8000fa4:	f001 fe7b 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fa8:	201e      	movs	r0, #30
 8000faa:	f001 fe92 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40000800 	.word	0x40000800
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fc6:	4a25      	ldr	r2, [pc, #148]	@ (800105c <MX_USART1_UART_Init+0x9c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8001004:	2208      	movs	r2, #8
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 800100a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800100e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001010:	4811      	ldr	r0, [pc, #68]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8001012:	f003 fd31 	bl	8004a78 <HAL_UART_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800101c:	f7ff fd31 	bl	8000a82 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001020:	2100      	movs	r1, #0
 8001022:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8001024:	f004 fb2a 	bl	800567c <HAL_UARTEx_SetTxFifoThreshold>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800102e:	f7ff fd28 	bl	8000a82 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	4808      	ldr	r0, [pc, #32]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8001036:	f004 fb5f 	bl	80056f8 <HAL_UARTEx_SetRxFifoThreshold>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8001040:	f7ff fd1f 	bl	8000a82 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_USART1_UART_Init+0x98>)
 8001046:	f004 fae0 	bl	800560a <HAL_UARTEx_DisableFifoMode>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8001050:	f7ff fd17 	bl	8000a82 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000150 	.word	0x20000150
 800105c:	40013800 	.word	0x40013800

08001060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09a      	sub	sp, #104	@ 0x68
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2244      	movs	r2, #68	@ 0x44
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fdcf 	bl	8005c24 <memset>
  if(uartHandle->Instance==USART1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <HAL_UART_MspInit+0xa8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d137      	bne.n	8001100 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fdc7 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a8:	f7ff fceb 	bl	8000a82 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b0:	4a16      	ldr	r2, [pc, #88]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ee:	2307      	movs	r3, #7
 80010f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f001 fe04 	bl	8002d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001100:	bf00      	nop
 8001102:	3768      	adds	r7, #104	@ 0x68
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013800 	.word	0x40013800
 800110c:	40021000 	.word	0x40021000

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001114:	f7ff fece 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopForever+0x16>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f004 fdc5 	bl	8005ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff fc1b 	bl	800097c <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001154:	080067ec 	.word	0x080067ec
  ldr r2, =_sbss
 8001158:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800115c:	20000334 	.word	0x20000334

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f001 fd8b 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f80e 	bl	8001194 <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	e001      	b.n	8001188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001184:	f7ff fd88 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001188:	79fb      	ldrb	r3, [r7, #7]

}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_InitTick+0x68>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d022      	beq.n	80011ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_InitTick+0x6c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <HAL_InitTick+0x68>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fd96 	bl	8002cee <HAL_SYSTICK_Config>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10f      	bne.n	80011e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	d809      	bhi.n	80011e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ce:	2200      	movs	r2, #0
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295
 80011d6:	f001 fd62 	bl	8002c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <HAL_InitTick+0x70>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e007      	b.n	80011f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e004      	b.n	80011f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_IncTick+0x1c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_IncTick+0x20>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4413      	add	r3, r2
 8001216:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <HAL_IncTick+0x1c>)
 8001218:	6013      	str	r3, [r2, #0]
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	200001e4 	.word	0x200001e4
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200001e4 	.word	0x200001e4

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d004      	beq.n	8001268 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_Delay+0x40>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001268:	bf00      	nop
 800126a:	f7ff ffdf 	bl	800122c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	429a      	cmp	r2, r3
 8001278:	d8f7      	bhi.n	800126a <HAL_Delay+0x26>
  {
  }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000008 	.word	0x20000008

08001288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3360      	adds	r3, #96	@ 0x60
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <LL_ADC_SetOffset+0x44>)
 8001312:	4013      	ands	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	4313      	orrs	r3, r2
 8001320:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	03fff000 	.word	0x03fff000

08001338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3360      	adds	r3, #96	@ 0x60
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3360      	adds	r3, #96	@ 0x60
 8001374:	461a      	mov	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800138e:	bf00      	nop
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800139a:	b480      	push	{r7}
 800139c:	b087      	sub	sp, #28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3360      	adds	r3, #96	@ 0x60
 80013aa:	461a      	mov	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	431a      	orrs	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3360      	adds	r3, #96	@ 0x60
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	615a      	str	r2, [r3, #20]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001452:	b480      	push	{r7}
 8001454:	b087      	sub	sp, #28
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3330      	adds	r3, #48	@ 0x30
 8001462:	461a      	mov	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	4413      	add	r3, r2
 8001470:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	211f      	movs	r1, #31
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	401a      	ands	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	0e9b      	lsrs	r3, r3, #26
 800148a:	f003 011f 	and.w	r1, r3, #31
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800149e:	bf00      	nop
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3314      	adds	r3, #20
 80014ba:	461a      	mov	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	0e5b      	lsrs	r3, r3, #25
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	0d1b      	lsrs	r3, r3, #20
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2107      	movs	r1, #7
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	0d1b      	lsrs	r3, r3, #20
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	431a      	orrs	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0318 	and.w	r3, r3, #24
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001524:	40d9      	lsrs	r1, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	400b      	ands	r3, r1
 800152a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152e:	431a      	orrs	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	0007ffff 	.word	0x0007ffff

08001548 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 031f 	and.w	r3, r3, #31
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6093      	str	r3, [r2, #8]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001608:	d101      	bne.n	800160e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800162c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001658:	f043 0202 	orr.w	r2, r3, #2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <LL_ADC_IsEnabled+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_ADC_IsEnabled+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d101      	bne.n	80016aa <LL_ADC_IsDisableOngoing+0x18>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_ADC_IsDisableOngoing+0x1a>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016cc:	f043 0204 	orr.w	r2, r3, #4
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016f4:	f043 0210 	orr.w	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d101      	bne.n	8001720 <LL_ADC_REG_IsConversionOngoing+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800173e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001742:	f043 0220 	orr.w	r2, r3, #32
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b08      	cmp	r3, #8
 8001768:	d101      	bne.n	800176e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e167      	b.n	8001a66 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7fe ff7b 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fef1 	bl	80015a4 <LL_ADC_IsDeepPowerDownEnabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fed7 	bl	8001580 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff0c 	bl	80015f4 <LL_ADC_IsInternalRegulatorEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fef0 	bl	80015cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001a70 <HAL_ADC_Init+0x2f4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	4aa0      	ldr	r2, [pc, #640]	@ (8001a74 <HAL_ADC_Init+0x2f8>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3b01      	subs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff feee 	bl	80015f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	f043 0210 	orr.w	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff62 	bl	8001708 <LL_ADC_REG_IsConversionOngoing>
 8001844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 8100 	bne.w	8001a54 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 80fc 	bne.w	8001a54 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001860:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001864:	f043 0202 	orr.w	r2, r3, #2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fefb 	bl	800166c <LL_ADC_IsEnabled>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800187c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001880:	f7ff fef4 	bl	800166c <LL_ADC_IsEnabled>
 8001884:	4604      	mov	r4, r0
 8001886:	487c      	ldr	r0, [pc, #496]	@ (8001a78 <HAL_ADC_Init+0x2fc>)
 8001888:	f7ff fef0 	bl	800166c <LL_ADC_IsEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	4323      	orrs	r3, r4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4619      	mov	r1, r3
 800189a:	4878      	ldr	r0, [pc, #480]	@ (8001a7c <HAL_ADC_Init+0x300>)
 800189c:	f7ff fcf4 	bl	8001288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7f5b      	ldrb	r3, [r3, #29]
 80018a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	045b      	lsls	r3, r3, #17
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b60      	ldr	r3, [pc, #384]	@ (8001a80 <HAL_ADC_Init+0x304>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff15 	bl	8001756 <LL_ADC_INJ_IsConversionOngoing>
 800192c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d16d      	bne.n	8001a10 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d16a      	bne.n	8001a10 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800193e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001946:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001956:	f023 0302 	bic.w	r3, r3, #2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	430b      	orrs	r3, r1
 8001962:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d017      	beq.n	800199c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800197a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001984:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6911      	ldr	r1, [r2, #16]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	430b      	orrs	r3, r1
 8001996:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800199a:	e013      	b.n	80019c4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f0:	430a      	orrs	r2, r1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	e007      	b.n	8001a10 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10c      	bne.n	8001a32 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f023 010f 	bic.w	r1, r3, #15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a30:	e007      	b.n	8001a42 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 020f 	bic.w	r2, r2, #15
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a52:	e007      	b.n	8001a64 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	f043 0210 	orr.w	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000
 8001a74:	053e2d63 	.word	0x053e2d63
 8001a78:	50000100 	.word	0x50000100
 8001a7c:	50000300 	.word	0x50000300
 8001a80:	fff04007 	.word	0xfff04007

08001a84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a8c:	4859      	ldr	r0, [pc, #356]	@ (8001bf4 <HAL_ADC_Start+0x170>)
 8001a8e:	f7ff fd5b 	bl	8001548 <LL_ADC_GetMultimode>
 8001a92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fe35 	bl	8001708 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 809f 	bne.w	8001be4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_Start+0x30>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e09a      	b.n	8001bea <HAL_ADC_Start+0x166>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fe63 	bl	8002788 <ADC_Enable>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 8086 	bne.w	8001bda <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a44      	ldr	r2, [pc, #272]	@ (8001bf8 <HAL_ADC_Start+0x174>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d002      	beq.n	8001af2 <HAL_ADC_Start+0x6e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e001      	b.n	8001af6 <HAL_ADC_Start+0x72>
 8001af2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d002      	beq.n	8001b04 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b1c:	d106      	bne.n	8001b2c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b22:	f023 0206 	bic.w	r2, r3, #6
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b2a:	e002      	b.n	8001b32 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	221c      	movs	r2, #28
 8001b38:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf8 <HAL_ADC_Start+0x174>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d002      	beq.n	8001b52 <HAL_ADC_Start+0xce>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	e001      	b.n	8001b56 <HAL_ADC_Start+0xd2>
 8001b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d008      	beq.n	8001b70 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d002      	beq.n	8001b70 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	d114      	bne.n	8001b9a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd90 	bl	80016b8 <LL_ADC_REG_StartConversion>
 8001b98:	e026      	b.n	8001be8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a13      	ldr	r2, [pc, #76]	@ (8001bf8 <HAL_ADC_Start+0x174>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d002      	beq.n	8001bb6 <HAL_ADC_Start+0x132>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	e001      	b.n	8001bba <HAL_ADC_Start+0x136>
 8001bb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00f      	beq.n	8001be8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bd8:	e006      	b.n	8001be8 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001be2:	e001      	b.n	8001be8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
 8001be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	50000300 	.word	0x50000300
 8001bf8:	50000100 	.word	0x50000100

08001bfc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Stop+0x16>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e023      	b.n	8001c5a <HAL_ADC_Stop+0x5e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fcf7 	bl	8002610 <ADC_ConversionStop>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d111      	bne.n	8001c50 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fe31 	bl	8002894 <ADC_Disable>
 8001c32:	4603      	mov	r3, r0
 8001c34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c6e:	4867      	ldr	r0, [pc, #412]	@ (8001e0c <HAL_ADC_PollForConversion+0x1a8>)
 8001c70:	f7ff fc6a 	bl	8001548 <LL_ADC_GetMultimode>
 8001c74:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d102      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e02a      	b.n	8001cda <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d111      	bne.n	8001cba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0a6      	b.n	8001e02 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001cb8:	e00f      	b.n	8001cda <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cba:	4854      	ldr	r0, [pc, #336]	@ (8001e0c <HAL_ADC_PollForConversion+0x1a8>)
 8001cbc:	f7ff fc52 	bl	8001564 <LL_ADC_GetMultiDMATransfer>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	f043 0220 	orr.w	r2, r3, #32
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e095      	b.n	8001e02 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cda:	f7ff faa7 	bl	800122c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ce0:	e021      	b.n	8001d26 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d01d      	beq.n	8001d26 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001cea:	f7ff fa9f 	bl	800122c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <HAL_ADC_PollForConversion+0x9c>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d112      	bne.n	8001d26 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10b      	bne.n	8001d26 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d12:	f043 0204 	orr.w	r2, r3, #4
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e06d      	b.n	8001e02 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0d6      	beq.n	8001ce2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fb71 	bl	800142c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01c      	beq.n	8001d8a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7f5b      	ldrb	r3, [r3, #29]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d118      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d111      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a20      	ldr	r2, [pc, #128]	@ (8001e10 <HAL_ADC_PollForConversion+0x1ac>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d002      	beq.n	8001d9a <HAL_ADC_PollForConversion+0x136>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	e001      	b.n	8001d9e <HAL_ADC_PollForConversion+0x13a>
 8001d9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d008      	beq.n	8001db8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d002      	beq.n	8001db8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d104      	bne.n	8001dc2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e00d      	b.n	8001dde <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <HAL_ADC_PollForConversion+0x1ac>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d002      	beq.n	8001dd2 <HAL_ADC_PollForConversion+0x16e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e001      	b.n	8001dd6 <HAL_ADC_PollForConversion+0x172>
 8001dd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dd6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d104      	bne.n	8001dee <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e008      	b.n	8001e00 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	220c      	movs	r2, #12
 8001dfe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	50000300 	.word	0x50000300
 8001e10:	50000100 	.word	0x50000100

08001e14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b6      	sub	sp, #216	@ 0xd8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x22>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e3c8      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x7b4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc52 	bl	8001708 <LL_ADC_REG_IsConversionOngoing>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 83ad 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f7ff faea 	bl	8001452 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc40 	bl	8001708 <LL_ADC_REG_IsConversionOngoing>
 8001e88:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fc60 	bl	8001756 <LL_ADC_INJ_IsConversionOngoing>
 8001e96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 81d9 	bne.w	8002256 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 81d4 	bne.w	8002256 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001eb6:	d10f      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff faf1 	bl	80014aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fa98 	bl	8001406 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ed6:	e00e      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f7ff fae0 	bl	80014aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fa88 	bl	8001406 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d022      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f28:	f7ff f9e2 	bl	80012f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6919      	ldr	r1, [r3, #16]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fa2e 	bl	800139a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x124>
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x126>
 8001f54:	2300      	movs	r3, #0
 8001f56:	461a      	mov	r2, r3
 8001f58:	f7ff fa3a 	bl	80013d0 <LL_ADC_SetOffsetSaturation>
 8001f5c:	e17b      	b.n	8002256 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f9e7 	bl	8001338 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x15a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f9dc 	bl	8001338 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	e01e      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x198>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f9d1 	bl	8001338 <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e004      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001fbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1b0>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	e018      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1e2>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e004      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002012:	429a      	cmp	r2, r3
 8002014:	d106      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f9a0 	bl	8001364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f984 	bl	8001338 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x220>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f979 	bl	8001338 <LL_ADC_GetOffsetChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	f003 021f 	and.w	r2, r3, #31
 800204e:	e01e      	b.n	800208e <HAL_ADC_ConfigChannel+0x25e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f96e 	bl	8001338 <LL_ADC_GetOffsetChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800206e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002072:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e004      	b.n	800208c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x276>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	e018      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x2a8>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80020ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80020c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e004      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80020ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020d8:	429a      	cmp	r2, r3
 80020da:	d106      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2101      	movs	r1, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff f93d 	bl	8001364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f921 	bl	8001338 <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x2e6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f916 	bl	8001338 <LL_ADC_GetOffsetChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	e01e      	b.n	8002154 <HAL_ADC_ConfigChannel+0x324>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2102      	movs	r1, #2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f90b 	bl	8001338 <LL_ADC_GetOffsetChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002138:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800213c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e004      	b.n	8002152 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002148:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_ADC_ConfigChannel+0x33c>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	e016      	b.n	800219a <HAL_ADC_ConfigChannel+0x36a>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800217e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e004      	b.n	800219a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2102      	movs	r1, #2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f8dc 	bl	8001364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2103      	movs	r1, #3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8c0 	bl	8001338 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x3a8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2103      	movs	r1, #3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f8b5 	bl	8001338 <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	f003 021f 	and.w	r2, r3, #31
 80021d6:	e017      	b.n	8002208 <HAL_ADC_ConfigChannel+0x3d8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2103      	movs	r1, #3
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f8aa 	bl	8001338 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80021f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e003      	b.n	8002206 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80021fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x3f0>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	e011      	b.n	8002244 <HAL_ADC_ConfigChannel+0x414>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800222e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002230:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800223c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	2103      	movs	r1, #3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f887 	bl	8001364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fa06 	bl	800166c <LL_ADC_IsEnabled>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8140 	bne.w	80024e8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	461a      	mov	r2, r3
 8002276:	f7ff f943 	bl	8001500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a8f      	ldr	r2, [pc, #572]	@ (80024bc <HAL_ADC_ConfigChannel+0x68c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	f040 8131 	bne.w	80024e8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x47e>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	3301      	adds	r3, #1
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	bf94      	ite	ls
 80022a6:	2301      	movls	r3, #1
 80022a8:	2300      	movhi	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	e019      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x4b2>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80022bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022be:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80022c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80022ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2b09      	cmp	r3, #9
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d079      	beq.n	80023da <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x4d2>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	3301      	adds	r3, #1
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002300:	e015      	b.n	800232e <HAL_ADC_ConfigChannel+0x4fe>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002312:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e003      	b.n	8002326 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800231e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	069b      	lsls	r3, r3, #26
 800232a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_ADC_ConfigChannel+0x51e>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	3301      	adds	r3, #1
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	e017      	b.n	800237e <HAL_ADC_ConfigChannel+0x54e>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800235c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800236a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	ea42 0103 	orr.w	r1, r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x574>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	0e9b      	lsrs	r3, r3, #26
 8002394:	3301      	adds	r3, #1
 8002396:	f003 021f 	and.w	r2, r3, #31
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	051b      	lsls	r3, r3, #20
 80023a2:	e018      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x5a6>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80023b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80023b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80023c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f003 021f 	and.w	r2, r3, #31
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d6:	430b      	orrs	r3, r1
 80023d8:	e081      	b.n	80024de <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x5c6>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	3301      	adds	r3, #1
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f4:	e015      	b.n	8002422 <HAL_ADC_ConfigChannel+0x5f2>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002406:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800240e:	2320      	movs	r3, #32
 8002410:	e003      	b.n	800241a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3301      	adds	r3, #1
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x612>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	e017      	b.n	8002472 <HAL_ADC_ConfigChannel+0x642>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	61fb      	str	r3, [r7, #28]
  return result;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	ea42 0103 	orr.w	r1, r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_ADC_ConfigChannel+0x66e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	3301      	adds	r3, #1
 800248a:	f003 021f 	and.w	r2, r3, #31
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3b1e      	subs	r3, #30
 8002496:	051b      	lsls	r3, r3, #20
 8002498:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800249c:	e01e      	b.n	80024dc <HAL_ADC_ConfigChannel+0x6ac>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	613b      	str	r3, [r7, #16]
  return result;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e006      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x698>
 80024ba:	bf00      	nop
 80024bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	051b      	lsls	r3, r3, #20
 80024d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7fe ffe1 	bl	80014aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b3f      	ldr	r3, [pc, #252]	@ (80025ec <HAL_ADC_ConfigChannel+0x7bc>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d071      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f4:	483e      	ldr	r0, [pc, #248]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80024f6:	f7fe feed 	bl	80012d4 <LL_ADC_GetCommonPathInternalCh>
 80024fa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a3c      	ldr	r2, [pc, #240]	@ (80025f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d004      	beq.n	8002512 <HAL_ADC_ConfigChannel+0x6e2>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3a      	ldr	r2, [pc, #232]	@ (80025f8 <HAL_ADC_ConfigChannel+0x7c8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d127      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d121      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002526:	d157      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800252c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002530:	4619      	mov	r1, r3
 8002532:	482f      	ldr	r0, [pc, #188]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002534:	f7fe febb 	bl	80012ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002538:	4b30      	ldr	r3, [pc, #192]	@ (80025fc <HAL_ADC_ConfigChannel+0x7cc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	4a30      	ldr	r2, [pc, #192]	@ (8002600 <HAL_ADC_ConfigChannel+0x7d0>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002552:	e002      	b.n	800255a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f9      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002560:	e03a      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a27      	ldr	r2, [pc, #156]	@ (8002604 <HAL_ADC_ConfigChannel+0x7d4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d113      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800256c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10d      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a22      	ldr	r2, [pc, #136]	@ (8002608 <HAL_ADC_ConfigChannel+0x7d8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02a      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258a:	4619      	mov	r1, r3
 800258c:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7c0>)
 800258e:	f7fe fe8e 	bl	80012ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002592:	e021      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_ADC_ConfigChannel+0x7dc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d11c      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800259e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a16      	ldr	r2, [pc, #88]	@ (8002608 <HAL_ADC_ConfigChannel+0x7d8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d011      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025bc:	4619      	mov	r1, r3
 80025be:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80025c0:	f7fe fe75 	bl	80012ae <LL_ADC_SetCommonPathInternalCh>
 80025c4:	e008      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80025e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	37d8      	adds	r7, #216	@ 0xd8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	80080000 	.word	0x80080000
 80025f0:	50000300 	.word	0x50000300
 80025f4:	c3210000 	.word	0xc3210000
 80025f8:	90c00010 	.word	0x90c00010
 80025fc:	20000000 	.word	0x20000000
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	c7520000 	.word	0xc7520000
 8002608:	50000100 	.word	0x50000100
 800260c:	cb840000 	.word	0xcb840000

08002610 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f86e 	bl	8001708 <LL_ADC_REG_IsConversionOngoing>
 800262c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f88f 	bl	8001756 <LL_ADC_INJ_IsConversionOngoing>
 8002638:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d103      	bne.n	8002648 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8098 	beq.w	8002778 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02a      	beq.n	80026ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7f5b      	ldrb	r3, [r3, #29]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d126      	bne.n	80026ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7f1b      	ldrb	r3, [r3, #28]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d122      	bne.n	80026ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002666:	2301      	movs	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800266a:	e014      	b.n	8002696 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4a45      	ldr	r2, [pc, #276]	@ (8002784 <ADC_ConversionStop+0x174>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d90d      	bls.n	8002690 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	f043 0210 	orr.w	r2, r3, #16
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e074      	b.n	800277a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3301      	adds	r3, #1
 8002694:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b40      	cmp	r3, #64	@ 0x40
 80026a2:	d1e3      	bne.n	800266c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d014      	beq.n	80026dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f826 	bl	8001708 <LL_ADC_REG_IsConversionOngoing>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe ffe3 	bl	8001692 <LL_ADC_IsDisableOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f802 	bl	80016e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d014      	beq.n	800270c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f835 	bl	8001756 <LL_ADC_INJ_IsConversionOngoing>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe ffcb 	bl	8001692 <LL_ADC_IsDisableOngoing>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f811 	bl	800172e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d005      	beq.n	800271e <ADC_ConversionStop+0x10e>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d105      	bne.n	8002724 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002718:	230c      	movs	r3, #12
 800271a:	617b      	str	r3, [r7, #20]
        break;
 800271c:	e005      	b.n	800272a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800271e:	2308      	movs	r3, #8
 8002720:	617b      	str	r3, [r7, #20]
        break;
 8002722:	e002      	b.n	800272a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002724:	2304      	movs	r3, #4
 8002726:	617b      	str	r3, [r7, #20]
        break;
 8002728:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800272a:	f7fe fd7f 	bl	800122c <HAL_GetTick>
 800272e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002730:	e01b      	b.n	800276a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002732:	f7fe fd7b 	bl	800122c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b05      	cmp	r3, #5
 800273e:	d914      	bls.n	800276a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002752:	f043 0210 	orr.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e007      	b.n	800277a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1dc      	bne.n	8002732 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	a33fffff 	.word	0xa33fffff

08002788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe ff67 	bl	800166c <LL_ADC_IsEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d169      	bne.n	8002878 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <ADC_Enable+0xfc>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e055      	b.n	800287a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe ff22 	bl	800161c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027d8:	482b      	ldr	r0, [pc, #172]	@ (8002888 <ADC_Enable+0x100>)
 80027da:	f7fe fd7b 	bl	80012d4 <LL_ADC_GetCommonPathInternalCh>
 80027de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e8:	4b28      	ldr	r3, [pc, #160]	@ (800288c <ADC_Enable+0x104>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <ADC_Enable+0x108>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002802:	e002      	b.n	800280a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	3b01      	subs	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f9      	bne.n	8002804 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002810:	f7fe fd0c 	bl	800122c <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002816:	e028      	b.n	800286a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe ff25 	bl	800166c <LL_ADC_IsEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fef5 	bl	800161c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002832:	f7fe fcfb 	bl	800122c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d914      	bls.n	800286a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d00d      	beq.n	800286a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d1cf      	bne.n	8002818 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	8000003f 	.word	0x8000003f
 8002888:	50000300 	.word	0x50000300
 800288c:	20000000 	.word	0x20000000
 8002890:	053e2d63 	.word	0x053e2d63

08002894 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fef6 	bl	8001692 <LL_ADC_IsDisableOngoing>
 80028a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fedd 	bl	800166c <LL_ADC_IsEnabled>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d047      	beq.n	8002948 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d144      	bne.n	8002948 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030d 	and.w	r3, r3, #13
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10c      	bne.n	80028e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe feb7 	bl	8001644 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2203      	movs	r2, #3
 80028dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028de:	f7fe fca5 	bl	800122c <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028e4:	e029      	b.n	800293a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e023      	b.n	800294a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002902:	f7fe fc93 	bl	800122c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d914      	bls.n	800293a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	f043 0210 	orr.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	f043 0201 	orr.w	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e007      	b.n	800294a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1dc      	bne.n	8002902 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <LL_ADC_IsEnabled>:
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <LL_ADC_IsEnabled+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_IsEnabled+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_REG_IsConversionOngoing>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d101      	bne.n	8002990 <LL_ADC_REG_IsConversionOngoing+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b0a1      	sub	sp, #132	@ 0x84
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e08b      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029c6:	2300      	movs	r3, #0
 80029c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029ca:	2300      	movs	r3, #0
 80029cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d6:	d102      	bne.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029d8:	4b41      	ldr	r3, [pc, #260]	@ (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	e001      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e06a      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffb8 	bl	8002978 <LL_ADC_REG_IsConversionOngoing>
 8002a08:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ffb2 	bl	8002978 <LL_ADC_REG_IsConversionOngoing>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d14c      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d149      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a20:	4b30      	ldr	r3, [pc, #192]	@ (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a22:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d028      	beq.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a3e:	035b      	lsls	r3, r3, #13
 8002a40:	430b      	orrs	r3, r1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a4c:	f7ff ff81 	bl	8002952 <LL_ADC_IsEnabled>
 8002a50:	4604      	mov	r4, r0
 8002a52:	4823      	ldr	r0, [pc, #140]	@ (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a54:	f7ff ff7d 	bl	8002952 <LL_ADC_IsEnabled>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4323      	orrs	r3, r4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d133      	bne.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a68:	f023 030f 	bic.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	6811      	ldr	r1, [r2, #0]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	6892      	ldr	r2, [r2, #8]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a7a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7c:	e024      	b.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a8a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a8e:	f7ff ff60 	bl	8002952 <LL_ADC_IsEnabled>
 8002a92:	4604      	mov	r4, r0
 8002a94:	4812      	ldr	r0, [pc, #72]	@ (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a96:	f7ff ff5c 	bl	8002952 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4323      	orrs	r3, r4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d112      	bne.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002aaa:	f023 030f 	bic.w	r3, r3, #15
 8002aae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ab0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab2:	e009      	b.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ac6:	e000      	b.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3784      	adds	r7, #132	@ 0x84
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	50000100 	.word	0x50000100
 8002ae4:	50000300 	.word	0x50000300

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	@ (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	@ (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	@ 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cac:	f7ff ff40 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f7ff ff90 	bl	8002bdc <NVIC_EncodePriority>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff5f 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff33 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffa4 	bl	8002c44 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d16:	e15a      	b.n	8002fce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 814c 	beq.w	8002fc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d005      	beq.n	8002d48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d017      	beq.n	8002de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d123      	bne.n	8002e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	6939      	ldr	r1, [r7, #16]
 8002e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80a6 	beq.w	8002fc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e80:	4a5a      	ldr	r2, [pc, #360]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e88:	4b58      	ldr	r3, [pc, #352]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e94:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ebe:	d01f      	beq.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff4 <HAL_GPIO_Init+0x2ec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d019      	beq.n	8002efc <HAL_GPIO_Init+0x1f4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ffc <HAL_GPIO_Init+0x2f4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_GPIO_Init+0x1ec>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <HAL_GPIO_Init+0x1e8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a48      	ldr	r2, [pc, #288]	@ (8003004 <HAL_GPIO_Init+0x2fc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_GPIO_Init+0x1e4>
 8002ee8:	2305      	movs	r3, #5
 8002eea:	e00a      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002eec:	2306      	movs	r3, #6
 8002eee:	e008      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	e006      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e004      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002f00:	2300      	movs	r3, #0
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	f002 0203 	and.w	r2, r2, #3
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	4093      	lsls	r3, r2
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f12:	4937      	ldr	r1, [pc, #220]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f20:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f44:	4a30      	ldr	r2, [pc, #192]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f6e:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f74:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f98:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fc2:	4a11      	ldr	r2, [pc, #68]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f ae9d 	bne.w	8002d18 <HAL_GPIO_Init+0x10>
  }
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	48000400 	.word	0x48000400
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	48000c00 	.word	0x48000c00
 8003000:	48001000 	.word	0x48001000
 8003004:	48001400 	.word	0x48001400
 8003008:	40010400 	.word	0x40010400

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003028:	e002      	b.n	8003030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003052:	4a05      	ldr	r2, [pc, #20]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fc36 	bl	80008cc <HAL_GPIO_EXTI_Callback>
  }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d141      	bne.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800307a:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003086:	d131      	bne.n	80030ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003088:	4b47      	ldr	r3, [pc, #284]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800308e:	4a46      	ldr	r2, [pc, #280]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003098:	4b43      	ldr	r3, [pc, #268]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a8:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2232      	movs	r2, #50	@ 0x32
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	4a3f      	ldr	r2, [pc, #252]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0c9b      	lsrs	r3, r3, #18
 80030ba:	3301      	adds	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030be:	e002      	b.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c6:	4b38      	ldr	r3, [pc, #224]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d2:	d102      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f2      	bne.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030da:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e6:	d158      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e057      	b.n	800319c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030ec:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f2:	4a2d      	ldr	r2, [pc, #180]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030fc:	e04d      	b.n	800319a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003104:	d141      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003106:	4b28      	ldr	r3, [pc, #160]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003112:	d131      	bne.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003114:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800311a:	4a23      	ldr	r2, [pc, #140]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003124:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800312c:	4a1e      	ldr	r2, [pc, #120]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003134:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2232      	movs	r2, #50	@ 0x32
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314a:	e002      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315e:	d102      	bne.n	8003166 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003172:	d112      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e011      	b.n	800319c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800317e:	4a0a      	ldr	r2, [pc, #40]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003188:	e007      	b.n	800319a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003192:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003198:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40007000 	.word	0x40007000
 80031ac:	20000000 	.word	0x20000000
 80031b0:	431bde83 	.word	0x431bde83

080031b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c2:	6093      	str	r3, [r2, #8]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40007000 	.word	0x40007000

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e2fe      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d075      	beq.n	80032de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f2:	4b97      	ldr	r3, [pc, #604]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031fc:	4b94      	ldr	r3, [pc, #592]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d102      	bne.n	8003212 <HAL_RCC_OscConfig+0x3e>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d002      	beq.n	8003218 <HAL_RCC_OscConfig+0x44>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d10b      	bne.n	8003230 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	4b8d      	ldr	r3, [pc, #564]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d05b      	beq.n	80032dc <HAL_RCC_OscConfig+0x108>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d157      	bne.n	80032dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e2d9      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x74>
 800323a:	4b85      	ldr	r3, [pc, #532]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a84      	ldr	r2, [pc, #528]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e01d      	b.n	8003284 <HAL_RCC_OscConfig+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x98>
 8003252:	4b7f      	ldr	r3, [pc, #508]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7e      	ldr	r2, [pc, #504]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b7c      	ldr	r3, [pc, #496]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7b      	ldr	r2, [pc, #492]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0xb0>
 800326c:	4b78      	ldr	r3, [pc, #480]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a77      	ldr	r2, [pc, #476]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b75      	ldr	r3, [pc, #468]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a74      	ldr	r2, [pc, #464]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800327e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd ffce 	bl	800122c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fd ffca 	bl	800122c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	@ 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e29e      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0xc0>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd ffba 	bl	800122c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fd ffb6 	bl	800122c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e28a      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ce:	4b60      	ldr	r3, [pc, #384]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0xe8>
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d075      	beq.n	80033d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ea:	4b59      	ldr	r3, [pc, #356]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f4:	4b56      	ldr	r3, [pc, #344]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d102      	bne.n	800330a <HAL_RCC_OscConfig+0x136>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d002      	beq.n	8003310 <HAL_RCC_OscConfig+0x13c>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d11f      	bne.n	8003350 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003310:	4b4f      	ldr	r3, [pc, #316]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_OscConfig+0x154>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e25d      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	4946      	ldr	r1, [pc, #280]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800333c:	4b45      	ldr	r3, [pc, #276]	@ (8003454 <HAL_RCC_OscConfig+0x280>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd ff27 	bl	8001194 <HAL_InitTick>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d043      	beq.n	80033d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e249      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d023      	beq.n	80033a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003358:	4b3d      	ldr	r3, [pc, #244]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3c      	ldr	r2, [pc, #240]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd ff62 	bl	800122c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7fd ff5e 	bl	800122c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e232      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338a:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	061b      	lsls	r3, r3, #24
 8003398:	492d      	ldr	r1, [pc, #180]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
 800339e:	e01a      	b.n	80033d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fd ff3e 	bl	800122c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b4:	f7fd ff3a 	bl	800122c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e20e      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x1e0>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d041      	beq.n	8003466 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01c      	beq.n	8003424 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ea:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80033ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f0:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fd ff17 	bl	800122c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fd ff13 	bl	800122c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1e7      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ef      	beq.n	8003402 <HAL_RCC_OscConfig+0x22e>
 8003422:	e020      	b.n	8003466 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	4a09      	ldr	r2, [pc, #36]	@ (8003450 <HAL_RCC_OscConfig+0x27c>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fd fefa 	bl	800122c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800343a:	e00d      	b.n	8003458 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343c:	f7fd fef6 	bl	800122c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d906      	bls.n	8003458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1ca      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003458:	4b8c      	ldr	r3, [pc, #560]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ea      	bne.n	800343c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a6 	beq.w	80035c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003478:	4b84      	ldr	r3, [pc, #528]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_OscConfig+0x2b4>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x2b6>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b7f      	ldr	r3, [pc, #508]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	4a7e      	ldr	r2, [pc, #504]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	@ 0x58
 800349a:	4b7c      	ldr	r3, [pc, #496]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034aa:	4b79      	ldr	r3, [pc, #484]	@ (8003690 <HAL_RCC_OscConfig+0x4bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b6:	4b76      	ldr	r3, [pc, #472]	@ (8003690 <HAL_RCC_OscConfig+0x4bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a75      	ldr	r2, [pc, #468]	@ (8003690 <HAL_RCC_OscConfig+0x4bc>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fd feb3 	bl	800122c <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd feaf 	bl	800122c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e183      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003690 <HAL_RCC_OscConfig+0x4bc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_RCC_OscConfig+0x32e>
 80034f0:	4b66      	ldr	r3, [pc, #408]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	4a65      	ldr	r2, [pc, #404]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003500:	e024      	b.n	800354c <HAL_RCC_OscConfig+0x378>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d110      	bne.n	800352c <HAL_RCC_OscConfig+0x358>
 800350a:	4b60      	ldr	r3, [pc, #384]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003510:	4a5e      	ldr	r2, [pc, #376]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800351a:	4b5c      	ldr	r3, [pc, #368]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	4a5a      	ldr	r2, [pc, #360]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800352a:	e00f      	b.n	800354c <HAL_RCC_OscConfig+0x378>
 800352c:	4b57      	ldr	r3, [pc, #348]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003532:	4a56      	ldr	r2, [pc, #344]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800353c:	4b53      	ldr	r3, [pc, #332]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	4a52      	ldr	r2, [pc, #328]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d016      	beq.n	8003582 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fe6a 	bl	800122c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fd fe66 	bl	800122c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e138      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003572:	4b46      	ldr	r3, [pc, #280]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ed      	beq.n	800355c <HAL_RCC_OscConfig+0x388>
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fd fe53 	bl	800122c <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd fe4f 	bl	800122c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e121      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a0:	4b3a      	ldr	r3, [pc, #232]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ed      	bne.n	800358a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b35      	ldr	r3, [pc, #212]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	4a34      	ldr	r2, [pc, #208]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d03c      	beq.n	8003646 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01c      	beq.n	800360e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d4:	4b2d      	ldr	r3, [pc, #180]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80035d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035da:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fd fe22 	bl	800122c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ec:	f7fd fe1e 	bl	800122c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0f2      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fe:	4b23      	ldr	r3, [pc, #140]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ef      	beq.n	80035ec <HAL_RCC_OscConfig+0x418>
 800360c:	e01b      	b.n	8003646 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800360e:	4b1f      	ldr	r3, [pc, #124]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003614:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fd fe05 	bl	800122c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003626:	f7fd fe01 	bl	800122c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0d5      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003638:	4b14      	ldr	r3, [pc, #80]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800363a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ef      	bne.n	8003626 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80c9 	beq.w	80037e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b0c      	cmp	r3, #12
 800365a:	f000 8083 	beq.w	8003764 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d15e      	bne.n	8003724 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a08      	ldr	r2, [pc, #32]	@ (800368c <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fddb 	bl	800122c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	e00c      	b.n	8003694 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd fdd7 	bl	800122c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d905      	bls.n	8003694 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0ab      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003694:	4b55      	ldr	r3, [pc, #340]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ec      	bne.n	800367a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a0:	4b52      	ldr	r3, [pc, #328]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	4b52      	ldr	r3, [pc, #328]	@ (80037f0 <HAL_RCC_OscConfig+0x61c>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6a11      	ldr	r1, [r2, #32]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036b0:	3a01      	subs	r2, #1
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	4311      	orrs	r1, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036ba:	0212      	lsls	r2, r2, #8
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036c2:	0852      	lsrs	r2, r2, #1
 80036c4:	3a01      	subs	r2, #1
 80036c6:	0552      	lsls	r2, r2, #21
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036ce:	0852      	lsrs	r2, r2, #1
 80036d0:	3a01      	subs	r2, #1
 80036d2:	0652      	lsls	r2, r2, #25
 80036d4:	4311      	orrs	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036da:	06d2      	lsls	r2, r2, #27
 80036dc:	430a      	orrs	r2, r1
 80036de:	4943      	ldr	r1, [pc, #268]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a40      	ldr	r2, [pc, #256]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 80036ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f0:	4b3e      	ldr	r3, [pc, #248]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a3d      	ldr	r2, [pc, #244]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd fd96 	bl	800122c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd fd92 	bl	800122c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e066      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x530>
 8003722:	e05e      	b.n	80037e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003724:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a30      	ldr	r2, [pc, #192]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fd fd7c 	bl	800122c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fd fd78 	bl	800122c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e04c      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374a:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003756:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	4924      	ldr	r1, [pc, #144]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 800375c:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <HAL_RCC_OscConfig+0x620>)
 800375e:	4013      	ands	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]
 8003762:	e03e      	b.n	80037e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e039      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003770:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <HAL_RCC_OscConfig+0x618>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	429a      	cmp	r2, r3
 8003782:	d12c      	bne.n	80037de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	3b01      	subs	r3, #1
 8003790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d123      	bne.n	80037de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d11b      	bne.n	80037de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d113      	bne.n	80037de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	3b01      	subs	r3, #1
 80037c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d109      	bne.n	80037de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	019f800c 	.word	0x019f800c
 80037f4:	feeefffc 	.word	0xfeeefffc

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e11e      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b91      	ldr	r3, [pc, #580]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d910      	bls.n	8003840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 020f 	bic.w	r2, r3, #15
 8003826:	498c      	ldr	r1, [pc, #560]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e106      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d073      	beq.n	8003934 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d129      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003854:	4b81      	ldr	r3, [pc, #516]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0f4      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003864:	f000 f99e 	bl	8003ba4 <RCC_GetSysClockFreqFromPLLSource>
 8003868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a60 <HAL_RCC_ClockConfig+0x268>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d93f      	bls.n	80038f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003872:	4b7a      	ldr	r3, [pc, #488]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d033      	beq.n	80038f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d12f      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003892:	4b72      	ldr	r3, [pc, #456]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800389a:	4a70      	ldr	r2, [pc, #448]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 800389c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038a2:	2380      	movs	r3, #128	@ 0x80
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e024      	b.n	80038f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0c6      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c0:	4b66      	ldr	r3, [pc, #408]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0be      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038d0:	f000 f8ce 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4a61      	ldr	r2, [pc, #388]	@ (8003a60 <HAL_RCC_ClockConfig+0x268>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d909      	bls.n	80038f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038de:	4b5f      	ldr	r3, [pc, #380]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038e6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80038e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4957      	ldr	r1, [pc, #348]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fc92 	bl	800122c <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd fc8e 	bl	800122c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e095      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b4e      	ldr	r3, [pc, #312]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d023      	beq.n	8003988 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800394c:	4b43      	ldr	r3, [pc, #268]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a42      	ldr	r2, [pc, #264]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003952:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003956:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003964:	4b3d      	ldr	r3, [pc, #244]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800396c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 800396e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b39      	ldr	r3, [pc, #228]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4936      	ldr	r1, [pc, #216]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
 8003986:	e008      	b.n	800399a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b80      	cmp	r3, #128	@ 0x80
 800398c:	d105      	bne.n	800399a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800398e:	4b33      	ldr	r3, [pc, #204]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003994:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003998:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800399a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d21d      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 020f 	bic.w	r2, r3, #15
 80039b0:	4929      	ldr	r1, [pc, #164]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039b8:	f7fd fc38 	bl	800122c <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fd fc34 	bl	800122c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e03b      	b.n	8003a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1ed      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4917      	ldr	r1, [pc, #92]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0e:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	490f      	ldr	r1, [pc, #60]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a22:	f000 f825 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	490c      	ldr	r1, [pc, #48]	@ (8003a64 <HAL_RCC_ClockConfig+0x26c>)
 8003a34:	5ccb      	ldrb	r3, [r1, r3]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <HAL_RCC_ClockConfig+0x270>)
 8003a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a42:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <HAL_RCC_ClockConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fba4 	bl	8001194 <HAL_InitTick>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40022000 	.word	0x40022000
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	04c4b400 	.word	0x04c4b400
 8003a64:	08006768 	.word	0x08006768
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	20000004 	.word	0x20000004

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a76:	4b2c      	ldr	r3, [pc, #176]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a82:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e047      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a88:	4b27      	ldr	r3, [pc, #156]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d102      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a94:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e03e      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a9a:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d136      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aa6:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	3301      	adds	r3, #1
 8003abc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	4a16      	ldr	r2, [pc, #88]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	0a12      	lsrs	r2, r2, #8
 8003ad2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
      break;
 8003adc:	e00c      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ade:	4a13      	ldr	r2, [pc, #76]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	4a10      	ldr	r2, [pc, #64]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	0a12      	lsrs	r2, r2, #8
 8003aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
      break;
 8003af6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	0e5b      	lsrs	r3, r3, #25
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	3301      	adds	r3, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e001      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b18:	693b      	ldr	r3, [r7, #16]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08006778 	.word	0x08006778

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b7c:	f7ff ffda 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4904      	ldr	r1, [pc, #16]	@ (8003ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	08006778 	.word	0x08006778

08003ba4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003baa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d10c      	bne.n	8003be2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bc8:	4a17      	ldr	r2, [pc, #92]	@ (8003c28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bd2:	68d2      	ldr	r2, [r2, #12]
 8003bd4:	0a12      	lsrs	r2, r2, #8
 8003bd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	617b      	str	r3, [r7, #20]
    break;
 8003be0:	e00c      	b.n	8003bfc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003be2:	4a12      	ldr	r2, [pc, #72]	@ (8003c2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4a0e      	ldr	r2, [pc, #56]	@ (8003c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bec:	68d2      	ldr	r2, [r2, #12]
 8003bee:	0a12      	lsrs	r2, r2, #8
 8003bf0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
    break;
 8003bfa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bfc:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	0e5b      	lsrs	r3, r3, #25
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c16:	687b      	ldr	r3, [r7, #4]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40021000 	.word	0x40021000
 8003c28:	007a1200 	.word	0x007a1200
 8003c2c:	00f42400 	.word	0x00f42400

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8098 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b43      	ldr	r3, [pc, #268]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b40      	ldr	r3, [pc, #256]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c62:	4a3f      	ldr	r2, [pc, #252]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a39      	ldr	r2, [pc, #228]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fad1 	bl	800122c <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fd facd 	bl	800122c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d902      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	74fb      	strb	r3, [r7, #19]
        break;
 8003ca0:	e005      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca2:	4b30      	ldr	r3, [pc, #192]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ef      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d159      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01e      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d019      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd0:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cdc:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cec:	4b1c      	ldr	r3, [pc, #112]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd fa8d 	bl	800122c <HAL_GetTick>
 8003d12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d14:	e00b      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd fa89 	bl	800122c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d902      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ec      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d42:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	4903      	ldr	r1, [pc, #12]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d58:	e008      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	74bb      	strb	r3, [r7, #18]
 8003d5e:	e005      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6c:	7c7b      	ldrb	r3, [r7, #17]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4ba6      	ldr	r3, [pc, #664]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	4aa5      	ldr	r2, [pc, #660]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8a:	4ba0      	ldr	r3, [pc, #640]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	499c      	ldr	r1, [pc, #624]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dac:	4b97      	ldr	r3, [pc, #604]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f023 020c 	bic.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4994      	ldr	r1, [pc, #592]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dce:	4b8f      	ldr	r3, [pc, #572]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	498b      	ldr	r1, [pc, #556]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df0:	4b86      	ldr	r3, [pc, #536]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	4983      	ldr	r1, [pc, #524]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e12:	4b7e      	ldr	r3, [pc, #504]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	497a      	ldr	r1, [pc, #488]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e34:	4b75      	ldr	r3, [pc, #468]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4972      	ldr	r1, [pc, #456]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e56:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4969      	ldr	r1, [pc, #420]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e78:	4b64      	ldr	r3, [pc, #400]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4961      	ldr	r1, [pc, #388]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	4958      	ldr	r1, [pc, #352]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ebc:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	4950      	ldr	r1, [pc, #320]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003edc:	4b4b      	ldr	r3, [pc, #300]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ee6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef4:	4b45      	ldr	r3, [pc, #276]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	4942      	ldr	r1, [pc, #264]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f12:	d105      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f14:	4b3d      	ldr	r3, [pc, #244]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a3c      	ldr	r2, [pc, #240]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f1e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f2c:	4b37      	ldr	r3, [pc, #220]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	4934      	ldr	r1, [pc, #208]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a2e      	ldr	r2, [pc, #184]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f64:	4b29      	ldr	r3, [pc, #164]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	4926      	ldr	r1, [pc, #152]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f84:	4b21      	ldr	r3, [pc, #132]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a20      	ldr	r2, [pc, #128]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	4918      	ldr	r1, [pc, #96]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fba:	d105      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbc:	4b13      	ldr	r3, [pc, #76]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a12      	ldr	r2, [pc, #72]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	490a      	ldr	r1, [pc, #40]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004000:	7cbb      	ldrb	r3, [r7, #18]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e049      	b.n	80040b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc ff9c 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 fb12 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e04a      	b.n	800416e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a21      	ldr	r2, [pc, #132]	@ (800417c <HAL_TIM_Base_Start_IT+0xbc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x6c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004102:	d013      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x6c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <HAL_TIM_Base_Start_IT+0xc0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x6c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1c      	ldr	r2, [pc, #112]	@ (8004184 <HAL_TIM_Base_Start_IT+0xc4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x6c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <HAL_TIM_Base_Start_IT+0xc8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x6c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a19      	ldr	r2, [pc, #100]	@ (800418c <HAL_TIM_Base_Start_IT+0xcc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d115      	bne.n	8004158 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <HAL_TIM_Base_Start_IT+0xd0>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b06      	cmp	r3, #6
 800413c:	d015      	beq.n	800416a <HAL_TIM_Base_Start_IT+0xaa>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004144:	d011      	beq.n	800416a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	e008      	b.n	800416a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e000      	b.n	800416c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40013400 	.word	0x40013400
 800418c:	40014000 	.word	0x40014000
 8004190:	00010007 	.word	0x00010007

08004194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d020      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01b      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0202 	mvn.w	r2, #2
 80041c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa2c 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa1e 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa2f 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d020      	beq.n	8004244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0204 	mvn.w	r2, #4
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa06 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9f8 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fa09 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d020      	beq.n	8004290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01b      	beq.n	8004290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0208 	mvn.w	r2, #8
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2204      	movs	r2, #4
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9e0 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9d2 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9e3 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d020      	beq.n	80042dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0210 	mvn.w	r2, #16
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2208      	movs	r2, #8
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9ba 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9ac 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f9bd 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0201 	mvn.w	r2, #1
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc facc 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fb69 	bl	8004a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb61 	bl	8004a14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f977 	bl	8004664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0220 	mvn.w	r2, #32
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb29 	bl	80049ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fb35 	bl	8004a28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fb2d 	bl	8004a3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80043fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fb25 	bl	8004a50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fb1d 	bl	8004a64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x1c>
 800444c:	2302      	movs	r3, #2
 800444e:	e0de      	b.n	800460e <HAL_TIM_ConfigClockSource+0x1da>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800446e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800447a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a63      	ldr	r2, [pc, #396]	@ (8004618 <HAL_TIM_ConfigClockSource+0x1e4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	f000 80a9 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004490:	4a61      	ldr	r2, [pc, #388]	@ (8004618 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	f200 80ae 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004498:	4a60      	ldr	r2, [pc, #384]	@ (800461c <HAL_TIM_ConfigClockSource+0x1e8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f000 80a1 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044a0:	4a5e      	ldr	r2, [pc, #376]	@ (800461c <HAL_TIM_ConfigClockSource+0x1e8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	f200 80a6 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004620 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f000 8099 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044b0:	4a5b      	ldr	r2, [pc, #364]	@ (8004620 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	f200 809e 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004624 <HAL_TIM_ConfigClockSource+0x1f0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f000 8091 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044c0:	4a58      	ldr	r2, [pc, #352]	@ (8004624 <HAL_TIM_ConfigClockSource+0x1f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	f200 8096 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044cc:	f000 8089 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044d4:	f200 808e 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044dc:	d03e      	beq.n	800455c <HAL_TIM_ConfigClockSource+0x128>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e2:	f200 8087 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ea:	f000 8086 	beq.w	80045fa <HAL_TIM_ConfigClockSource+0x1c6>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f2:	d87f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044f4:	2b70      	cmp	r3, #112	@ 0x70
 80044f6:	d01a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xfa>
 80044f8:	2b70      	cmp	r3, #112	@ 0x70
 80044fa:	d87b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80044fc:	2b60      	cmp	r3, #96	@ 0x60
 80044fe:	d050      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x16e>
 8004500:	2b60      	cmp	r3, #96	@ 0x60
 8004502:	d877      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004504:	2b50      	cmp	r3, #80	@ 0x50
 8004506:	d03c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x14e>
 8004508:	2b50      	cmp	r3, #80	@ 0x50
 800450a:	d873      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d058      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x18e>
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d86f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004514:	2b30      	cmp	r3, #48	@ 0x30
 8004516:	d064      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004518:	2b30      	cmp	r3, #48	@ 0x30
 800451a:	d86b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d060      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d867      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d05a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x1ae>
 800452c:	e062      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800453e:	f000 f9b3 	bl	80048a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e04f      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800456c:	f000 f99c 	bl	80048a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e03c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	461a      	mov	r2, r3
 8004590:	f000 f90e 	bl	80047b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2150      	movs	r1, #80	@ 0x50
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f967 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 80045a0:	e02c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 f92d 	bl	800480e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2160      	movs	r1, #96	@ 0x60
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f957 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 80045c0:	e01c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 f8ee 	bl	80047b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	@ 0x40
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f947 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 f93e 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 80045f2:	e003      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80045fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	00100070 	.word	0x00100070
 800461c:	00100040 	.word	0x00100040
 8004620:	00100030 	.word	0x00100030
 8004624:	00100020 	.word	0x00100020

08004628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a42      	ldr	r2, [pc, #264]	@ (8004794 <TIM_Base_SetConfig+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d00b      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3f      	ldr	r2, [pc, #252]	@ (8004798 <TIM_Base_SetConfig+0x120>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3e      	ldr	r2, [pc, #248]	@ (800479c <TIM_Base_SetConfig+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3d      	ldr	r2, [pc, #244]	@ (80047a0 <TIM_Base_SetConfig+0x128>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a33      	ldr	r2, [pc, #204]	@ (8004794 <TIM_Base_SetConfig+0x11c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01b      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d0:	d017      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a30      	ldr	r2, [pc, #192]	@ (8004798 <TIM_Base_SetConfig+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2f      	ldr	r2, [pc, #188]	@ (800479c <TIM_Base_SetConfig+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2e      	ldr	r2, [pc, #184]	@ (80047a0 <TIM_Base_SetConfig+0x128>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2d      	ldr	r2, [pc, #180]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2c      	ldr	r2, [pc, #176]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2b      	ldr	r2, [pc, #172]	@ (80047ac <TIM_Base_SetConfig+0x134>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a16      	ldr	r2, [pc, #88]	@ (8004794 <TIM_Base_SetConfig+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00f      	beq.n	8004760 <TIM_Base_SetConfig+0xe8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <TIM_Base_SetConfig+0x128>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00b      	beq.n	8004760 <TIM_Base_SetConfig+0xe8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <TIM_Base_SetConfig+0x12c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d007      	beq.n	8004760 <TIM_Base_SetConfig+0xe8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a15      	ldr	r2, [pc, #84]	@ (80047a8 <TIM_Base_SetConfig+0x130>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0xe8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a14      	ldr	r2, [pc, #80]	@ (80047ac <TIM_Base_SetConfig+0x134>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]
  }
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800

080047b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0201 	bic.w	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 030a 	bic.w	r3, r3, #10
 80047ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f023 0210 	bic.w	r2, r3, #16
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	031b      	lsls	r3, r3, #12
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800484a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e065      	b.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2c      	ldr	r2, [pc, #176]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2b      	ldr	r2, [pc, #172]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800493a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800494c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004950:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1b      	ldr	r2, [pc, #108]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004976:	d013      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a17      	ldr	r2, [pc, #92]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a12      	ldr	r2, [pc, #72]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a13      	ldr	r2, [pc, #76]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10c      	bne.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40013400 	.word	0x40013400
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40014000 	.word	0x40014000

080049ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e042      	b.n	8004b10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc fadf 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	@ 0x24
 8004aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fb82 	bl	80051cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8b3 	bl	8004c34 <UART_SetConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e01b      	b.n	8004b10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fc01 	bl	8005310 <UART_CheckIdleState>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d17b      	bne.n	8004c2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_UART_Transmit+0x26>
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e074      	b.n	8004c2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2221      	movs	r2, #33	@ 0x21
 8004b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fb6b 	bl	800122c <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b70:	d108      	bne.n	8004b84 <HAL_UART_Transmit+0x6c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e003      	b.n	8004b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b8c:	e030      	b.n	8004bf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2180      	movs	r1, #128	@ 0x80
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fc63 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e03d      	b.n	8004c2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	3302      	adds	r3, #2
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e007      	b.n	8004bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1c8      	bne.n	8004b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2140      	movs	r1, #64	@ 0x40
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fc2c 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e006      	b.n	8004c2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b08c      	sub	sp, #48	@ 0x30
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4bab      	ldr	r3, [pc, #684]	@ (8004f10 <UART_SetConfig+0x2dc>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4aa0      	ldr	r2, [pc, #640]	@ (8004f14 <UART_SetConfig+0x2e0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004caa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	f023 010f 	bic.w	r1, r3, #15
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a91      	ldr	r2, [pc, #580]	@ (8004f18 <UART_SetConfig+0x2e4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d125      	bne.n	8004d24 <UART_SetConfig+0xf0>
 8004cd8:	4b90      	ldr	r3, [pc, #576]	@ (8004f1c <UART_SetConfig+0x2e8>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d81a      	bhi.n	8004d1c <UART_SetConfig+0xe8>
 8004ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <UART_SetConfig+0xb8>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004d0d 	.word	0x08004d0d
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d02:	e0d6      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0a:	e0d2      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d12:	e0ce      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d14:	2308      	movs	r3, #8
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	e0ca      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d22:	e0c6      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a7d      	ldr	r2, [pc, #500]	@ (8004f20 <UART_SetConfig+0x2ec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d138      	bne.n	8004da0 <UART_SetConfig+0x16c>
 8004d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f1c <UART_SetConfig+0x2e8>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d82d      	bhi.n	8004d98 <UART_SetConfig+0x164>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <UART_SetConfig+0x110>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d99 	.word	0x08004d99
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004d99 	.word	0x08004d99
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004d99 	.word	0x08004d99
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004d99 	.word	0x08004d99
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d99 	.word	0x08004d99
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e098      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d80:	2302      	movs	r3, #2
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e094      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e090      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d90:	2308      	movs	r3, #8
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d96:	e08c      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	e088      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f24 <UART_SetConfig+0x2f0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d125      	bne.n	8004df6 <UART_SetConfig+0x1c2>
 8004daa:	4b5c      	ldr	r3, [pc, #368]	@ (8004f1c <UART_SetConfig+0x2e8>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004db4:	2b30      	cmp	r3, #48	@ 0x30
 8004db6:	d016      	beq.n	8004de6 <UART_SetConfig+0x1b2>
 8004db8:	2b30      	cmp	r3, #48	@ 0x30
 8004dba:	d818      	bhi.n	8004dee <UART_SetConfig+0x1ba>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d00a      	beq.n	8004dd6 <UART_SetConfig+0x1a2>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d814      	bhi.n	8004dee <UART_SetConfig+0x1ba>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <UART_SetConfig+0x19a>
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d008      	beq.n	8004dde <UART_SetConfig+0x1aa>
 8004dcc:	e00f      	b.n	8004dee <UART_SetConfig+0x1ba>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd4:	e06d      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ddc:	e069      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004dde:	2304      	movs	r3, #4
 8004de0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de4:	e065      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004de6:	2308      	movs	r3, #8
 8004de8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dec:	e061      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004dee:	2310      	movs	r3, #16
 8004df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df4:	e05d      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4b      	ldr	r2, [pc, #300]	@ (8004f28 <UART_SetConfig+0x2f4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d125      	bne.n	8004e4c <UART_SetConfig+0x218>
 8004e00:	4b46      	ldr	r3, [pc, #280]	@ (8004f1c <UART_SetConfig+0x2e8>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e0c:	d016      	beq.n	8004e3c <UART_SetConfig+0x208>
 8004e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e10:	d818      	bhi.n	8004e44 <UART_SetConfig+0x210>
 8004e12:	2b80      	cmp	r3, #128	@ 0x80
 8004e14:	d00a      	beq.n	8004e2c <UART_SetConfig+0x1f8>
 8004e16:	2b80      	cmp	r3, #128	@ 0x80
 8004e18:	d814      	bhi.n	8004e44 <UART_SetConfig+0x210>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <UART_SetConfig+0x1f0>
 8004e1e:	2b40      	cmp	r3, #64	@ 0x40
 8004e20:	d008      	beq.n	8004e34 <UART_SetConfig+0x200>
 8004e22:	e00f      	b.n	8004e44 <UART_SetConfig+0x210>
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2a:	e042      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e32:	e03e      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e34:	2304      	movs	r3, #4
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3a:	e03a      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e42:	e036      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e44:	2310      	movs	r3, #16
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4a:	e032      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a30      	ldr	r2, [pc, #192]	@ (8004f14 <UART_SetConfig+0x2e0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d12a      	bne.n	8004eac <UART_SetConfig+0x278>
 8004e56:	4b31      	ldr	r3, [pc, #196]	@ (8004f1c <UART_SetConfig+0x2e8>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e64:	d01a      	beq.n	8004e9c <UART_SetConfig+0x268>
 8004e66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e6a:	d81b      	bhi.n	8004ea4 <UART_SetConfig+0x270>
 8004e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e70:	d00c      	beq.n	8004e8c <UART_SetConfig+0x258>
 8004e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e76:	d815      	bhi.n	8004ea4 <UART_SetConfig+0x270>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <UART_SetConfig+0x250>
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e80:	d008      	beq.n	8004e94 <UART_SetConfig+0x260>
 8004e82:	e00f      	b.n	8004ea4 <UART_SetConfig+0x270>
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8a:	e012      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e92:	e00e      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e00a      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea2:	e006      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	e002      	b.n	8004eb2 <UART_SetConfig+0x27e>
 8004eac:	2310      	movs	r3, #16
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <UART_SetConfig+0x2e0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	f040 80a8 	bne.w	800500e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d834      	bhi.n	8004f30 <UART_SetConfig+0x2fc>
 8004ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0x298>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004eff 	.word	0x08004eff
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f07 	.word	0x08004f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fe fe2c 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef6:	e021      	b.n	8004f3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <UART_SetConfig+0x2f8>)
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004efc:	e01e      	b.n	8004f3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fe fdb7 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8004f02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f04:	e01a      	b.n	8004f3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f0c:	e016      	b.n	8004f3c <UART_SetConfig+0x308>
 8004f0e:	bf00      	nop
 8004f10:	cfff69f3 	.word	0xcfff69f3
 8004f14:	40008000 	.word	0x40008000
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40004400 	.word	0x40004400
 8004f24:	40004800 	.word	0x40004800
 8004f28:	40004c00 	.word	0x40004c00
 8004f2c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 812a 	beq.w	8005198 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	4a9e      	ldr	r2, [pc, #632]	@ (80051c4 <UART_SetConfig+0x590>)
 8004f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d305      	bcc.n	8004f74 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d903      	bls.n	8004f7c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f7a:	e10d      	b.n	8005198 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	2200      	movs	r2, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	60fa      	str	r2, [r7, #12]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	4a8e      	ldr	r2, [pc, #568]	@ (80051c4 <UART_SetConfig+0x590>)
 8004f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2200      	movs	r2, #0
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9e:	f7fb f98f 	bl	80002c0 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	020b      	lsls	r3, r1, #8
 8004fb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fb8:	0202      	lsls	r2, r0, #8
 8004fba:	6979      	ldr	r1, [r7, #20]
 8004fbc:	6849      	ldr	r1, [r1, #4]
 8004fbe:	0849      	lsrs	r1, r1, #1
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	eb12 0804 	adds.w	r8, r2, r4
 8004fca:	eb43 0905 	adc.w	r9, r3, r5
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	469a      	mov	sl, r3
 8004fd6:	4693      	mov	fp, r2
 8004fd8:	4652      	mov	r2, sl
 8004fda:	465b      	mov	r3, fp
 8004fdc:	4640      	mov	r0, r8
 8004fde:	4649      	mov	r1, r9
 8004fe0:	f7fb f96e 	bl	80002c0 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff2:	d308      	bcc.n	8005006 <UART_SetConfig+0x3d2>
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffa:	d204      	bcs.n	8005006 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	e0c8      	b.n	8005198 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800500c:	e0c4      	b.n	8005198 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005016:	d167      	bne.n	80050e8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005018:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800501c:	2b08      	cmp	r3, #8
 800501e:	d828      	bhi.n	8005072 <UART_SetConfig+0x43e>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <UART_SetConfig+0x3f4>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	0800505d 	.word	0x0800505d
 8005034:	08005073 	.word	0x08005073
 8005038:	08005063 	.word	0x08005063
 800503c:	08005073 	.word	0x08005073
 8005040:	08005073 	.word	0x08005073
 8005044:	08005073 	.word	0x08005073
 8005048:	0800506b 	.word	0x0800506b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7fe fd7e 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005052:	e014      	b.n	800507e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7fe fd90 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800505a:	e010      	b.n	800507e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800505c:	4b5a      	ldr	r3, [pc, #360]	@ (80051c8 <UART_SetConfig+0x594>)
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005060:	e00d      	b.n	800507e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005062:	f7fe fd05 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8005066:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005068:	e009      	b.n	800507e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005070:	e005      	b.n	800507e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800507c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8089 	beq.w	8005198 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	4a4e      	ldr	r2, [pc, #312]	@ (80051c4 <UART_SetConfig+0x590>)
 800508c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005090:	461a      	mov	r2, r3
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	fbb3 f3f2 	udiv	r3, r3, r2
 8005098:	005a      	lsls	r2, r3, #1
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	441a      	add	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b0f      	cmp	r3, #15
 80050b0:	d916      	bls.n	80050e0 <UART_SetConfig+0x4ac>
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d212      	bcs.n	80050e0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f023 030f 	bic.w	r3, r3, #15
 80050c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	8bfb      	ldrh	r3, [r7, #30]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	8bfa      	ldrh	r2, [r7, #30]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	e05b      	b.n	8005198 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050e6:	e057      	b.n	8005198 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d828      	bhi.n	8005142 <UART_SetConfig+0x50e>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <UART_SetConfig+0x4c4>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800512d 	.word	0x0800512d
 8005104:	08005143 	.word	0x08005143
 8005108:	08005133 	.word	0x08005133
 800510c:	08005143 	.word	0x08005143
 8005110:	08005143 	.word	0x08005143
 8005114:	08005143 	.word	0x08005143
 8005118:	0800513b 	.word	0x0800513b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7fe fd16 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005122:	e014      	b.n	800514e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7fe fd28 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8005128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800512a:	e010      	b.n	800514e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800512c:	4b26      	ldr	r3, [pc, #152]	@ (80051c8 <UART_SetConfig+0x594>)
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005130:	e00d      	b.n	800514e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005132:	f7fe fc9d 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005138:	e009      	b.n	800514e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800513a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005140:	e005      	b.n	800514e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800514c:	bf00      	nop
    }

    if (pclk != 0U)
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d021      	beq.n	8005198 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	4a1a      	ldr	r2, [pc, #104]	@ (80051c4 <UART_SetConfig+0x590>)
 800515a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515e:	461a      	mov	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	fbb3 f2f2 	udiv	r2, r3, r2
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	441a      	add	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	2b0f      	cmp	r3, #15
 800517c:	d909      	bls.n	8005192 <UART_SetConfig+0x55e>
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005184:	d205      	bcs.n	8005192 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	b29a      	uxth	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60da      	str	r2, [r3, #12]
 8005190:	e002      	b.n	8005198 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2201      	movs	r2, #1
 800519c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3730      	adds	r7, #48	@ 0x30
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051c2:	bf00      	nop
 80051c4:	08006780 	.word	0x08006780
 80051c8:	00f42400 	.word	0x00f42400

080051cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ca:	d10a      	bne.n	80052e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b098      	sub	sp, #96	@ 0x60
 8005314:	af02      	add	r7, sp, #8
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005320:	f7fb ff84 	bl	800122c <HAL_GetTick>
 8005324:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d12f      	bne.n	8005394 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533c:	2200      	movs	r2, #0
 800533e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f88e 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d022      	beq.n	8005394 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800535c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005362:	653b      	str	r3, [r7, #80]	@ 0x50
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536c:	647b      	str	r3, [r7, #68]	@ 0x44
 800536e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800537a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e6      	bne.n	800534e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e063      	b.n	800545c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d149      	bne.n	8005436 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053aa:	2200      	movs	r2, #0
 80053ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f857 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d03c      	beq.n	8005436 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053da:	633b      	str	r3, [r7, #48]	@ 0x30
 80053dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e6      	bne.n	80053bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	69b9      	ldr	r1, [r7, #24]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	617b      	str	r3, [r7, #20]
   return(result);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e012      	b.n	800545c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3758      	adds	r7, #88	@ 0x58
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005474:	e04f      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d04b      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fb fed5 	bl	800122c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <UART_WaitOnFlagUntilTimeout+0x30>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e04e      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d037      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b80      	cmp	r3, #128	@ 0x80
 80054aa:	d034      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d031      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d110      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2208      	movs	r2, #8
 80054c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f838 	bl	800553e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2208      	movs	r2, #8
 80054d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e029      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f0:	d111      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f81e 	bl	800553e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e00f      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	bf0c      	ite	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	2300      	movne	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	429a      	cmp	r2, r3
 8005532:	d0a0      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800553e:	b480      	push	{r7}
 8005540:	b095      	sub	sp, #84	@ 0x54
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005564:	643b      	str	r3, [r7, #64]	@ 0x40
 8005566:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800556a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3308      	adds	r3, #8
 800557e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	61fb      	str	r3, [r7, #28]
   return(result);
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e3      	bne.n	8005578 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d118      	bne.n	80055ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f023 0310 	bic.w	r3, r3, #16
 80055cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6979      	ldr	r1, [r7, #20]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	613b      	str	r3, [r7, #16]
   return(result);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055fe:	bf00      	nop
 8005600:	3754      	adds	r7, #84	@ 0x54
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UARTEx_DisableFifoMode+0x16>
 800561c:	2302      	movs	r3, #2
 800561e:	e027      	b.n	8005670 <HAL_UARTEx_DisableFifoMode+0x66>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	@ 0x24
 800562c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800564e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e02d      	b.n	80056f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	@ 0x24
 80056a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f84f 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e02d      	b.n	800576c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	@ 0x24
 800571c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f811 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005794:	e031      	b.n	80057fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005796:	2308      	movs	r3, #8
 8005798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579a:	2308      	movs	r3, #8
 800579c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	0e5b      	lsrs	r3, r3, #25
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	0f5b      	lsrs	r3, r3, #29
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	7b3a      	ldrb	r2, [r7, #12]
 80057c2:	4911      	ldr	r1, [pc, #68]	@ (8005808 <UARTEx_SetNbDataToProcess+0x94>)
 80057c4:	5c8a      	ldrb	r2, [r1, r2]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ca:	7b3a      	ldrb	r2, [r7, #12]
 80057cc:	490f      	ldr	r1, [pc, #60]	@ (800580c <UARTEx_SetNbDataToProcess+0x98>)
 80057ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	7b7a      	ldrb	r2, [r7, #13]
 80057e0:	4909      	ldr	r1, [pc, #36]	@ (8005808 <UARTEx_SetNbDataToProcess+0x94>)
 80057e2:	5c8a      	ldrb	r2, [r1, r2]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057e8:	7b7a      	ldrb	r2, [r7, #13]
 80057ea:	4908      	ldr	r1, [pc, #32]	@ (800580c <UARTEx_SetNbDataToProcess+0x98>)
 80057ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	08006798 	.word	0x08006798
 800580c:	080067a0 	.word	0x080067a0

08005810 <std>:
 8005810:	2300      	movs	r3, #0
 8005812:	b510      	push	{r4, lr}
 8005814:	4604      	mov	r4, r0
 8005816:	e9c0 3300 	strd	r3, r3, [r0]
 800581a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800581e:	6083      	str	r3, [r0, #8]
 8005820:	8181      	strh	r1, [r0, #12]
 8005822:	6643      	str	r3, [r0, #100]	@ 0x64
 8005824:	81c2      	strh	r2, [r0, #14]
 8005826:	6183      	str	r3, [r0, #24]
 8005828:	4619      	mov	r1, r3
 800582a:	2208      	movs	r2, #8
 800582c:	305c      	adds	r0, #92	@ 0x5c
 800582e:	f000 f9f9 	bl	8005c24 <memset>
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <std+0x58>)
 8005834:	6263      	str	r3, [r4, #36]	@ 0x24
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <std+0x5c>)
 8005838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <std+0x60>)
 800583c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <std+0x64>)
 8005840:	6323      	str	r3, [r4, #48]	@ 0x30
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <std+0x68>)
 8005844:	6224      	str	r4, [r4, #32]
 8005846:	429c      	cmp	r4, r3
 8005848:	d006      	beq.n	8005858 <std+0x48>
 800584a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800584e:	4294      	cmp	r4, r2
 8005850:	d002      	beq.n	8005858 <std+0x48>
 8005852:	33d0      	adds	r3, #208	@ 0xd0
 8005854:	429c      	cmp	r4, r3
 8005856:	d105      	bne.n	8005864 <std+0x54>
 8005858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005860:	f000 ba58 	b.w	8005d14 <__retarget_lock_init_recursive>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	08005a75 	.word	0x08005a75
 800586c:	08005a97 	.word	0x08005a97
 8005870:	08005acf 	.word	0x08005acf
 8005874:	08005af3 	.word	0x08005af3
 8005878:	200001e8 	.word	0x200001e8

0800587c <stdio_exit_handler>:
 800587c:	4a02      	ldr	r2, [pc, #8]	@ (8005888 <stdio_exit_handler+0xc>)
 800587e:	4903      	ldr	r1, [pc, #12]	@ (800588c <stdio_exit_handler+0x10>)
 8005880:	4803      	ldr	r0, [pc, #12]	@ (8005890 <stdio_exit_handler+0x14>)
 8005882:	f000 b869 	b.w	8005958 <_fwalk_sglue>
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c
 800588c:	080065b5 	.word	0x080065b5
 8005890:	2000001c 	.word	0x2000001c

08005894 <cleanup_stdio>:
 8005894:	6841      	ldr	r1, [r0, #4]
 8005896:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <cleanup_stdio+0x34>)
 8005898:	4299      	cmp	r1, r3
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	d001      	beq.n	80058a4 <cleanup_stdio+0x10>
 80058a0:	f000 fe88 	bl	80065b4 <_fflush_r>
 80058a4:	68a1      	ldr	r1, [r4, #8]
 80058a6:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <cleanup_stdio+0x38>)
 80058a8:	4299      	cmp	r1, r3
 80058aa:	d002      	beq.n	80058b2 <cleanup_stdio+0x1e>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fe81 	bl	80065b4 <_fflush_r>
 80058b2:	68e1      	ldr	r1, [r4, #12]
 80058b4:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <cleanup_stdio+0x3c>)
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d004      	beq.n	80058c4 <cleanup_stdio+0x30>
 80058ba:	4620      	mov	r0, r4
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f000 be78 	b.w	80065b4 <_fflush_r>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	200001e8 	.word	0x200001e8
 80058cc:	20000250 	.word	0x20000250
 80058d0:	200002b8 	.word	0x200002b8

080058d4 <global_stdio_init.part.0>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005904 <global_stdio_init.part.0+0x30>)
 80058d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005908 <global_stdio_init.part.0+0x34>)
 80058da:	4a0c      	ldr	r2, [pc, #48]	@ (800590c <global_stdio_init.part.0+0x38>)
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	4620      	mov	r0, r4
 80058e0:	2200      	movs	r2, #0
 80058e2:	2104      	movs	r1, #4
 80058e4:	f7ff ff94 	bl	8005810 <std>
 80058e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058ec:	2201      	movs	r2, #1
 80058ee:	2109      	movs	r1, #9
 80058f0:	f7ff ff8e 	bl	8005810 <std>
 80058f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058f8:	2202      	movs	r2, #2
 80058fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fe:	2112      	movs	r1, #18
 8005900:	f7ff bf86 	b.w	8005810 <std>
 8005904:	20000320 	.word	0x20000320
 8005908:	200001e8 	.word	0x200001e8
 800590c:	0800587d 	.word	0x0800587d

08005910 <__sfp_lock_acquire>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__sfp_lock_acquire+0x8>)
 8005912:	f000 ba00 	b.w	8005d16 <__retarget_lock_acquire_recursive>
 8005916:	bf00      	nop
 8005918:	20000329 	.word	0x20000329

0800591c <__sfp_lock_release>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__sfp_lock_release+0x8>)
 800591e:	f000 b9fb 	b.w	8005d18 <__retarget_lock_release_recursive>
 8005922:	bf00      	nop
 8005924:	20000329 	.word	0x20000329

08005928 <__sinit>:
 8005928:	b510      	push	{r4, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	f7ff fff0 	bl	8005910 <__sfp_lock_acquire>
 8005930:	6a23      	ldr	r3, [r4, #32]
 8005932:	b11b      	cbz	r3, 800593c <__sinit+0x14>
 8005934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005938:	f7ff bff0 	b.w	800591c <__sfp_lock_release>
 800593c:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <__sinit+0x28>)
 800593e:	6223      	str	r3, [r4, #32]
 8005940:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <__sinit+0x2c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f5      	bne.n	8005934 <__sinit+0xc>
 8005948:	f7ff ffc4 	bl	80058d4 <global_stdio_init.part.0>
 800594c:	e7f2      	b.n	8005934 <__sinit+0xc>
 800594e:	bf00      	nop
 8005950:	08005895 	.word	0x08005895
 8005954:	20000320 	.word	0x20000320

08005958 <_fwalk_sglue>:
 8005958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800595c:	4607      	mov	r7, r0
 800595e:	4688      	mov	r8, r1
 8005960:	4614      	mov	r4, r2
 8005962:	2600      	movs	r6, #0
 8005964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005968:	f1b9 0901 	subs.w	r9, r9, #1
 800596c:	d505      	bpl.n	800597a <_fwalk_sglue+0x22>
 800596e:	6824      	ldr	r4, [r4, #0]
 8005970:	2c00      	cmp	r4, #0
 8005972:	d1f7      	bne.n	8005964 <_fwalk_sglue+0xc>
 8005974:	4630      	mov	r0, r6
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d907      	bls.n	8005990 <_fwalk_sglue+0x38>
 8005980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005984:	3301      	adds	r3, #1
 8005986:	d003      	beq.n	8005990 <_fwalk_sglue+0x38>
 8005988:	4629      	mov	r1, r5
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	4306      	orrs	r6, r0
 8005990:	3568      	adds	r5, #104	@ 0x68
 8005992:	e7e9      	b.n	8005968 <_fwalk_sglue+0x10>

08005994 <iprintf>:
 8005994:	b40f      	push	{r0, r1, r2, r3}
 8005996:	b507      	push	{r0, r1, r2, lr}
 8005998:	4906      	ldr	r1, [pc, #24]	@ (80059b4 <iprintf+0x20>)
 800599a:	ab04      	add	r3, sp, #16
 800599c:	6808      	ldr	r0, [r1, #0]
 800599e:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a2:	6881      	ldr	r1, [r0, #8]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	f000 fadb 	bl	8005f60 <_vfiprintf_r>
 80059aa:	b003      	add	sp, #12
 80059ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b0:	b004      	add	sp, #16
 80059b2:	4770      	bx	lr
 80059b4:	20000018 	.word	0x20000018

080059b8 <_puts_r>:
 80059b8:	6a03      	ldr	r3, [r0, #32]
 80059ba:	b570      	push	{r4, r5, r6, lr}
 80059bc:	6884      	ldr	r4, [r0, #8]
 80059be:	4605      	mov	r5, r0
 80059c0:	460e      	mov	r6, r1
 80059c2:	b90b      	cbnz	r3, 80059c8 <_puts_r+0x10>
 80059c4:	f7ff ffb0 	bl	8005928 <__sinit>
 80059c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ca:	07db      	lsls	r3, r3, #31
 80059cc:	d405      	bmi.n	80059da <_puts_r+0x22>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	0598      	lsls	r0, r3, #22
 80059d2:	d402      	bmi.n	80059da <_puts_r+0x22>
 80059d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059d6:	f000 f99e 	bl	8005d16 <__retarget_lock_acquire_recursive>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	0719      	lsls	r1, r3, #28
 80059de:	d502      	bpl.n	80059e6 <_puts_r+0x2e>
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d135      	bne.n	8005a52 <_puts_r+0x9a>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 f8c5 	bl	8005b78 <__swsetup_r>
 80059ee:	b380      	cbz	r0, 8005a52 <_puts_r+0x9a>
 80059f0:	f04f 35ff 	mov.w	r5, #4294967295
 80059f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059f6:	07da      	lsls	r2, r3, #31
 80059f8:	d405      	bmi.n	8005a06 <_puts_r+0x4e>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	059b      	lsls	r3, r3, #22
 80059fe:	d402      	bmi.n	8005a06 <_puts_r+0x4e>
 8005a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a02:	f000 f989 	bl	8005d18 <__retarget_lock_release_recursive>
 8005a06:	4628      	mov	r0, r5
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da04      	bge.n	8005a18 <_puts_r+0x60>
 8005a0e:	69a2      	ldr	r2, [r4, #24]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	dc17      	bgt.n	8005a44 <_puts_r+0x8c>
 8005a14:	290a      	cmp	r1, #10
 8005a16:	d015      	beq.n	8005a44 <_puts_r+0x8c>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	7019      	strb	r1, [r3, #0]
 8005a20:	68a3      	ldr	r3, [r4, #8]
 8005a22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a26:	3b01      	subs	r3, #1
 8005a28:	60a3      	str	r3, [r4, #8]
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d1ed      	bne.n	8005a0a <_puts_r+0x52>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da11      	bge.n	8005a56 <_puts_r+0x9e>
 8005a32:	4622      	mov	r2, r4
 8005a34:	210a      	movs	r1, #10
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f85f 	bl	8005afa <__swbuf_r>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d0d7      	beq.n	80059f0 <_puts_r+0x38>
 8005a40:	250a      	movs	r5, #10
 8005a42:	e7d7      	b.n	80059f4 <_puts_r+0x3c>
 8005a44:	4622      	mov	r2, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f857 	bl	8005afa <__swbuf_r>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1e7      	bne.n	8005a20 <_puts_r+0x68>
 8005a50:	e7ce      	b.n	80059f0 <_puts_r+0x38>
 8005a52:	3e01      	subs	r6, #1
 8005a54:	e7e4      	b.n	8005a20 <_puts_r+0x68>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	6022      	str	r2, [r4, #0]
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e7ee      	b.n	8005a40 <_puts_r+0x88>
	...

08005a64 <puts>:
 8005a64:	4b02      	ldr	r3, [pc, #8]	@ (8005a70 <puts+0xc>)
 8005a66:	4601      	mov	r1, r0
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	f7ff bfa5 	b.w	80059b8 <_puts_r>
 8005a6e:	bf00      	nop
 8005a70:	20000018 	.word	0x20000018

08005a74 <__sread>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	460c      	mov	r4, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	f000 f8fc 	bl	8005c78 <_read_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	bfab      	itete	ge
 8005a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a86:	89a3      	ldrhlt	r3, [r4, #12]
 8005a88:	181b      	addge	r3, r3, r0
 8005a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a8e:	bfac      	ite	ge
 8005a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a92:	81a3      	strhlt	r3, [r4, #12]
 8005a94:	bd10      	pop	{r4, pc}

08005a96 <__swrite>:
 8005a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	898b      	ldrh	r3, [r1, #12]
 8005a9e:	05db      	lsls	r3, r3, #23
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	d505      	bpl.n	8005ab4 <__swrite+0x1e>
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	2302      	movs	r3, #2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f000 f8d0 	bl	8005c54 <_lseek_r>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	f000 b8e7 	b.w	8005c9c <_write_r>

08005ace <__sseek>:
 8005ace:	b510      	push	{r4, lr}
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad6:	f000 f8bd 	bl	8005c54 <_lseek_r>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	bf15      	itete	ne
 8005ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aea:	81a3      	strheq	r3, [r4, #12]
 8005aec:	bf18      	it	ne
 8005aee:	81a3      	strhne	r3, [r4, #12]
 8005af0:	bd10      	pop	{r4, pc}

08005af2 <__sclose>:
 8005af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af6:	f000 b89d 	b.w	8005c34 <_close_r>

08005afa <__swbuf_r>:
 8005afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afc:	460e      	mov	r6, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	4605      	mov	r5, r0
 8005b02:	b118      	cbz	r0, 8005b0c <__swbuf_r+0x12>
 8005b04:	6a03      	ldr	r3, [r0, #32]
 8005b06:	b90b      	cbnz	r3, 8005b0c <__swbuf_r+0x12>
 8005b08:	f7ff ff0e 	bl	8005928 <__sinit>
 8005b0c:	69a3      	ldr	r3, [r4, #24]
 8005b0e:	60a3      	str	r3, [r4, #8]
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	071a      	lsls	r2, r3, #28
 8005b14:	d501      	bpl.n	8005b1a <__swbuf_r+0x20>
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	b943      	cbnz	r3, 8005b2c <__swbuf_r+0x32>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f82b 	bl	8005b78 <__swsetup_r>
 8005b22:	b118      	cbz	r0, 8005b2c <__swbuf_r+0x32>
 8005b24:	f04f 37ff 	mov.w	r7, #4294967295
 8005b28:	4638      	mov	r0, r7
 8005b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	6922      	ldr	r2, [r4, #16]
 8005b30:	1a98      	subs	r0, r3, r2
 8005b32:	6963      	ldr	r3, [r4, #20]
 8005b34:	b2f6      	uxtb	r6, r6
 8005b36:	4283      	cmp	r3, r0
 8005b38:	4637      	mov	r7, r6
 8005b3a:	dc05      	bgt.n	8005b48 <__swbuf_r+0x4e>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fd38 	bl	80065b4 <_fflush_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d1ed      	bne.n	8005b24 <__swbuf_r+0x2a>
 8005b48:	68a3      	ldr	r3, [r4, #8]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	701e      	strb	r6, [r3, #0]
 8005b56:	6962      	ldr	r2, [r4, #20]
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d004      	beq.n	8005b68 <__swbuf_r+0x6e>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	07db      	lsls	r3, r3, #31
 8005b62:	d5e1      	bpl.n	8005b28 <__swbuf_r+0x2e>
 8005b64:	2e0a      	cmp	r6, #10
 8005b66:	d1df      	bne.n	8005b28 <__swbuf_r+0x2e>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 fd22 	bl	80065b4 <_fflush_r>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d0d9      	beq.n	8005b28 <__swbuf_r+0x2e>
 8005b74:	e7d6      	b.n	8005b24 <__swbuf_r+0x2a>
	...

08005b78 <__swsetup_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <__swsetup_r+0xa8>)
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	460c      	mov	r4, r1
 8005b82:	b118      	cbz	r0, 8005b8c <__swsetup_r+0x14>
 8005b84:	6a03      	ldr	r3, [r0, #32]
 8005b86:	b90b      	cbnz	r3, 8005b8c <__swsetup_r+0x14>
 8005b88:	f7ff fece 	bl	8005928 <__sinit>
 8005b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b90:	0719      	lsls	r1, r3, #28
 8005b92:	d422      	bmi.n	8005bda <__swsetup_r+0x62>
 8005b94:	06da      	lsls	r2, r3, #27
 8005b96:	d407      	bmi.n	8005ba8 <__swsetup_r+0x30>
 8005b98:	2209      	movs	r2, #9
 8005b9a:	602a      	str	r2, [r5, #0]
 8005b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba6:	e033      	b.n	8005c10 <__swsetup_r+0x98>
 8005ba8:	0758      	lsls	r0, r3, #29
 8005baa:	d512      	bpl.n	8005bd2 <__swsetup_r+0x5a>
 8005bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bae:	b141      	cbz	r1, 8005bc2 <__swsetup_r+0x4a>
 8005bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	d002      	beq.n	8005bbe <__swsetup_r+0x46>
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 f8af 	bl	8005d1c <_free_r>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f043 0308 	orr.w	r3, r3, #8
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	b94b      	cbnz	r3, 8005bf2 <__swsetup_r+0x7a>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be8:	d003      	beq.n	8005bf2 <__swsetup_r+0x7a>
 8005bea:	4621      	mov	r1, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 fd2f 	bl	8006650 <__smakebuf_r>
 8005bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf6:	f013 0201 	ands.w	r2, r3, #1
 8005bfa:	d00a      	beq.n	8005c12 <__swsetup_r+0x9a>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	60a2      	str	r2, [r4, #8]
 8005c00:	6962      	ldr	r2, [r4, #20]
 8005c02:	4252      	negs	r2, r2
 8005c04:	61a2      	str	r2, [r4, #24]
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	b942      	cbnz	r2, 8005c1c <__swsetup_r+0xa4>
 8005c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c0e:	d1c5      	bne.n	8005b9c <__swsetup_r+0x24>
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	0799      	lsls	r1, r3, #30
 8005c14:	bf58      	it	pl
 8005c16:	6962      	ldrpl	r2, [r4, #20]
 8005c18:	60a2      	str	r2, [r4, #8]
 8005c1a:	e7f4      	b.n	8005c06 <__swsetup_r+0x8e>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7f7      	b.n	8005c10 <__swsetup_r+0x98>
 8005c20:	20000018 	.word	0x20000018

08005c24 <memset>:
 8005c24:	4402      	add	r2, r0
 8005c26:	4603      	mov	r3, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <_close_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	@ (8005c50 <_close_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fb f8cd 	bl	8000dde <_close>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_close_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_close_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000324 	.word	0x20000324

08005c54 <_lseek_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d07      	ldr	r5, [pc, #28]	@ (8005c74 <_lseek_r+0x20>)
 8005c58:	4604      	mov	r4, r0
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	602a      	str	r2, [r5, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f7fb f8e2 	bl	8000e2c <_lseek>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_lseek_r+0x1e>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_lseek_r+0x1e>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20000324 	.word	0x20000324

08005c78 <_read_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d07      	ldr	r5, [pc, #28]	@ (8005c98 <_read_r+0x20>)
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4611      	mov	r1, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fb f870 	bl	8000d6c <_read>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_read_r+0x1e>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_read_r+0x1e>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20000324 	.word	0x20000324

08005c9c <_write_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d07      	ldr	r5, [pc, #28]	@ (8005cbc <_write_r+0x20>)
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	4608      	mov	r0, r1
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	602a      	str	r2, [r5, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f7fb f87b 	bl	8000da6 <_write>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_write_r+0x1e>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_write_r+0x1e>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	20000324 	.word	0x20000324

08005cc0 <__errno>:
 8005cc0:	4b01      	ldr	r3, [pc, #4]	@ (8005cc8 <__errno+0x8>)
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	20000018 	.word	0x20000018

08005ccc <__libc_init_array>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4d0d      	ldr	r5, [pc, #52]	@ (8005d04 <__libc_init_array+0x38>)
 8005cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005d08 <__libc_init_array+0x3c>)
 8005cd2:	1b64      	subs	r4, r4, r5
 8005cd4:	10a4      	asrs	r4, r4, #2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	42a6      	cmp	r6, r4
 8005cda:	d109      	bne.n	8005cf0 <__libc_init_array+0x24>
 8005cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8005d0c <__libc_init_array+0x40>)
 8005cde:	4c0c      	ldr	r4, [pc, #48]	@ (8005d10 <__libc_init_array+0x44>)
 8005ce0:	f000 fd24 	bl	800672c <_init>
 8005ce4:	1b64      	subs	r4, r4, r5
 8005ce6:	10a4      	asrs	r4, r4, #2
 8005ce8:	2600      	movs	r6, #0
 8005cea:	42a6      	cmp	r6, r4
 8005cec:	d105      	bne.n	8005cfa <__libc_init_array+0x2e>
 8005cee:	bd70      	pop	{r4, r5, r6, pc}
 8005cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf4:	4798      	blx	r3
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7ee      	b.n	8005cd8 <__libc_init_array+0xc>
 8005cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfe:	4798      	blx	r3
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7f2      	b.n	8005cea <__libc_init_array+0x1e>
 8005d04:	080067e4 	.word	0x080067e4
 8005d08:	080067e4 	.word	0x080067e4
 8005d0c:	080067e4 	.word	0x080067e4
 8005d10:	080067e8 	.word	0x080067e8

08005d14 <__retarget_lock_init_recursive>:
 8005d14:	4770      	bx	lr

08005d16 <__retarget_lock_acquire_recursive>:
 8005d16:	4770      	bx	lr

08005d18 <__retarget_lock_release_recursive>:
 8005d18:	4770      	bx	lr
	...

08005d1c <_free_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4605      	mov	r5, r0
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d041      	beq.n	8005da8 <_free_r+0x8c>
 8005d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d28:	1f0c      	subs	r4, r1, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfb8      	it	lt
 8005d2e:	18e4      	addlt	r4, r4, r3
 8005d30:	f000 f8e0 	bl	8005ef4 <__malloc_lock>
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <_free_r+0x90>)
 8005d36:	6813      	ldr	r3, [r2, #0]
 8005d38:	b933      	cbnz	r3, 8005d48 <_free_r+0x2c>
 8005d3a:	6063      	str	r3, [r4, #4]
 8005d3c:	6014      	str	r4, [r2, #0]
 8005d3e:	4628      	mov	r0, r5
 8005d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d44:	f000 b8dc 	b.w	8005f00 <__malloc_unlock>
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d908      	bls.n	8005d5e <_free_r+0x42>
 8005d4c:	6820      	ldr	r0, [r4, #0]
 8005d4e:	1821      	adds	r1, r4, r0
 8005d50:	428b      	cmp	r3, r1
 8005d52:	bf01      	itttt	eq
 8005d54:	6819      	ldreq	r1, [r3, #0]
 8005d56:	685b      	ldreq	r3, [r3, #4]
 8005d58:	1809      	addeq	r1, r1, r0
 8005d5a:	6021      	streq	r1, [r4, #0]
 8005d5c:	e7ed      	b.n	8005d3a <_free_r+0x1e>
 8005d5e:	461a      	mov	r2, r3
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b10b      	cbz	r3, 8005d68 <_free_r+0x4c>
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d9fa      	bls.n	8005d5e <_free_r+0x42>
 8005d68:	6811      	ldr	r1, [r2, #0]
 8005d6a:	1850      	adds	r0, r2, r1
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d10b      	bne.n	8005d88 <_free_r+0x6c>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	4401      	add	r1, r0
 8005d74:	1850      	adds	r0, r2, r1
 8005d76:	4283      	cmp	r3, r0
 8005d78:	6011      	str	r1, [r2, #0]
 8005d7a:	d1e0      	bne.n	8005d3e <_free_r+0x22>
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	6053      	str	r3, [r2, #4]
 8005d82:	4408      	add	r0, r1
 8005d84:	6010      	str	r0, [r2, #0]
 8005d86:	e7da      	b.n	8005d3e <_free_r+0x22>
 8005d88:	d902      	bls.n	8005d90 <_free_r+0x74>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	602b      	str	r3, [r5, #0]
 8005d8e:	e7d6      	b.n	8005d3e <_free_r+0x22>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	1821      	adds	r1, r4, r0
 8005d94:	428b      	cmp	r3, r1
 8005d96:	bf04      	itt	eq
 8005d98:	6819      	ldreq	r1, [r3, #0]
 8005d9a:	685b      	ldreq	r3, [r3, #4]
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	bf04      	itt	eq
 8005da0:	1809      	addeq	r1, r1, r0
 8005da2:	6021      	streq	r1, [r4, #0]
 8005da4:	6054      	str	r4, [r2, #4]
 8005da6:	e7ca      	b.n	8005d3e <_free_r+0x22>
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
 8005daa:	bf00      	nop
 8005dac:	20000330 	.word	0x20000330

08005db0 <sbrk_aligned>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4e0f      	ldr	r6, [pc, #60]	@ (8005df0 <sbrk_aligned+0x40>)
 8005db4:	460c      	mov	r4, r1
 8005db6:	6831      	ldr	r1, [r6, #0]
 8005db8:	4605      	mov	r5, r0
 8005dba:	b911      	cbnz	r1, 8005dc2 <sbrk_aligned+0x12>
 8005dbc:	f000 fca6 	bl	800670c <_sbrk_r>
 8005dc0:	6030      	str	r0, [r6, #0]
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 fca1 	bl	800670c <_sbrk_r>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d103      	bne.n	8005dd6 <sbrk_aligned+0x26>
 8005dce:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	1cc4      	adds	r4, r0, #3
 8005dd8:	f024 0403 	bic.w	r4, r4, #3
 8005ddc:	42a0      	cmp	r0, r4
 8005dde:	d0f8      	beq.n	8005dd2 <sbrk_aligned+0x22>
 8005de0:	1a21      	subs	r1, r4, r0
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 fc92 	bl	800670c <_sbrk_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d1f2      	bne.n	8005dd2 <sbrk_aligned+0x22>
 8005dec:	e7ef      	b.n	8005dce <sbrk_aligned+0x1e>
 8005dee:	bf00      	nop
 8005df0:	2000032c 	.word	0x2000032c

08005df4 <_malloc_r>:
 8005df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df8:	1ccd      	adds	r5, r1, #3
 8005dfa:	f025 0503 	bic.w	r5, r5, #3
 8005dfe:	3508      	adds	r5, #8
 8005e00:	2d0c      	cmp	r5, #12
 8005e02:	bf38      	it	cc
 8005e04:	250c      	movcc	r5, #12
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	4606      	mov	r6, r0
 8005e0a:	db01      	blt.n	8005e10 <_malloc_r+0x1c>
 8005e0c:	42a9      	cmp	r1, r5
 8005e0e:	d904      	bls.n	8005e1a <_malloc_r+0x26>
 8005e10:	230c      	movs	r3, #12
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	2000      	movs	r0, #0
 8005e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef0 <_malloc_r+0xfc>
 8005e1e:	f000 f869 	bl	8005ef4 <__malloc_lock>
 8005e22:	f8d8 3000 	ldr.w	r3, [r8]
 8005e26:	461c      	mov	r4, r3
 8005e28:	bb44      	cbnz	r4, 8005e7c <_malloc_r+0x88>
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff ffbf 	bl	8005db0 <sbrk_aligned>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	4604      	mov	r4, r0
 8005e36:	d158      	bne.n	8005eea <_malloc_r+0xf6>
 8005e38:	f8d8 4000 	ldr.w	r4, [r8]
 8005e3c:	4627      	mov	r7, r4
 8005e3e:	2f00      	cmp	r7, #0
 8005e40:	d143      	bne.n	8005eca <_malloc_r+0xd6>
 8005e42:	2c00      	cmp	r4, #0
 8005e44:	d04b      	beq.n	8005ede <_malloc_r+0xea>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	eb04 0903 	add.w	r9, r4, r3
 8005e50:	f000 fc5c 	bl	800670c <_sbrk_r>
 8005e54:	4581      	cmp	r9, r0
 8005e56:	d142      	bne.n	8005ede <_malloc_r+0xea>
 8005e58:	6821      	ldr	r1, [r4, #0]
 8005e5a:	1a6d      	subs	r5, r5, r1
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7ff ffa6 	bl	8005db0 <sbrk_aligned>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d03a      	beq.n	8005ede <_malloc_r+0xea>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	442b      	add	r3, r5
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	bb62      	cbnz	r2, 8005ed0 <_malloc_r+0xdc>
 8005e76:	f8c8 7000 	str.w	r7, [r8]
 8005e7a:	e00f      	b.n	8005e9c <_malloc_r+0xa8>
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	1b52      	subs	r2, r2, r5
 8005e80:	d420      	bmi.n	8005ec4 <_malloc_r+0xd0>
 8005e82:	2a0b      	cmp	r2, #11
 8005e84:	d917      	bls.n	8005eb6 <_malloc_r+0xc2>
 8005e86:	1961      	adds	r1, r4, r5
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	6025      	str	r5, [r4, #0]
 8005e8c:	bf18      	it	ne
 8005e8e:	6059      	strne	r1, [r3, #4]
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	bf08      	it	eq
 8005e94:	f8c8 1000 	streq.w	r1, [r8]
 8005e98:	5162      	str	r2, [r4, r5]
 8005e9a:	604b      	str	r3, [r1, #4]
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f000 f82f 	bl	8005f00 <__malloc_unlock>
 8005ea2:	f104 000b 	add.w	r0, r4, #11
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	f020 0007 	bic.w	r0, r0, #7
 8005eac:	1ac2      	subs	r2, r0, r3
 8005eae:	bf1c      	itt	ne
 8005eb0:	1a1b      	subne	r3, r3, r0
 8005eb2:	50a3      	strne	r3, [r4, r2]
 8005eb4:	e7af      	b.n	8005e16 <_malloc_r+0x22>
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	bf0c      	ite	eq
 8005ebc:	f8c8 2000 	streq.w	r2, [r8]
 8005ec0:	605a      	strne	r2, [r3, #4]
 8005ec2:	e7eb      	b.n	8005e9c <_malloc_r+0xa8>
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	6864      	ldr	r4, [r4, #4]
 8005ec8:	e7ae      	b.n	8005e28 <_malloc_r+0x34>
 8005eca:	463c      	mov	r4, r7
 8005ecc:	687f      	ldr	r7, [r7, #4]
 8005ece:	e7b6      	b.n	8005e3e <_malloc_r+0x4a>
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d1fb      	bne.n	8005ed0 <_malloc_r+0xdc>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6053      	str	r3, [r2, #4]
 8005edc:	e7de      	b.n	8005e9c <_malloc_r+0xa8>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	6033      	str	r3, [r6, #0]
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f80c 	bl	8005f00 <__malloc_unlock>
 8005ee8:	e794      	b.n	8005e14 <_malloc_r+0x20>
 8005eea:	6005      	str	r5, [r0, #0]
 8005eec:	e7d6      	b.n	8005e9c <_malloc_r+0xa8>
 8005eee:	bf00      	nop
 8005ef0:	20000330 	.word	0x20000330

08005ef4 <__malloc_lock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	@ (8005efc <__malloc_lock+0x8>)
 8005ef6:	f7ff bf0e 	b.w	8005d16 <__retarget_lock_acquire_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000328 	.word	0x20000328

08005f00 <__malloc_unlock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	@ (8005f08 <__malloc_unlock+0x8>)
 8005f02:	f7ff bf09 	b.w	8005d18 <__retarget_lock_release_recursive>
 8005f06:	bf00      	nop
 8005f08:	20000328 	.word	0x20000328

08005f0c <__sfputc_r>:
 8005f0c:	6893      	ldr	r3, [r2, #8]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	b410      	push	{r4}
 8005f14:	6093      	str	r3, [r2, #8]
 8005f16:	da08      	bge.n	8005f2a <__sfputc_r+0x1e>
 8005f18:	6994      	ldr	r4, [r2, #24]
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	db01      	blt.n	8005f22 <__sfputc_r+0x16>
 8005f1e:	290a      	cmp	r1, #10
 8005f20:	d103      	bne.n	8005f2a <__sfputc_r+0x1e>
 8005f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f26:	f7ff bde8 	b.w	8005afa <__swbuf_r>
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	1c58      	adds	r0, r3, #1
 8005f2e:	6010      	str	r0, [r2, #0]
 8005f30:	7019      	strb	r1, [r3, #0]
 8005f32:	4608      	mov	r0, r1
 8005f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <__sfputs_r>:
 8005f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	460f      	mov	r7, r1
 8005f40:	4614      	mov	r4, r2
 8005f42:	18d5      	adds	r5, r2, r3
 8005f44:	42ac      	cmp	r4, r5
 8005f46:	d101      	bne.n	8005f4c <__sfputs_r+0x12>
 8005f48:	2000      	movs	r0, #0
 8005f4a:	e007      	b.n	8005f5c <__sfputs_r+0x22>
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	463a      	mov	r2, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7ff ffda 	bl	8005f0c <__sfputc_r>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d1f3      	bne.n	8005f44 <__sfputs_r+0xa>
 8005f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f60 <_vfiprintf_r>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	460d      	mov	r5, r1
 8005f66:	b09d      	sub	sp, #116	@ 0x74
 8005f68:	4614      	mov	r4, r2
 8005f6a:	4698      	mov	r8, r3
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	b118      	cbz	r0, 8005f78 <_vfiprintf_r+0x18>
 8005f70:	6a03      	ldr	r3, [r0, #32]
 8005f72:	b90b      	cbnz	r3, 8005f78 <_vfiprintf_r+0x18>
 8005f74:	f7ff fcd8 	bl	8005928 <__sinit>
 8005f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f7a:	07d9      	lsls	r1, r3, #31
 8005f7c:	d405      	bmi.n	8005f8a <_vfiprintf_r+0x2a>
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	059a      	lsls	r2, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_vfiprintf_r+0x2a>
 8005f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f86:	f7ff fec6 	bl	8005d16 <__retarget_lock_acquire_recursive>
 8005f8a:	89ab      	ldrh	r3, [r5, #12]
 8005f8c:	071b      	lsls	r3, r3, #28
 8005f8e:	d501      	bpl.n	8005f94 <_vfiprintf_r+0x34>
 8005f90:	692b      	ldr	r3, [r5, #16]
 8005f92:	b99b      	cbnz	r3, 8005fbc <_vfiprintf_r+0x5c>
 8005f94:	4629      	mov	r1, r5
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7ff fdee 	bl	8005b78 <__swsetup_r>
 8005f9c:	b170      	cbz	r0, 8005fbc <_vfiprintf_r+0x5c>
 8005f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fa0:	07dc      	lsls	r4, r3, #31
 8005fa2:	d504      	bpl.n	8005fae <_vfiprintf_r+0x4e>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	b01d      	add	sp, #116	@ 0x74
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	0598      	lsls	r0, r3, #22
 8005fb2:	d4f7      	bmi.n	8005fa4 <_vfiprintf_r+0x44>
 8005fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fb6:	f7ff feaf 	bl	8005d18 <__retarget_lock_release_recursive>
 8005fba:	e7f3      	b.n	8005fa4 <_vfiprintf_r+0x44>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fca:	2330      	movs	r3, #48	@ 0x30
 8005fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800617c <_vfiprintf_r+0x21c>
 8005fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fd4:	f04f 0901 	mov.w	r9, #1
 8005fd8:	4623      	mov	r3, r4
 8005fda:	469a      	mov	sl, r3
 8005fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fe0:	b10a      	cbz	r2, 8005fe6 <_vfiprintf_r+0x86>
 8005fe2:	2a25      	cmp	r2, #37	@ 0x25
 8005fe4:	d1f9      	bne.n	8005fda <_vfiprintf_r+0x7a>
 8005fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fea:	d00b      	beq.n	8006004 <_vfiprintf_r+0xa4>
 8005fec:	465b      	mov	r3, fp
 8005fee:	4622      	mov	r2, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7ff ffa1 	bl	8005f3a <__sfputs_r>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	f000 80a7 	beq.w	800614c <_vfiprintf_r+0x1ec>
 8005ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006000:	445a      	add	r2, fp
 8006002:	9209      	str	r2, [sp, #36]	@ 0x24
 8006004:	f89a 3000 	ldrb.w	r3, [sl]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 809f 	beq.w	800614c <_vfiprintf_r+0x1ec>
 800600e:	2300      	movs	r3, #0
 8006010:	f04f 32ff 	mov.w	r2, #4294967295
 8006014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006018:	f10a 0a01 	add.w	sl, sl, #1
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	9307      	str	r3, [sp, #28]
 8006020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006024:	931a      	str	r3, [sp, #104]	@ 0x68
 8006026:	4654      	mov	r4, sl
 8006028:	2205      	movs	r2, #5
 800602a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602e:	4853      	ldr	r0, [pc, #332]	@ (800617c <_vfiprintf_r+0x21c>)
 8006030:	f7fa f8f6 	bl	8000220 <memchr>
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	b9d8      	cbnz	r0, 8006070 <_vfiprintf_r+0x110>
 8006038:	06d1      	lsls	r1, r2, #27
 800603a:	bf44      	itt	mi
 800603c:	2320      	movmi	r3, #32
 800603e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006042:	0713      	lsls	r3, r2, #28
 8006044:	bf44      	itt	mi
 8006046:	232b      	movmi	r3, #43	@ 0x2b
 8006048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800604c:	f89a 3000 	ldrb.w	r3, [sl]
 8006050:	2b2a      	cmp	r3, #42	@ 0x2a
 8006052:	d015      	beq.n	8006080 <_vfiprintf_r+0x120>
 8006054:	9a07      	ldr	r2, [sp, #28]
 8006056:	4654      	mov	r4, sl
 8006058:	2000      	movs	r0, #0
 800605a:	f04f 0c0a 	mov.w	ip, #10
 800605e:	4621      	mov	r1, r4
 8006060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006064:	3b30      	subs	r3, #48	@ 0x30
 8006066:	2b09      	cmp	r3, #9
 8006068:	d94b      	bls.n	8006102 <_vfiprintf_r+0x1a2>
 800606a:	b1b0      	cbz	r0, 800609a <_vfiprintf_r+0x13a>
 800606c:	9207      	str	r2, [sp, #28]
 800606e:	e014      	b.n	800609a <_vfiprintf_r+0x13a>
 8006070:	eba0 0308 	sub.w	r3, r0, r8
 8006074:	fa09 f303 	lsl.w	r3, r9, r3
 8006078:	4313      	orrs	r3, r2
 800607a:	9304      	str	r3, [sp, #16]
 800607c:	46a2      	mov	sl, r4
 800607e:	e7d2      	b.n	8006026 <_vfiprintf_r+0xc6>
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	1d19      	adds	r1, r3, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	9103      	str	r1, [sp, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	bfbb      	ittet	lt
 800608c:	425b      	neglt	r3, r3
 800608e:	f042 0202 	orrlt.w	r2, r2, #2
 8006092:	9307      	strge	r3, [sp, #28]
 8006094:	9307      	strlt	r3, [sp, #28]
 8006096:	bfb8      	it	lt
 8006098:	9204      	strlt	r2, [sp, #16]
 800609a:	7823      	ldrb	r3, [r4, #0]
 800609c:	2b2e      	cmp	r3, #46	@ 0x2e
 800609e:	d10a      	bne.n	80060b6 <_vfiprintf_r+0x156>
 80060a0:	7863      	ldrb	r3, [r4, #1]
 80060a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80060a4:	d132      	bne.n	800610c <_vfiprintf_r+0x1ac>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	9203      	str	r2, [sp, #12]
 80060ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060b2:	3402      	adds	r4, #2
 80060b4:	9305      	str	r3, [sp, #20]
 80060b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800618c <_vfiprintf_r+0x22c>
 80060ba:	7821      	ldrb	r1, [r4, #0]
 80060bc:	2203      	movs	r2, #3
 80060be:	4650      	mov	r0, sl
 80060c0:	f7fa f8ae 	bl	8000220 <memchr>
 80060c4:	b138      	cbz	r0, 80060d6 <_vfiprintf_r+0x176>
 80060c6:	9b04      	ldr	r3, [sp, #16]
 80060c8:	eba0 000a 	sub.w	r0, r0, sl
 80060cc:	2240      	movs	r2, #64	@ 0x40
 80060ce:	4082      	lsls	r2, r0
 80060d0:	4313      	orrs	r3, r2
 80060d2:	3401      	adds	r4, #1
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060da:	4829      	ldr	r0, [pc, #164]	@ (8006180 <_vfiprintf_r+0x220>)
 80060dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060e0:	2206      	movs	r2, #6
 80060e2:	f7fa f89d 	bl	8000220 <memchr>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d03f      	beq.n	800616a <_vfiprintf_r+0x20a>
 80060ea:	4b26      	ldr	r3, [pc, #152]	@ (8006184 <_vfiprintf_r+0x224>)
 80060ec:	bb1b      	cbnz	r3, 8006136 <_vfiprintf_r+0x1d6>
 80060ee:	9b03      	ldr	r3, [sp, #12]
 80060f0:	3307      	adds	r3, #7
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	3308      	adds	r3, #8
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060fc:	443b      	add	r3, r7
 80060fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006100:	e76a      	b.n	8005fd8 <_vfiprintf_r+0x78>
 8006102:	fb0c 3202 	mla	r2, ip, r2, r3
 8006106:	460c      	mov	r4, r1
 8006108:	2001      	movs	r0, #1
 800610a:	e7a8      	b.n	800605e <_vfiprintf_r+0xfe>
 800610c:	2300      	movs	r3, #0
 800610e:	3401      	adds	r4, #1
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	4619      	mov	r1, r3
 8006114:	f04f 0c0a 	mov.w	ip, #10
 8006118:	4620      	mov	r0, r4
 800611a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800611e:	3a30      	subs	r2, #48	@ 0x30
 8006120:	2a09      	cmp	r2, #9
 8006122:	d903      	bls.n	800612c <_vfiprintf_r+0x1cc>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0c6      	beq.n	80060b6 <_vfiprintf_r+0x156>
 8006128:	9105      	str	r1, [sp, #20]
 800612a:	e7c4      	b.n	80060b6 <_vfiprintf_r+0x156>
 800612c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006130:	4604      	mov	r4, r0
 8006132:	2301      	movs	r3, #1
 8006134:	e7f0      	b.n	8006118 <_vfiprintf_r+0x1b8>
 8006136:	ab03      	add	r3, sp, #12
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	462a      	mov	r2, r5
 800613c:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <_vfiprintf_r+0x228>)
 800613e:	a904      	add	r1, sp, #16
 8006140:	4630      	mov	r0, r6
 8006142:	f3af 8000 	nop.w
 8006146:	4607      	mov	r7, r0
 8006148:	1c78      	adds	r0, r7, #1
 800614a:	d1d6      	bne.n	80060fa <_vfiprintf_r+0x19a>
 800614c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800614e:	07d9      	lsls	r1, r3, #31
 8006150:	d405      	bmi.n	800615e <_vfiprintf_r+0x1fe>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	059a      	lsls	r2, r3, #22
 8006156:	d402      	bmi.n	800615e <_vfiprintf_r+0x1fe>
 8006158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800615a:	f7ff fddd 	bl	8005d18 <__retarget_lock_release_recursive>
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	065b      	lsls	r3, r3, #25
 8006162:	f53f af1f 	bmi.w	8005fa4 <_vfiprintf_r+0x44>
 8006166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006168:	e71e      	b.n	8005fa8 <_vfiprintf_r+0x48>
 800616a:	ab03      	add	r3, sp, #12
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	462a      	mov	r2, r5
 8006170:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <_vfiprintf_r+0x228>)
 8006172:	a904      	add	r1, sp, #16
 8006174:	4630      	mov	r0, r6
 8006176:	f000 f879 	bl	800626c <_printf_i>
 800617a:	e7e4      	b.n	8006146 <_vfiprintf_r+0x1e6>
 800617c:	080067a8 	.word	0x080067a8
 8006180:	080067b2 	.word	0x080067b2
 8006184:	00000000 	.word	0x00000000
 8006188:	08005f3b 	.word	0x08005f3b
 800618c:	080067ae 	.word	0x080067ae

08006190 <_printf_common>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	4616      	mov	r6, r2
 8006196:	4698      	mov	r8, r3
 8006198:	688a      	ldr	r2, [r1, #8]
 800619a:	690b      	ldr	r3, [r1, #16]
 800619c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bfb8      	it	lt
 80061a4:	4613      	movlt	r3, r2
 80061a6:	6033      	str	r3, [r6, #0]
 80061a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061ac:	4607      	mov	r7, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	b10a      	cbz	r2, 80061b6 <_printf_common+0x26>
 80061b2:	3301      	adds	r3, #1
 80061b4:	6033      	str	r3, [r6, #0]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	0699      	lsls	r1, r3, #26
 80061ba:	bf42      	ittt	mi
 80061bc:	6833      	ldrmi	r3, [r6, #0]
 80061be:	3302      	addmi	r3, #2
 80061c0:	6033      	strmi	r3, [r6, #0]
 80061c2:	6825      	ldr	r5, [r4, #0]
 80061c4:	f015 0506 	ands.w	r5, r5, #6
 80061c8:	d106      	bne.n	80061d8 <_printf_common+0x48>
 80061ca:	f104 0a19 	add.w	sl, r4, #25
 80061ce:	68e3      	ldr	r3, [r4, #12]
 80061d0:	6832      	ldr	r2, [r6, #0]
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	dc26      	bgt.n	8006226 <_printf_common+0x96>
 80061d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	3b00      	subs	r3, #0
 80061e0:	bf18      	it	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	0692      	lsls	r2, r2, #26
 80061e6:	d42b      	bmi.n	8006240 <_printf_common+0xb0>
 80061e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061ec:	4641      	mov	r1, r8
 80061ee:	4638      	mov	r0, r7
 80061f0:	47c8      	blx	r9
 80061f2:	3001      	adds	r0, #1
 80061f4:	d01e      	beq.n	8006234 <_printf_common+0xa4>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	6922      	ldr	r2, [r4, #16]
 80061fa:	f003 0306 	and.w	r3, r3, #6
 80061fe:	2b04      	cmp	r3, #4
 8006200:	bf02      	ittt	eq
 8006202:	68e5      	ldreq	r5, [r4, #12]
 8006204:	6833      	ldreq	r3, [r6, #0]
 8006206:	1aed      	subeq	r5, r5, r3
 8006208:	68a3      	ldr	r3, [r4, #8]
 800620a:	bf0c      	ite	eq
 800620c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006210:	2500      	movne	r5, #0
 8006212:	4293      	cmp	r3, r2
 8006214:	bfc4      	itt	gt
 8006216:	1a9b      	subgt	r3, r3, r2
 8006218:	18ed      	addgt	r5, r5, r3
 800621a:	2600      	movs	r6, #0
 800621c:	341a      	adds	r4, #26
 800621e:	42b5      	cmp	r5, r6
 8006220:	d11a      	bne.n	8006258 <_printf_common+0xc8>
 8006222:	2000      	movs	r0, #0
 8006224:	e008      	b.n	8006238 <_printf_common+0xa8>
 8006226:	2301      	movs	r3, #1
 8006228:	4652      	mov	r2, sl
 800622a:	4641      	mov	r1, r8
 800622c:	4638      	mov	r0, r7
 800622e:	47c8      	blx	r9
 8006230:	3001      	adds	r0, #1
 8006232:	d103      	bne.n	800623c <_printf_common+0xac>
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	3501      	adds	r5, #1
 800623e:	e7c6      	b.n	80061ce <_printf_common+0x3e>
 8006240:	18e1      	adds	r1, r4, r3
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	2030      	movs	r0, #48	@ 0x30
 8006246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800624a:	4422      	add	r2, r4
 800624c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006254:	3302      	adds	r3, #2
 8006256:	e7c7      	b.n	80061e8 <_printf_common+0x58>
 8006258:	2301      	movs	r3, #1
 800625a:	4622      	mov	r2, r4
 800625c:	4641      	mov	r1, r8
 800625e:	4638      	mov	r0, r7
 8006260:	47c8      	blx	r9
 8006262:	3001      	adds	r0, #1
 8006264:	d0e6      	beq.n	8006234 <_printf_common+0xa4>
 8006266:	3601      	adds	r6, #1
 8006268:	e7d9      	b.n	800621e <_printf_common+0x8e>
	...

0800626c <_printf_i>:
 800626c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	7e0f      	ldrb	r7, [r1, #24]
 8006272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006274:	2f78      	cmp	r7, #120	@ 0x78
 8006276:	4691      	mov	r9, r2
 8006278:	4680      	mov	r8, r0
 800627a:	460c      	mov	r4, r1
 800627c:	469a      	mov	sl, r3
 800627e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006282:	d807      	bhi.n	8006294 <_printf_i+0x28>
 8006284:	2f62      	cmp	r7, #98	@ 0x62
 8006286:	d80a      	bhi.n	800629e <_printf_i+0x32>
 8006288:	2f00      	cmp	r7, #0
 800628a:	f000 80d2 	beq.w	8006432 <_printf_i+0x1c6>
 800628e:	2f58      	cmp	r7, #88	@ 0x58
 8006290:	f000 80b9 	beq.w	8006406 <_printf_i+0x19a>
 8006294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800629c:	e03a      	b.n	8006314 <_printf_i+0xa8>
 800629e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062a2:	2b15      	cmp	r3, #21
 80062a4:	d8f6      	bhi.n	8006294 <_printf_i+0x28>
 80062a6:	a101      	add	r1, pc, #4	@ (adr r1, 80062ac <_printf_i+0x40>)
 80062a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006319 	.word	0x08006319
 80062b4:	08006295 	.word	0x08006295
 80062b8:	08006295 	.word	0x08006295
 80062bc:	08006295 	.word	0x08006295
 80062c0:	08006295 	.word	0x08006295
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006295 	.word	0x08006295
 80062cc:	08006295 	.word	0x08006295
 80062d0:	08006295 	.word	0x08006295
 80062d4:	08006295 	.word	0x08006295
 80062d8:	08006419 	.word	0x08006419
 80062dc:	08006343 	.word	0x08006343
 80062e0:	080063d3 	.word	0x080063d3
 80062e4:	08006295 	.word	0x08006295
 80062e8:	08006295 	.word	0x08006295
 80062ec:	0800643b 	.word	0x0800643b
 80062f0:	08006295 	.word	0x08006295
 80062f4:	08006343 	.word	0x08006343
 80062f8:	08006295 	.word	0x08006295
 80062fc:	08006295 	.word	0x08006295
 8006300:	080063db 	.word	0x080063db
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6032      	str	r2, [r6, #0]
 800630c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006314:	2301      	movs	r3, #1
 8006316:	e09d      	b.n	8006454 <_printf_i+0x1e8>
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	1d19      	adds	r1, r3, #4
 800631e:	6031      	str	r1, [r6, #0]
 8006320:	0606      	lsls	r6, r0, #24
 8006322:	d501      	bpl.n	8006328 <_printf_i+0xbc>
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	e003      	b.n	8006330 <_printf_i+0xc4>
 8006328:	0645      	lsls	r5, r0, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0xb8>
 800632c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006330:	2d00      	cmp	r5, #0
 8006332:	da03      	bge.n	800633c <_printf_i+0xd0>
 8006334:	232d      	movs	r3, #45	@ 0x2d
 8006336:	426d      	negs	r5, r5
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800633c:	4859      	ldr	r0, [pc, #356]	@ (80064a4 <_printf_i+0x238>)
 800633e:	230a      	movs	r3, #10
 8006340:	e011      	b.n	8006366 <_printf_i+0xfa>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	6833      	ldr	r3, [r6, #0]
 8006346:	0608      	lsls	r0, r1, #24
 8006348:	f853 5b04 	ldr.w	r5, [r3], #4
 800634c:	d402      	bmi.n	8006354 <_printf_i+0xe8>
 800634e:	0649      	lsls	r1, r1, #25
 8006350:	bf48      	it	mi
 8006352:	b2ad      	uxthmi	r5, r5
 8006354:	2f6f      	cmp	r7, #111	@ 0x6f
 8006356:	4853      	ldr	r0, [pc, #332]	@ (80064a4 <_printf_i+0x238>)
 8006358:	6033      	str	r3, [r6, #0]
 800635a:	bf14      	ite	ne
 800635c:	230a      	movne	r3, #10
 800635e:	2308      	moveq	r3, #8
 8006360:	2100      	movs	r1, #0
 8006362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006366:	6866      	ldr	r6, [r4, #4]
 8006368:	60a6      	str	r6, [r4, #8]
 800636a:	2e00      	cmp	r6, #0
 800636c:	bfa2      	ittt	ge
 800636e:	6821      	ldrge	r1, [r4, #0]
 8006370:	f021 0104 	bicge.w	r1, r1, #4
 8006374:	6021      	strge	r1, [r4, #0]
 8006376:	b90d      	cbnz	r5, 800637c <_printf_i+0x110>
 8006378:	2e00      	cmp	r6, #0
 800637a:	d04b      	beq.n	8006414 <_printf_i+0x1a8>
 800637c:	4616      	mov	r6, r2
 800637e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006382:	fb03 5711 	mls	r7, r3, r1, r5
 8006386:	5dc7      	ldrb	r7, [r0, r7]
 8006388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800638c:	462f      	mov	r7, r5
 800638e:	42bb      	cmp	r3, r7
 8006390:	460d      	mov	r5, r1
 8006392:	d9f4      	bls.n	800637e <_printf_i+0x112>
 8006394:	2b08      	cmp	r3, #8
 8006396:	d10b      	bne.n	80063b0 <_printf_i+0x144>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	07df      	lsls	r7, r3, #31
 800639c:	d508      	bpl.n	80063b0 <_printf_i+0x144>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	6861      	ldr	r1, [r4, #4]
 80063a2:	4299      	cmp	r1, r3
 80063a4:	bfde      	ittt	le
 80063a6:	2330      	movle	r3, #48	@ 0x30
 80063a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063b0:	1b92      	subs	r2, r2, r6
 80063b2:	6122      	str	r2, [r4, #16]
 80063b4:	f8cd a000 	str.w	sl, [sp]
 80063b8:	464b      	mov	r3, r9
 80063ba:	aa03      	add	r2, sp, #12
 80063bc:	4621      	mov	r1, r4
 80063be:	4640      	mov	r0, r8
 80063c0:	f7ff fee6 	bl	8006190 <_printf_common>
 80063c4:	3001      	adds	r0, #1
 80063c6:	d14a      	bne.n	800645e <_printf_i+0x1f2>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	b004      	add	sp, #16
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	f043 0320 	orr.w	r3, r3, #32
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	4833      	ldr	r0, [pc, #204]	@ (80064a8 <_printf_i+0x23c>)
 80063dc:	2778      	movs	r7, #120	@ 0x78
 80063de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	6831      	ldr	r1, [r6, #0]
 80063e6:	061f      	lsls	r7, r3, #24
 80063e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80063ec:	d402      	bmi.n	80063f4 <_printf_i+0x188>
 80063ee:	065f      	lsls	r7, r3, #25
 80063f0:	bf48      	it	mi
 80063f2:	b2ad      	uxthmi	r5, r5
 80063f4:	6031      	str	r1, [r6, #0]
 80063f6:	07d9      	lsls	r1, r3, #31
 80063f8:	bf44      	itt	mi
 80063fa:	f043 0320 	orrmi.w	r3, r3, #32
 80063fe:	6023      	strmi	r3, [r4, #0]
 8006400:	b11d      	cbz	r5, 800640a <_printf_i+0x19e>
 8006402:	2310      	movs	r3, #16
 8006404:	e7ac      	b.n	8006360 <_printf_i+0xf4>
 8006406:	4827      	ldr	r0, [pc, #156]	@ (80064a4 <_printf_i+0x238>)
 8006408:	e7e9      	b.n	80063de <_printf_i+0x172>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f023 0320 	bic.w	r3, r3, #32
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	e7f6      	b.n	8006402 <_printf_i+0x196>
 8006414:	4616      	mov	r6, r2
 8006416:	e7bd      	b.n	8006394 <_printf_i+0x128>
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	6961      	ldr	r1, [r4, #20]
 800641e:	1d18      	adds	r0, r3, #4
 8006420:	6030      	str	r0, [r6, #0]
 8006422:	062e      	lsls	r6, r5, #24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	d501      	bpl.n	800642c <_printf_i+0x1c0>
 8006428:	6019      	str	r1, [r3, #0]
 800642a:	e002      	b.n	8006432 <_printf_i+0x1c6>
 800642c:	0668      	lsls	r0, r5, #25
 800642e:	d5fb      	bpl.n	8006428 <_printf_i+0x1bc>
 8006430:	8019      	strh	r1, [r3, #0]
 8006432:	2300      	movs	r3, #0
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	4616      	mov	r6, r2
 8006438:	e7bc      	b.n	80063b4 <_printf_i+0x148>
 800643a:	6833      	ldr	r3, [r6, #0]
 800643c:	1d1a      	adds	r2, r3, #4
 800643e:	6032      	str	r2, [r6, #0]
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	2100      	movs	r1, #0
 8006446:	4630      	mov	r0, r6
 8006448:	f7f9 feea 	bl	8000220 <memchr>
 800644c:	b108      	cbz	r0, 8006452 <_printf_i+0x1e6>
 800644e:	1b80      	subs	r0, r0, r6
 8006450:	6060      	str	r0, [r4, #4]
 8006452:	6863      	ldr	r3, [r4, #4]
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	2300      	movs	r3, #0
 8006458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800645c:	e7aa      	b.n	80063b4 <_printf_i+0x148>
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	47d0      	blx	sl
 8006468:	3001      	adds	r0, #1
 800646a:	d0ad      	beq.n	80063c8 <_printf_i+0x15c>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	079b      	lsls	r3, r3, #30
 8006470:	d413      	bmi.n	800649a <_printf_i+0x22e>
 8006472:	68e0      	ldr	r0, [r4, #12]
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	4298      	cmp	r0, r3
 8006478:	bfb8      	it	lt
 800647a:	4618      	movlt	r0, r3
 800647c:	e7a6      	b.n	80063cc <_printf_i+0x160>
 800647e:	2301      	movs	r3, #1
 8006480:	4632      	mov	r2, r6
 8006482:	4649      	mov	r1, r9
 8006484:	4640      	mov	r0, r8
 8006486:	47d0      	blx	sl
 8006488:	3001      	adds	r0, #1
 800648a:	d09d      	beq.n	80063c8 <_printf_i+0x15c>
 800648c:	3501      	adds	r5, #1
 800648e:	68e3      	ldr	r3, [r4, #12]
 8006490:	9903      	ldr	r1, [sp, #12]
 8006492:	1a5b      	subs	r3, r3, r1
 8006494:	42ab      	cmp	r3, r5
 8006496:	dcf2      	bgt.n	800647e <_printf_i+0x212>
 8006498:	e7eb      	b.n	8006472 <_printf_i+0x206>
 800649a:	2500      	movs	r5, #0
 800649c:	f104 0619 	add.w	r6, r4, #25
 80064a0:	e7f5      	b.n	800648e <_printf_i+0x222>
 80064a2:	bf00      	nop
 80064a4:	080067b9 	.word	0x080067b9
 80064a8:	080067ca 	.word	0x080067ca

080064ac <__sflush_r>:
 80064ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	0716      	lsls	r6, r2, #28
 80064b6:	4605      	mov	r5, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	d454      	bmi.n	8006566 <__sflush_r+0xba>
 80064bc:	684b      	ldr	r3, [r1, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dc02      	bgt.n	80064c8 <__sflush_r+0x1c>
 80064c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dd48      	ble.n	800655a <__sflush_r+0xae>
 80064c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064ca:	2e00      	cmp	r6, #0
 80064cc:	d045      	beq.n	800655a <__sflush_r+0xae>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064d4:	682f      	ldr	r7, [r5, #0]
 80064d6:	6a21      	ldr	r1, [r4, #32]
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	d030      	beq.n	800653e <__sflush_r+0x92>
 80064dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	0759      	lsls	r1, r3, #29
 80064e2:	d505      	bpl.n	80064f0 <__sflush_r+0x44>
 80064e4:	6863      	ldr	r3, [r4, #4]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064ea:	b10b      	cbz	r3, 80064f0 <__sflush_r+0x44>
 80064ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	2300      	movs	r3, #0
 80064f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064f4:	6a21      	ldr	r1, [r4, #32]
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b0      	blx	r6
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	d106      	bne.n	800650e <__sflush_r+0x62>
 8006500:	6829      	ldr	r1, [r5, #0]
 8006502:	291d      	cmp	r1, #29
 8006504:	d82b      	bhi.n	800655e <__sflush_r+0xb2>
 8006506:	4a2a      	ldr	r2, [pc, #168]	@ (80065b0 <__sflush_r+0x104>)
 8006508:	410a      	asrs	r2, r1
 800650a:	07d6      	lsls	r6, r2, #31
 800650c:	d427      	bmi.n	800655e <__sflush_r+0xb2>
 800650e:	2200      	movs	r2, #0
 8006510:	6062      	str	r2, [r4, #4]
 8006512:	04d9      	lsls	r1, r3, #19
 8006514:	6922      	ldr	r2, [r4, #16]
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	d504      	bpl.n	8006524 <__sflush_r+0x78>
 800651a:	1c42      	adds	r2, r0, #1
 800651c:	d101      	bne.n	8006522 <__sflush_r+0x76>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	b903      	cbnz	r3, 8006524 <__sflush_r+0x78>
 8006522:	6560      	str	r0, [r4, #84]	@ 0x54
 8006524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006526:	602f      	str	r7, [r5, #0]
 8006528:	b1b9      	cbz	r1, 800655a <__sflush_r+0xae>
 800652a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800652e:	4299      	cmp	r1, r3
 8006530:	d002      	beq.n	8006538 <__sflush_r+0x8c>
 8006532:	4628      	mov	r0, r5
 8006534:	f7ff fbf2 	bl	8005d1c <_free_r>
 8006538:	2300      	movs	r3, #0
 800653a:	6363      	str	r3, [r4, #52]	@ 0x34
 800653c:	e00d      	b.n	800655a <__sflush_r+0xae>
 800653e:	2301      	movs	r3, #1
 8006540:	4628      	mov	r0, r5
 8006542:	47b0      	blx	r6
 8006544:	4602      	mov	r2, r0
 8006546:	1c50      	adds	r0, r2, #1
 8006548:	d1c9      	bne.n	80064de <__sflush_r+0x32>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0c6      	beq.n	80064de <__sflush_r+0x32>
 8006550:	2b1d      	cmp	r3, #29
 8006552:	d001      	beq.n	8006558 <__sflush_r+0xac>
 8006554:	2b16      	cmp	r3, #22
 8006556:	d11e      	bne.n	8006596 <__sflush_r+0xea>
 8006558:	602f      	str	r7, [r5, #0]
 800655a:	2000      	movs	r0, #0
 800655c:	e022      	b.n	80065a4 <__sflush_r+0xf8>
 800655e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006562:	b21b      	sxth	r3, r3
 8006564:	e01b      	b.n	800659e <__sflush_r+0xf2>
 8006566:	690f      	ldr	r7, [r1, #16]
 8006568:	2f00      	cmp	r7, #0
 800656a:	d0f6      	beq.n	800655a <__sflush_r+0xae>
 800656c:	0793      	lsls	r3, r2, #30
 800656e:	680e      	ldr	r6, [r1, #0]
 8006570:	bf08      	it	eq
 8006572:	694b      	ldreq	r3, [r1, #20]
 8006574:	600f      	str	r7, [r1, #0]
 8006576:	bf18      	it	ne
 8006578:	2300      	movne	r3, #0
 800657a:	eba6 0807 	sub.w	r8, r6, r7
 800657e:	608b      	str	r3, [r1, #8]
 8006580:	f1b8 0f00 	cmp.w	r8, #0
 8006584:	dde9      	ble.n	800655a <__sflush_r+0xae>
 8006586:	6a21      	ldr	r1, [r4, #32]
 8006588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800658a:	4643      	mov	r3, r8
 800658c:	463a      	mov	r2, r7
 800658e:	4628      	mov	r0, r5
 8006590:	47b0      	blx	r6
 8006592:	2800      	cmp	r0, #0
 8006594:	dc08      	bgt.n	80065a8 <__sflush_r+0xfc>
 8006596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800659a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a8:	4407      	add	r7, r0
 80065aa:	eba8 0800 	sub.w	r8, r8, r0
 80065ae:	e7e7      	b.n	8006580 <__sflush_r+0xd4>
 80065b0:	dfbffffe 	.word	0xdfbffffe

080065b4 <_fflush_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	690b      	ldr	r3, [r1, #16]
 80065b8:	4605      	mov	r5, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	b913      	cbnz	r3, 80065c4 <_fflush_r+0x10>
 80065be:	2500      	movs	r5, #0
 80065c0:	4628      	mov	r0, r5
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	b118      	cbz	r0, 80065ce <_fflush_r+0x1a>
 80065c6:	6a03      	ldr	r3, [r0, #32]
 80065c8:	b90b      	cbnz	r3, 80065ce <_fflush_r+0x1a>
 80065ca:	f7ff f9ad 	bl	8005928 <__sinit>
 80065ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f3      	beq.n	80065be <_fflush_r+0xa>
 80065d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065d8:	07d0      	lsls	r0, r2, #31
 80065da:	d404      	bmi.n	80065e6 <_fflush_r+0x32>
 80065dc:	0599      	lsls	r1, r3, #22
 80065de:	d402      	bmi.n	80065e6 <_fflush_r+0x32>
 80065e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065e2:	f7ff fb98 	bl	8005d16 <__retarget_lock_acquire_recursive>
 80065e6:	4628      	mov	r0, r5
 80065e8:	4621      	mov	r1, r4
 80065ea:	f7ff ff5f 	bl	80064ac <__sflush_r>
 80065ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065f0:	07da      	lsls	r2, r3, #31
 80065f2:	4605      	mov	r5, r0
 80065f4:	d4e4      	bmi.n	80065c0 <_fflush_r+0xc>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	059b      	lsls	r3, r3, #22
 80065fa:	d4e1      	bmi.n	80065c0 <_fflush_r+0xc>
 80065fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065fe:	f7ff fb8b 	bl	8005d18 <__retarget_lock_release_recursive>
 8006602:	e7dd      	b.n	80065c0 <_fflush_r+0xc>

08006604 <__swhatbuf_r>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	460c      	mov	r4, r1
 8006608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660c:	2900      	cmp	r1, #0
 800660e:	b096      	sub	sp, #88	@ 0x58
 8006610:	4615      	mov	r5, r2
 8006612:	461e      	mov	r6, r3
 8006614:	da0d      	bge.n	8006632 <__swhatbuf_r+0x2e>
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800661c:	f04f 0100 	mov.w	r1, #0
 8006620:	bf14      	ite	ne
 8006622:	2340      	movne	r3, #64	@ 0x40
 8006624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006628:	2000      	movs	r0, #0
 800662a:	6031      	str	r1, [r6, #0]
 800662c:	602b      	str	r3, [r5, #0]
 800662e:	b016      	add	sp, #88	@ 0x58
 8006630:	bd70      	pop	{r4, r5, r6, pc}
 8006632:	466a      	mov	r2, sp
 8006634:	f000 f848 	bl	80066c8 <_fstat_r>
 8006638:	2800      	cmp	r0, #0
 800663a:	dbec      	blt.n	8006616 <__swhatbuf_r+0x12>
 800663c:	9901      	ldr	r1, [sp, #4]
 800663e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006646:	4259      	negs	r1, r3
 8006648:	4159      	adcs	r1, r3
 800664a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800664e:	e7eb      	b.n	8006628 <__swhatbuf_r+0x24>

08006650 <__smakebuf_r>:
 8006650:	898b      	ldrh	r3, [r1, #12]
 8006652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006654:	079d      	lsls	r5, r3, #30
 8006656:	4606      	mov	r6, r0
 8006658:	460c      	mov	r4, r1
 800665a:	d507      	bpl.n	800666c <__smakebuf_r+0x1c>
 800665c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	6123      	str	r3, [r4, #16]
 8006664:	2301      	movs	r3, #1
 8006666:	6163      	str	r3, [r4, #20]
 8006668:	b003      	add	sp, #12
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	ab01      	add	r3, sp, #4
 800666e:	466a      	mov	r2, sp
 8006670:	f7ff ffc8 	bl	8006604 <__swhatbuf_r>
 8006674:	9f00      	ldr	r7, [sp, #0]
 8006676:	4605      	mov	r5, r0
 8006678:	4639      	mov	r1, r7
 800667a:	4630      	mov	r0, r6
 800667c:	f7ff fbba 	bl	8005df4 <_malloc_r>
 8006680:	b948      	cbnz	r0, 8006696 <__smakebuf_r+0x46>
 8006682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006686:	059a      	lsls	r2, r3, #22
 8006688:	d4ee      	bmi.n	8006668 <__smakebuf_r+0x18>
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	f043 0302 	orr.w	r3, r3, #2
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	e7e2      	b.n	800665c <__smakebuf_r+0xc>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	6020      	str	r0, [r4, #0]
 800669a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066a6:	b15b      	cbz	r3, 80066c0 <__smakebuf_r+0x70>
 80066a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ac:	4630      	mov	r0, r6
 80066ae:	f000 f81d 	bl	80066ec <_isatty_r>
 80066b2:	b128      	cbz	r0, 80066c0 <__smakebuf_r+0x70>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	431d      	orrs	r5, r3
 80066c4:	81a5      	strh	r5, [r4, #12]
 80066c6:	e7cf      	b.n	8006668 <__smakebuf_r+0x18>

080066c8 <_fstat_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d07      	ldr	r5, [pc, #28]	@ (80066e8 <_fstat_r+0x20>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	f7fa fb8e 	bl	8000df6 <_fstat>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d102      	bne.n	80066e4 <_fstat_r+0x1c>
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	b103      	cbz	r3, 80066e4 <_fstat_r+0x1c>
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	20000324 	.word	0x20000324

080066ec <_isatty_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d06      	ldr	r5, [pc, #24]	@ (8006708 <_isatty_r+0x1c>)
 80066f0:	2300      	movs	r3, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fa fb8d 	bl	8000e16 <_isatty>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_isatty_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_isatty_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20000324 	.word	0x20000324

0800670c <_sbrk_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	@ (8006728 <_sbrk_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fa fb96 	bl	8000e48 <_sbrk>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_sbrk_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_sbrk_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20000324 	.word	0x20000324

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
